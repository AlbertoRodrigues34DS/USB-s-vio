
USB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f90  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  0800809c  0800809c  0001809c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080081a8  080081a8  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  080081a8  080081a8  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080081a8  080081a8  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080081a8  080081a8  000181a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080081ac  080081ac  000181ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080081b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001304  200001e0  08008390  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200014e4  08008390  000214e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000124c8  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002d1b  00000000  00000000  000326d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b88  00000000  00000000  000353f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a20  00000000  00000000  00035f78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a209  00000000  00000000  00036998  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d35f  00000000  00000000  00050ba1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00089c47  00000000  00000000  0005df00  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e7b47  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fbc  00000000  00000000  000e7bc4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001e0 	.word	0x200001e0
 8000128:	00000000 	.word	0x00000000
 800012c:	08008084 	.word	0x08008084

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001e4 	.word	0x200001e4
 8000148:	08008084 	.word	0x08008084

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 8000162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
int32_t read[2];
const int32_t min_read=410;
 8000164:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 8000168:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
const int32_t max_read=3677;
 800016c:	f640 635d 	movw	r3, #3677	; 0xe5d
 8000170:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
uint32_t buffer[255];
uint32_t count=0;
 8000174:	2300      	movs	r3, #0
 8000176:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800017a:	f000 fa91 	bl	80006a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800017e:	f000 f88d 	bl	800029c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000182:	f000 f927 	bl	80003d4 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000186:	f006 fe8d 	bl	8006ea4 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 800018a:	f000 f8e5 	bl	8000358 <MX_ADC1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  HAL_ADC_Start(&hadc1);
 800018e:	483d      	ldr	r0, [pc, #244]	; (8000284 <main+0x128>)
 8000190:	f000 fbc0 	bl	8000914 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1,100);
 8000194:	2164      	movs	r1, #100	; 0x64
 8000196:	483b      	ldr	r0, [pc, #236]	; (8000284 <main+0x128>)
 8000198:	f000 fc6a 	bl	8000a70 <HAL_ADC_PollForConversion>
	  read[0] -  HAL_ADC_GetValue(&hadc1);
 800019c:	4839      	ldr	r0, [pc, #228]	; (8000284 <main+0x128>)
 800019e:	f000 fd61 	bl	8000c64 <HAL_ADC_GetValue>

	  count++;
 80001a2:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 80001a6:	3301      	adds	r3, #1
 80001a8:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
	  if (count==50)
 80001ac:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 80001b0:	2b32      	cmp	r3, #50	; 0x32
 80001b2:	d11e      	bne.n	80001f2 <main+0x96>
	  {
	  sprintf(buffer,"tensao no ADC %d mV", (read[0]*3300)/4095);
 80001b4:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 80001b8:	f640 42e4 	movw	r2, #3300	; 0xce4
 80001bc:	fb02 f303 	mul.w	r3, r2, r3
 80001c0:	4a31      	ldr	r2, [pc, #196]	; (8000288 <main+0x12c>)
 80001c2:	fb82 1203 	smull	r1, r2, r2, r3
 80001c6:	441a      	add	r2, r3
 80001c8:	12d2      	asrs	r2, r2, #11
 80001ca:	17db      	asrs	r3, r3, #31
 80001cc:	1ad2      	subs	r2, r2, r3
 80001ce:	463b      	mov	r3, r7
 80001d0:	492e      	ldr	r1, [pc, #184]	; (800028c <main+0x130>)
 80001d2:	4618      	mov	r0, r3
 80001d4:	f007 fb4e 	bl	8007874 <siprintf>
	  CDC_Transmit_FS(buffer,strlen(buffer));
 80001d8:	463b      	mov	r3, r7
 80001da:	4618      	mov	r0, r3
 80001dc:	f7ff ffb6 	bl	800014c <strlen>
 80001e0:	4602      	mov	r2, r0
 80001e2:	463b      	mov	r3, r7
 80001e4:	4611      	mov	r1, r2
 80001e6:	4618      	mov	r0, r3
 80001e8:	f006 ff28 	bl	800703c <CDC_Transmit_FS>
	  count=0;
 80001ec:	2300      	movs	r3, #0
 80001ee:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
	  }

	  if (gUSBRxBuffer[0]!=0)
 80001f2:	4b27      	ldr	r3, [pc, #156]	; (8000290 <main+0x134>)
 80001f4:	781b      	ldrb	r3, [r3, #0]
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	d0c9      	beq.n	800018e <main+0x32>
	  {
		  switch(gUSBRxBuffer[0])
 80001fa:	4b25      	ldr	r3, [pc, #148]	; (8000290 <main+0x134>)
 80001fc:	781b      	ldrb	r3, [r3, #0]
 80001fe:	2b67      	cmp	r3, #103	; 0x67
 8000200:	d11c      	bne.n	800023c <main+0xe0>
		  {
		  	case 103:
		 	{
		 	  sprintf(buffer,"tecla pressionada g\r\n", (read[0]*3300)/4095);
 8000202:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 8000206:	f640 42e4 	movw	r2, #3300	; 0xce4
 800020a:	fb02 f303 	mul.w	r3, r2, r3
 800020e:	4a1e      	ldr	r2, [pc, #120]	; (8000288 <main+0x12c>)
 8000210:	fb82 1203 	smull	r1, r2, r2, r3
 8000214:	441a      	add	r2, r3
 8000216:	12d2      	asrs	r2, r2, #11
 8000218:	17db      	asrs	r3, r3, #31
 800021a:	1ad2      	subs	r2, r2, r3
 800021c:	463b      	mov	r3, r7
 800021e:	491d      	ldr	r1, [pc, #116]	; (8000294 <main+0x138>)
 8000220:	4618      	mov	r0, r3
 8000222:	f007 fb27 	bl	8007874 <siprintf>
		 	  CDC_Transmit_FS(buffer,strlen(buffer));
 8000226:	463b      	mov	r3, r7
 8000228:	4618      	mov	r0, r3
 800022a:	f7ff ff8f 	bl	800014c <strlen>
 800022e:	4602      	mov	r2, r0
 8000230:	463b      	mov	r3, r7
 8000232:	4611      	mov	r1, r2
 8000234:	4618      	mov	r0, r3
 8000236:	f006 ff01 	bl	800703c <CDC_Transmit_FS>
			  break;
 800023a:	e01c      	b.n	8000276 <main+0x11a>
		 	}
		  	default:
		  	{
		  	  sprintf(buffer,"Comando enviado n√£o reconhecido \r\n", (read[0]*3300)/4095);
 800023c:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 8000240:	f640 42e4 	movw	r2, #3300	; 0xce4
 8000244:	fb02 f303 	mul.w	r3, r2, r3
 8000248:	4a0f      	ldr	r2, [pc, #60]	; (8000288 <main+0x12c>)
 800024a:	fb82 1203 	smull	r1, r2, r2, r3
 800024e:	441a      	add	r2, r3
 8000250:	12d2      	asrs	r2, r2, #11
 8000252:	17db      	asrs	r3, r3, #31
 8000254:	1ad2      	subs	r2, r2, r3
 8000256:	463b      	mov	r3, r7
 8000258:	490f      	ldr	r1, [pc, #60]	; (8000298 <main+0x13c>)
 800025a:	4618      	mov	r0, r3
 800025c:	f007 fb0a 	bl	8007874 <siprintf>
		  	  CDC_Transmit_FS(buffer,strlen(buffer));
 8000260:	463b      	mov	r3, r7
 8000262:	4618      	mov	r0, r3
 8000264:	f7ff ff72 	bl	800014c <strlen>
 8000268:	4602      	mov	r2, r0
 800026a:	463b      	mov	r3, r7
 800026c:	4611      	mov	r1, r2
 800026e:	4618      	mov	r0, r3
 8000270:	f006 fee4 	bl	800703c <CDC_Transmit_FS>
		  	  break;
 8000274:	bf00      	nop
		  	}
		  }
		  memset (gUSBRxBuffer,0,255);
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	2100      	movs	r1, #0
 800027a:	4805      	ldr	r0, [pc, #20]	; (8000290 <main+0x134>)
 800027c:	f007 faf1 	bl	8007862 <memset>
	  HAL_ADC_Start(&hadc1);
 8000280:	e785      	b.n	800018e <main+0x32>
 8000282:	bf00      	nop
 8000284:	2000042c 	.word	0x2000042c
 8000288:	80080081 	.word	0x80080081
 800028c:	0800809c 	.word	0x0800809c
 8000290:	2000045c 	.word	0x2000045c
 8000294:	080080b0 	.word	0x080080b0
 8000298:	080080c8 	.word	0x080080c8

0800029c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b094      	sub	sp, #80	; 0x50
 80002a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002a6:	2228      	movs	r2, #40	; 0x28
 80002a8:	2100      	movs	r1, #0
 80002aa:	4618      	mov	r0, r3
 80002ac:	f007 fad9 	bl	8007862 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002b0:	f107 0314 	add.w	r3, r7, #20
 80002b4:	2200      	movs	r2, #0
 80002b6:	601a      	str	r2, [r3, #0]
 80002b8:	605a      	str	r2, [r3, #4]
 80002ba:	609a      	str	r2, [r3, #8]
 80002bc:	60da      	str	r2, [r3, #12]
 80002be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002c0:	1d3b      	adds	r3, r7, #4
 80002c2:	2200      	movs	r2, #0
 80002c4:	601a      	str	r2, [r3, #0]
 80002c6:	605a      	str	r2, [r3, #4]
 80002c8:	609a      	str	r2, [r3, #8]
 80002ca:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002cc:	2301      	movs	r3, #1
 80002ce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002d6:	2300      	movs	r3, #0
 80002d8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002da:	2301      	movs	r3, #1
 80002dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002de:	2302      	movs	r3, #2
 80002e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002e8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002f2:	4618      	mov	r0, r3
 80002f4:	f002 fc4a 	bl	8002b8c <HAL_RCC_OscConfig>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d001      	beq.n	8000302 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80002fe:	f000 f8c9 	bl	8000494 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000302:	230f      	movs	r3, #15
 8000304:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000306:	2302      	movs	r3, #2
 8000308:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800030a:	2300      	movs	r3, #0
 800030c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800030e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000312:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000314:	2300      	movs	r3, #0
 8000316:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000318:	f107 0314 	add.w	r3, r7, #20
 800031c:	2102      	movs	r1, #2
 800031e:	4618      	mov	r0, r3
 8000320:	f002 feb4 	bl	800308c <HAL_RCC_ClockConfig>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d001      	beq.n	800032e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800032a:	f000 f8b3 	bl	8000494 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 800032e:	2312      	movs	r3, #18
 8000330:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000332:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000336:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000338:	2300      	movs	r3, #0
 800033a:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800033c:	1d3b      	adds	r3, r7, #4
 800033e:	4618      	mov	r0, r3
 8000340:	f003 f82c 	bl	800339c <HAL_RCCEx_PeriphCLKConfig>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	d001      	beq.n	800034e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800034a:	f000 f8a3 	bl	8000494 <Error_Handler>
  }
}
 800034e:	bf00      	nop
 8000350:	3750      	adds	r7, #80	; 0x50
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}
	...

08000358 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b084      	sub	sp, #16
 800035c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800035e:	1d3b      	adds	r3, r7, #4
 8000360:	2200      	movs	r2, #0
 8000362:	601a      	str	r2, [r3, #0]
 8000364:	605a      	str	r2, [r3, #4]
 8000366:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000368:	4b18      	ldr	r3, [pc, #96]	; (80003cc <MX_ADC1_Init+0x74>)
 800036a:	4a19      	ldr	r2, [pc, #100]	; (80003d0 <MX_ADC1_Init+0x78>)
 800036c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800036e:	4b17      	ldr	r3, [pc, #92]	; (80003cc <MX_ADC1_Init+0x74>)
 8000370:	2200      	movs	r2, #0
 8000372:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000374:	4b15      	ldr	r3, [pc, #84]	; (80003cc <MX_ADC1_Init+0x74>)
 8000376:	2200      	movs	r2, #0
 8000378:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800037a:	4b14      	ldr	r3, [pc, #80]	; (80003cc <MX_ADC1_Init+0x74>)
 800037c:	2200      	movs	r2, #0
 800037e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000380:	4b12      	ldr	r3, [pc, #72]	; (80003cc <MX_ADC1_Init+0x74>)
 8000382:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000386:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000388:	4b10      	ldr	r3, [pc, #64]	; (80003cc <MX_ADC1_Init+0x74>)
 800038a:	2200      	movs	r2, #0
 800038c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800038e:	4b0f      	ldr	r3, [pc, #60]	; (80003cc <MX_ADC1_Init+0x74>)
 8000390:	2201      	movs	r2, #1
 8000392:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000394:	480d      	ldr	r0, [pc, #52]	; (80003cc <MX_ADC1_Init+0x74>)
 8000396:	f000 f9e5 	bl	8000764 <HAL_ADC_Init>
 800039a:	4603      	mov	r3, r0
 800039c:	2b00      	cmp	r3, #0
 800039e:	d001      	beq.n	80003a4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80003a0:	f000 f878 	bl	8000494 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80003a4:	2300      	movs	r3, #0
 80003a6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003a8:	2301      	movs	r3, #1
 80003aa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003ac:	2300      	movs	r3, #0
 80003ae:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003b0:	1d3b      	adds	r3, r7, #4
 80003b2:	4619      	mov	r1, r3
 80003b4:	4805      	ldr	r0, [pc, #20]	; (80003cc <MX_ADC1_Init+0x74>)
 80003b6:	f000 fc61 	bl	8000c7c <HAL_ADC_ConfigChannel>
 80003ba:	4603      	mov	r3, r0
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d001      	beq.n	80003c4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80003c0:	f000 f868 	bl	8000494 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003c4:	bf00      	nop
 80003c6:	3710      	adds	r7, #16
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bd80      	pop	{r7, pc}
 80003cc:	2000042c 	.word	0x2000042c
 80003d0:	40012400 	.word	0x40012400

080003d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b088      	sub	sp, #32
 80003d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003da:	f107 0310 	add.w	r3, r7, #16
 80003de:	2200      	movs	r2, #0
 80003e0:	601a      	str	r2, [r3, #0]
 80003e2:	605a      	str	r2, [r3, #4]
 80003e4:	609a      	str	r2, [r3, #8]
 80003e6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003e8:	4b27      	ldr	r3, [pc, #156]	; (8000488 <MX_GPIO_Init+0xb4>)
 80003ea:	699b      	ldr	r3, [r3, #24]
 80003ec:	4a26      	ldr	r2, [pc, #152]	; (8000488 <MX_GPIO_Init+0xb4>)
 80003ee:	f043 0310 	orr.w	r3, r3, #16
 80003f2:	6193      	str	r3, [r2, #24]
 80003f4:	4b24      	ldr	r3, [pc, #144]	; (8000488 <MX_GPIO_Init+0xb4>)
 80003f6:	699b      	ldr	r3, [r3, #24]
 80003f8:	f003 0310 	and.w	r3, r3, #16
 80003fc:	60fb      	str	r3, [r7, #12]
 80003fe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000400:	4b21      	ldr	r3, [pc, #132]	; (8000488 <MX_GPIO_Init+0xb4>)
 8000402:	699b      	ldr	r3, [r3, #24]
 8000404:	4a20      	ldr	r2, [pc, #128]	; (8000488 <MX_GPIO_Init+0xb4>)
 8000406:	f043 0320 	orr.w	r3, r3, #32
 800040a:	6193      	str	r3, [r2, #24]
 800040c:	4b1e      	ldr	r3, [pc, #120]	; (8000488 <MX_GPIO_Init+0xb4>)
 800040e:	699b      	ldr	r3, [r3, #24]
 8000410:	f003 0320 	and.w	r3, r3, #32
 8000414:	60bb      	str	r3, [r7, #8]
 8000416:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000418:	4b1b      	ldr	r3, [pc, #108]	; (8000488 <MX_GPIO_Init+0xb4>)
 800041a:	699b      	ldr	r3, [r3, #24]
 800041c:	4a1a      	ldr	r2, [pc, #104]	; (8000488 <MX_GPIO_Init+0xb4>)
 800041e:	f043 0304 	orr.w	r3, r3, #4
 8000422:	6193      	str	r3, [r2, #24]
 8000424:	4b18      	ldr	r3, [pc, #96]	; (8000488 <MX_GPIO_Init+0xb4>)
 8000426:	699b      	ldr	r3, [r3, #24]
 8000428:	f003 0304 	and.w	r3, r3, #4
 800042c:	607b      	str	r3, [r7, #4]
 800042e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000430:	2200      	movs	r2, #0
 8000432:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000436:	4815      	ldr	r0, [pc, #84]	; (800048c <MX_GPIO_Init+0xb8>)
 8000438:	f001 f80c 	bl	8001454 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 800043c:	2200      	movs	r2, #0
 800043e:	21f8      	movs	r1, #248	; 0xf8
 8000440:	4813      	ldr	r0, [pc, #76]	; (8000490 <MX_GPIO_Init+0xbc>)
 8000442:	f001 f807 	bl	8001454 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000446:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800044a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800044c:	2301      	movs	r3, #1
 800044e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000450:	2300      	movs	r3, #0
 8000452:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000454:	2302      	movs	r3, #2
 8000456:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000458:	f107 0310 	add.w	r3, r7, #16
 800045c:	4619      	mov	r1, r3
 800045e:	480b      	ldr	r0, [pc, #44]	; (800048c <MX_GPIO_Init+0xb8>)
 8000460:	f000 fe9e 	bl	80011a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 PA5 PA6
                           PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000464:	23f8      	movs	r3, #248	; 0xf8
 8000466:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000468:	2301      	movs	r3, #1
 800046a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800046c:	2300      	movs	r3, #0
 800046e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000470:	2302      	movs	r3, #2
 8000472:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000474:	f107 0310 	add.w	r3, r7, #16
 8000478:	4619      	mov	r1, r3
 800047a:	4805      	ldr	r0, [pc, #20]	; (8000490 <MX_GPIO_Init+0xbc>)
 800047c:	f000 fe90 	bl	80011a0 <HAL_GPIO_Init>

}
 8000480:	bf00      	nop
 8000482:	3720      	adds	r7, #32
 8000484:	46bd      	mov	sp, r7
 8000486:	bd80      	pop	{r7, pc}
 8000488:	40021000 	.word	0x40021000
 800048c:	40011000 	.word	0x40011000
 8000490:	40010800 	.word	0x40010800

08000494 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000498:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800049a:	e7fe      	b.n	800049a <Error_Handler+0x6>

0800049c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800049c:	b480      	push	{r7}
 800049e:	b085      	sub	sp, #20
 80004a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004a2:	4b15      	ldr	r3, [pc, #84]	; (80004f8 <HAL_MspInit+0x5c>)
 80004a4:	699b      	ldr	r3, [r3, #24]
 80004a6:	4a14      	ldr	r2, [pc, #80]	; (80004f8 <HAL_MspInit+0x5c>)
 80004a8:	f043 0301 	orr.w	r3, r3, #1
 80004ac:	6193      	str	r3, [r2, #24]
 80004ae:	4b12      	ldr	r3, [pc, #72]	; (80004f8 <HAL_MspInit+0x5c>)
 80004b0:	699b      	ldr	r3, [r3, #24]
 80004b2:	f003 0301 	and.w	r3, r3, #1
 80004b6:	60bb      	str	r3, [r7, #8]
 80004b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ba:	4b0f      	ldr	r3, [pc, #60]	; (80004f8 <HAL_MspInit+0x5c>)
 80004bc:	69db      	ldr	r3, [r3, #28]
 80004be:	4a0e      	ldr	r2, [pc, #56]	; (80004f8 <HAL_MspInit+0x5c>)
 80004c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004c4:	61d3      	str	r3, [r2, #28]
 80004c6:	4b0c      	ldr	r3, [pc, #48]	; (80004f8 <HAL_MspInit+0x5c>)
 80004c8:	69db      	ldr	r3, [r3, #28]
 80004ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004ce:	607b      	str	r3, [r7, #4]
 80004d0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004d2:	4b0a      	ldr	r3, [pc, #40]	; (80004fc <HAL_MspInit+0x60>)
 80004d4:	685b      	ldr	r3, [r3, #4]
 80004d6:	60fb      	str	r3, [r7, #12]
 80004d8:	68fb      	ldr	r3, [r7, #12]
 80004da:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004de:	60fb      	str	r3, [r7, #12]
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004e6:	60fb      	str	r3, [r7, #12]
 80004e8:	4a04      	ldr	r2, [pc, #16]	; (80004fc <HAL_MspInit+0x60>)
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004ee:	bf00      	nop
 80004f0:	3714      	adds	r7, #20
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bc80      	pop	{r7}
 80004f6:	4770      	bx	lr
 80004f8:	40021000 	.word	0x40021000
 80004fc:	40010000 	.word	0x40010000

08000500 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b088      	sub	sp, #32
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000508:	f107 0310 	add.w	r3, r7, #16
 800050c:	2200      	movs	r2, #0
 800050e:	601a      	str	r2, [r3, #0]
 8000510:	605a      	str	r2, [r3, #4]
 8000512:	609a      	str	r2, [r3, #8]
 8000514:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	4a14      	ldr	r2, [pc, #80]	; (800056c <HAL_ADC_MspInit+0x6c>)
 800051c:	4293      	cmp	r3, r2
 800051e:	d121      	bne.n	8000564 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000520:	4b13      	ldr	r3, [pc, #76]	; (8000570 <HAL_ADC_MspInit+0x70>)
 8000522:	699b      	ldr	r3, [r3, #24]
 8000524:	4a12      	ldr	r2, [pc, #72]	; (8000570 <HAL_ADC_MspInit+0x70>)
 8000526:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800052a:	6193      	str	r3, [r2, #24]
 800052c:	4b10      	ldr	r3, [pc, #64]	; (8000570 <HAL_ADC_MspInit+0x70>)
 800052e:	699b      	ldr	r3, [r3, #24]
 8000530:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000534:	60fb      	str	r3, [r7, #12]
 8000536:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000538:	4b0d      	ldr	r3, [pc, #52]	; (8000570 <HAL_ADC_MspInit+0x70>)
 800053a:	699b      	ldr	r3, [r3, #24]
 800053c:	4a0c      	ldr	r2, [pc, #48]	; (8000570 <HAL_ADC_MspInit+0x70>)
 800053e:	f043 0304 	orr.w	r3, r3, #4
 8000542:	6193      	str	r3, [r2, #24]
 8000544:	4b0a      	ldr	r3, [pc, #40]	; (8000570 <HAL_ADC_MspInit+0x70>)
 8000546:	699b      	ldr	r3, [r3, #24]
 8000548:	f003 0304 	and.w	r3, r3, #4
 800054c:	60bb      	str	r3, [r7, #8]
 800054e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000550:	2303      	movs	r3, #3
 8000552:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000554:	2303      	movs	r3, #3
 8000556:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000558:	f107 0310 	add.w	r3, r7, #16
 800055c:	4619      	mov	r1, r3
 800055e:	4805      	ldr	r0, [pc, #20]	; (8000574 <HAL_ADC_MspInit+0x74>)
 8000560:	f000 fe1e 	bl	80011a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000564:	bf00      	nop
 8000566:	3720      	adds	r7, #32
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	40012400 	.word	0x40012400
 8000570:	40021000 	.word	0x40021000
 8000574:	40010800 	.word	0x40010800

08000578 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800057c:	e7fe      	b.n	800057c <NMI_Handler+0x4>

0800057e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800057e:	b480      	push	{r7}
 8000580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000582:	e7fe      	b.n	8000582 <HardFault_Handler+0x4>

08000584 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000588:	e7fe      	b.n	8000588 <MemManage_Handler+0x4>

0800058a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800058a:	b480      	push	{r7}
 800058c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800058e:	e7fe      	b.n	800058e <BusFault_Handler+0x4>

08000590 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000594:	e7fe      	b.n	8000594 <UsageFault_Handler+0x4>

08000596 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000596:	b480      	push	{r7}
 8000598:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800059a:	bf00      	nop
 800059c:	46bd      	mov	sp, r7
 800059e:	bc80      	pop	{r7}
 80005a0:	4770      	bx	lr

080005a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005a2:	b480      	push	{r7}
 80005a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005a6:	bf00      	nop
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bc80      	pop	{r7}
 80005ac:	4770      	bx	lr

080005ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005ae:	b480      	push	{r7}
 80005b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005b2:	bf00      	nop
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bc80      	pop	{r7}
 80005b8:	4770      	bx	lr

080005ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005ba:	b580      	push	{r7, lr}
 80005bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005be:	f000 f8b5 	bl	800072c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005c2:	bf00      	nop
 80005c4:	bd80      	pop	{r7, pc}
	...

080005c8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80005cc:	4802      	ldr	r0, [pc, #8]	; (80005d8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80005ce:	f001 f88a 	bl	80016e6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80005d2:	bf00      	nop
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	200011f4 	.word	0x200011f4

080005dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b086      	sub	sp, #24
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005e4:	4a14      	ldr	r2, [pc, #80]	; (8000638 <_sbrk+0x5c>)
 80005e6:	4b15      	ldr	r3, [pc, #84]	; (800063c <_sbrk+0x60>)
 80005e8:	1ad3      	subs	r3, r2, r3
 80005ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005ec:	697b      	ldr	r3, [r7, #20]
 80005ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005f0:	4b13      	ldr	r3, [pc, #76]	; (8000640 <_sbrk+0x64>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d102      	bne.n	80005fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005f8:	4b11      	ldr	r3, [pc, #68]	; (8000640 <_sbrk+0x64>)
 80005fa:	4a12      	ldr	r2, [pc, #72]	; (8000644 <_sbrk+0x68>)
 80005fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005fe:	4b10      	ldr	r3, [pc, #64]	; (8000640 <_sbrk+0x64>)
 8000600:	681a      	ldr	r2, [r3, #0]
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4413      	add	r3, r2
 8000606:	693a      	ldr	r2, [r7, #16]
 8000608:	429a      	cmp	r2, r3
 800060a:	d207      	bcs.n	800061c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800060c:	f007 f8f4 	bl	80077f8 <__errno>
 8000610:	4602      	mov	r2, r0
 8000612:	230c      	movs	r3, #12
 8000614:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000616:	f04f 33ff 	mov.w	r3, #4294967295
 800061a:	e009      	b.n	8000630 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800061c:	4b08      	ldr	r3, [pc, #32]	; (8000640 <_sbrk+0x64>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000622:	4b07      	ldr	r3, [pc, #28]	; (8000640 <_sbrk+0x64>)
 8000624:	681a      	ldr	r2, [r3, #0]
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	4413      	add	r3, r2
 800062a:	4a05      	ldr	r2, [pc, #20]	; (8000640 <_sbrk+0x64>)
 800062c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800062e:	68fb      	ldr	r3, [r7, #12]
}
 8000630:	4618      	mov	r0, r3
 8000632:	3718      	adds	r7, #24
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	20005000 	.word	0x20005000
 800063c:	00000400 	.word	0x00000400
 8000640:	200001fc 	.word	0x200001fc
 8000644:	200014e8 	.word	0x200014e8

08000648 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800064c:	bf00      	nop
 800064e:	46bd      	mov	sp, r7
 8000650:	bc80      	pop	{r7}
 8000652:	4770      	bx	lr

08000654 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000654:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000656:	e003      	b.n	8000660 <LoopCopyDataInit>

08000658 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000658:	4b0b      	ldr	r3, [pc, #44]	; (8000688 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800065a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800065c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800065e:	3104      	adds	r1, #4

08000660 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000660:	480a      	ldr	r0, [pc, #40]	; (800068c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000662:	4b0b      	ldr	r3, [pc, #44]	; (8000690 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000664:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000666:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000668:	d3f6      	bcc.n	8000658 <CopyDataInit>
  ldr r2, =_sbss
 800066a:	4a0a      	ldr	r2, [pc, #40]	; (8000694 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800066c:	e002      	b.n	8000674 <LoopFillZerobss>

0800066e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800066e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000670:	f842 3b04 	str.w	r3, [r2], #4

08000674 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000674:	4b08      	ldr	r3, [pc, #32]	; (8000698 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000676:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000678:	d3f9      	bcc.n	800066e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800067a:	f7ff ffe5 	bl	8000648 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800067e:	f007 f8c1 	bl	8007804 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000682:	f7ff fd6b 	bl	800015c <main>
  bx lr
 8000686:	4770      	bx	lr
  ldr r3, =_sidata
 8000688:	080081b0 	.word	0x080081b0
  ldr r0, =_sdata
 800068c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000690:	200001e0 	.word	0x200001e0
  ldr r2, =_sbss
 8000694:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 8000698:	200014e4 	.word	0x200014e4

0800069c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800069c:	e7fe      	b.n	800069c <ADC1_2_IRQHandler>
	...

080006a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006a4:	4b08      	ldr	r3, [pc, #32]	; (80006c8 <HAL_Init+0x28>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a07      	ldr	r2, [pc, #28]	; (80006c8 <HAL_Init+0x28>)
 80006aa:	f043 0310 	orr.w	r3, r3, #16
 80006ae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006b0:	2003      	movs	r0, #3
 80006b2:	f000 fd33 	bl	800111c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006b6:	2000      	movs	r0, #0
 80006b8:	f000 f808 	bl	80006cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006bc:	f7ff feee 	bl	800049c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006c0:	2300      	movs	r3, #0
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40022000 	.word	0x40022000

080006cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006d4:	4b12      	ldr	r3, [pc, #72]	; (8000720 <HAL_InitTick+0x54>)
 80006d6:	681a      	ldr	r2, [r3, #0]
 80006d8:	4b12      	ldr	r3, [pc, #72]	; (8000724 <HAL_InitTick+0x58>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	4619      	mov	r1, r3
 80006de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80006e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80006ea:	4618      	mov	r0, r3
 80006ec:	f000 fd4b 	bl	8001186 <HAL_SYSTICK_Config>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006f6:	2301      	movs	r3, #1
 80006f8:	e00e      	b.n	8000718 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	2b0f      	cmp	r3, #15
 80006fe:	d80a      	bhi.n	8000716 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000700:	2200      	movs	r2, #0
 8000702:	6879      	ldr	r1, [r7, #4]
 8000704:	f04f 30ff 	mov.w	r0, #4294967295
 8000708:	f000 fd13 	bl	8001132 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800070c:	4a06      	ldr	r2, [pc, #24]	; (8000728 <HAL_InitTick+0x5c>)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000712:	2300      	movs	r3, #0
 8000714:	e000      	b.n	8000718 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000716:	2301      	movs	r3, #1
}
 8000718:	4618      	mov	r0, r3
 800071a:	3708      	adds	r7, #8
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	20000000 	.word	0x20000000
 8000724:	20000008 	.word	0x20000008
 8000728:	20000004 	.word	0x20000004

0800072c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000730:	4b05      	ldr	r3, [pc, #20]	; (8000748 <HAL_IncTick+0x1c>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	461a      	mov	r2, r3
 8000736:	4b05      	ldr	r3, [pc, #20]	; (800074c <HAL_IncTick+0x20>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	4413      	add	r3, r2
 800073c:	4a03      	ldr	r2, [pc, #12]	; (800074c <HAL_IncTick+0x20>)
 800073e:	6013      	str	r3, [r2, #0]
}
 8000740:	bf00      	nop
 8000742:	46bd      	mov	sp, r7
 8000744:	bc80      	pop	{r7}
 8000746:	4770      	bx	lr
 8000748:	20000008 	.word	0x20000008
 800074c:	2000055c 	.word	0x2000055c

08000750 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  return uwTick;
 8000754:	4b02      	ldr	r3, [pc, #8]	; (8000760 <HAL_GetTick+0x10>)
 8000756:	681b      	ldr	r3, [r3, #0]
}
 8000758:	4618      	mov	r0, r3
 800075a:	46bd      	mov	sp, r7
 800075c:	bc80      	pop	{r7}
 800075e:	4770      	bx	lr
 8000760:	2000055c 	.word	0x2000055c

08000764 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b086      	sub	sp, #24
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800076c:	2300      	movs	r3, #0
 800076e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000770:	2300      	movs	r3, #0
 8000772:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000774:	2300      	movs	r3, #0
 8000776:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000778:	2300      	movs	r3, #0
 800077a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d101      	bne.n	8000786 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000782:	2301      	movs	r3, #1
 8000784:	e0be      	b.n	8000904 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	689b      	ldr	r3, [r3, #8]
 800078a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000790:	2b00      	cmp	r3, #0
 8000792:	d109      	bne.n	80007a8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	2200      	movs	r2, #0
 8000798:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	2200      	movs	r2, #0
 800079e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80007a2:	6878      	ldr	r0, [r7, #4]
 80007a4:	f7ff feac 	bl	8000500 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80007a8:	6878      	ldr	r0, [r7, #4]
 80007aa:	f000 fbb1 	bl	8000f10 <ADC_ConversionStop_Disable>
 80007ae:	4603      	mov	r3, r0
 80007b0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007b6:	f003 0310 	and.w	r3, r3, #16
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	f040 8099 	bne.w	80008f2 <HAL_ADC_Init+0x18e>
 80007c0:	7dfb      	ldrb	r3, [r7, #23]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	f040 8095 	bne.w	80008f2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007cc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80007d0:	f023 0302 	bic.w	r3, r3, #2
 80007d4:	f043 0202 	orr.w	r2, r3, #2
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80007e4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	7b1b      	ldrb	r3, [r3, #12]
 80007ea:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80007ec:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80007ee:	68ba      	ldr	r2, [r7, #8]
 80007f0:	4313      	orrs	r3, r2
 80007f2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	689b      	ldr	r3, [r3, #8]
 80007f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80007fc:	d003      	beq.n	8000806 <HAL_ADC_Init+0xa2>
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	689b      	ldr	r3, [r3, #8]
 8000802:	2b01      	cmp	r3, #1
 8000804:	d102      	bne.n	800080c <HAL_ADC_Init+0xa8>
 8000806:	f44f 7380 	mov.w	r3, #256	; 0x100
 800080a:	e000      	b.n	800080e <HAL_ADC_Init+0xaa>
 800080c:	2300      	movs	r3, #0
 800080e:	693a      	ldr	r2, [r7, #16]
 8000810:	4313      	orrs	r3, r2
 8000812:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	7d1b      	ldrb	r3, [r3, #20]
 8000818:	2b01      	cmp	r3, #1
 800081a:	d119      	bne.n	8000850 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	7b1b      	ldrb	r3, [r3, #12]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d109      	bne.n	8000838 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	699b      	ldr	r3, [r3, #24]
 8000828:	3b01      	subs	r3, #1
 800082a:	035a      	lsls	r2, r3, #13
 800082c:	693b      	ldr	r3, [r7, #16]
 800082e:	4313      	orrs	r3, r2
 8000830:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000834:	613b      	str	r3, [r7, #16]
 8000836:	e00b      	b.n	8000850 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800083c:	f043 0220 	orr.w	r2, r3, #32
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000848:	f043 0201 	orr.w	r2, r3, #1
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	685b      	ldr	r3, [r3, #4]
 8000856:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	693a      	ldr	r2, [r7, #16]
 8000860:	430a      	orrs	r2, r1
 8000862:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	689a      	ldr	r2, [r3, #8]
 800086a:	4b28      	ldr	r3, [pc, #160]	; (800090c <HAL_ADC_Init+0x1a8>)
 800086c:	4013      	ands	r3, r2
 800086e:	687a      	ldr	r2, [r7, #4]
 8000870:	6812      	ldr	r2, [r2, #0]
 8000872:	68b9      	ldr	r1, [r7, #8]
 8000874:	430b      	orrs	r3, r1
 8000876:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	689b      	ldr	r3, [r3, #8]
 800087c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000880:	d003      	beq.n	800088a <HAL_ADC_Init+0x126>
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	689b      	ldr	r3, [r3, #8]
 8000886:	2b01      	cmp	r3, #1
 8000888:	d104      	bne.n	8000894 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	691b      	ldr	r3, [r3, #16]
 800088e:	3b01      	subs	r3, #1
 8000890:	051b      	lsls	r3, r3, #20
 8000892:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800089a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	68fa      	ldr	r2, [r7, #12]
 80008a4:	430a      	orrs	r2, r1
 80008a6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	689a      	ldr	r2, [r3, #8]
 80008ae:	4b18      	ldr	r3, [pc, #96]	; (8000910 <HAL_ADC_Init+0x1ac>)
 80008b0:	4013      	ands	r3, r2
 80008b2:	68ba      	ldr	r2, [r7, #8]
 80008b4:	429a      	cmp	r2, r3
 80008b6:	d10b      	bne.n	80008d0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	2200      	movs	r2, #0
 80008bc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008c2:	f023 0303 	bic.w	r3, r3, #3
 80008c6:	f043 0201 	orr.w	r2, r3, #1
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80008ce:	e018      	b.n	8000902 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008d4:	f023 0312 	bic.w	r3, r3, #18
 80008d8:	f043 0210 	orr.w	r2, r3, #16
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008e4:	f043 0201 	orr.w	r2, r3, #1
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80008ec:	2301      	movs	r3, #1
 80008ee:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80008f0:	e007      	b.n	8000902 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008f6:	f043 0210 	orr.w	r2, r3, #16
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80008fe:	2301      	movs	r3, #1
 8000900:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000902:	7dfb      	ldrb	r3, [r7, #23]
}
 8000904:	4618      	mov	r0, r3
 8000906:	3718      	adds	r7, #24
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	ffe1f7fd 	.word	0xffe1f7fd
 8000910:	ff1f0efe 	.word	0xff1f0efe

08000914 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b084      	sub	sp, #16
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800091c:	2300      	movs	r3, #0
 800091e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000926:	2b01      	cmp	r3, #1
 8000928:	d101      	bne.n	800092e <HAL_ADC_Start+0x1a>
 800092a:	2302      	movs	r3, #2
 800092c:	e098      	b.n	8000a60 <HAL_ADC_Start+0x14c>
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	2201      	movs	r2, #1
 8000932:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000936:	6878      	ldr	r0, [r7, #4]
 8000938:	f000 fa98 	bl	8000e6c <ADC_Enable>
 800093c:	4603      	mov	r3, r0
 800093e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000940:	7bfb      	ldrb	r3, [r7, #15]
 8000942:	2b00      	cmp	r3, #0
 8000944:	f040 8087 	bne.w	8000a56 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800094c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000950:	f023 0301 	bic.w	r3, r3, #1
 8000954:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a41      	ldr	r2, [pc, #260]	; (8000a68 <HAL_ADC_Start+0x154>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d105      	bne.n	8000972 <HAL_ADC_Start+0x5e>
 8000966:	4b41      	ldr	r3, [pc, #260]	; (8000a6c <HAL_ADC_Start+0x158>)
 8000968:	685b      	ldr	r3, [r3, #4]
 800096a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800096e:	2b00      	cmp	r3, #0
 8000970:	d115      	bne.n	800099e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000976:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	685b      	ldr	r3, [r3, #4]
 8000984:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000988:	2b00      	cmp	r3, #0
 800098a:	d026      	beq.n	80009da <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000990:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000994:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800099c:	e01d      	b.n	80009da <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009a2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4a2f      	ldr	r2, [pc, #188]	; (8000a6c <HAL_ADC_Start+0x158>)
 80009b0:	4293      	cmp	r3, r2
 80009b2:	d004      	beq.n	80009be <HAL_ADC_Start+0xaa>
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a2b      	ldr	r2, [pc, #172]	; (8000a68 <HAL_ADC_Start+0x154>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d10d      	bne.n	80009da <HAL_ADC_Start+0xc6>
 80009be:	4b2b      	ldr	r3, [pc, #172]	; (8000a6c <HAL_ADC_Start+0x158>)
 80009c0:	685b      	ldr	r3, [r3, #4]
 80009c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d007      	beq.n	80009da <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009ce:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80009d2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d006      	beq.n	80009f4 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009ea:	f023 0206 	bic.w	r2, r3, #6
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	62da      	str	r2, [r3, #44]	; 0x2c
 80009f2:	e002      	b.n	80009fa <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	2200      	movs	r2, #0
 80009f8:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	2200      	movs	r2, #0
 80009fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	f06f 0202 	mvn.w	r2, #2
 8000a0a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	689b      	ldr	r3, [r3, #8]
 8000a12:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000a16:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000a1a:	d113      	bne.n	8000a44 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000a20:	4a11      	ldr	r2, [pc, #68]	; (8000a68 <HAL_ADC_Start+0x154>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d105      	bne.n	8000a32 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000a26:	4b11      	ldr	r3, [pc, #68]	; (8000a6c <HAL_ADC_Start+0x158>)
 8000a28:	685b      	ldr	r3, [r3, #4]
 8000a2a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d108      	bne.n	8000a44 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	689a      	ldr	r2, [r3, #8]
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000a40:	609a      	str	r2, [r3, #8]
 8000a42:	e00c      	b.n	8000a5e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	689a      	ldr	r2, [r3, #8]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	e003      	b.n	8000a5e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	2200      	movs	r2, #0
 8000a5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000a5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	3710      	adds	r7, #16
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	40012800 	.word	0x40012800
 8000a6c:	40012400 	.word	0x40012400

08000a70 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000a70:	b590      	push	{r4, r7, lr}
 8000a72:	b087      	sub	sp, #28
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000a82:	2300      	movs	r3, #0
 8000a84:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000a86:	f7ff fe63 	bl	8000750 <HAL_GetTick>
 8000a8a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	689b      	ldr	r3, [r3, #8]
 8000a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d00b      	beq.n	8000ab2 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a9e:	f043 0220 	orr.w	r2, r3, #32
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	e0c8      	b.n	8000c44 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d12a      	bne.n	8000b16 <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ac6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d123      	bne.n	8000b16 <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000ace:	e01a      	b.n	8000b06 <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ad6:	d016      	beq.n	8000b06 <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d007      	beq.n	8000aee <HAL_ADC_PollForConversion+0x7e>
 8000ade:	f7ff fe37 	bl	8000750 <HAL_GetTick>
 8000ae2:	4602      	mov	r2, r0
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	1ad3      	subs	r3, r2, r3
 8000ae8:	683a      	ldr	r2, [r7, #0]
 8000aea:	429a      	cmp	r2, r3
 8000aec:	d20b      	bcs.n	8000b06 <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000af2:	f043 0204 	orr.w	r2, r3, #4
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	2200      	movs	r2, #0
 8000afe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8000b02:	2303      	movs	r3, #3
 8000b04:	e09e      	b.n	8000c44 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f003 0302 	and.w	r3, r3, #2
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d0dd      	beq.n	8000ad0 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000b14:	e06c      	b.n	8000bf0 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000b16:	4b4d      	ldr	r3, [pc, #308]	; (8000c4c <HAL_ADC_PollForConversion+0x1dc>)
 8000b18:	681c      	ldr	r4, [r3, #0]
 8000b1a:	2002      	movs	r0, #2
 8000b1c:	f002 fcf4 	bl	8003508 <HAL_RCCEx_GetPeriphCLKFreq>
 8000b20:	4603      	mov	r3, r0
 8000b22:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	6919      	ldr	r1, [r3, #16]
 8000b2c:	4b48      	ldr	r3, [pc, #288]	; (8000c50 <HAL_ADC_PollForConversion+0x1e0>)
 8000b2e:	400b      	ands	r3, r1
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d118      	bne.n	8000b66 <HAL_ADC_PollForConversion+0xf6>
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	68d9      	ldr	r1, [r3, #12]
 8000b3a:	4b46      	ldr	r3, [pc, #280]	; (8000c54 <HAL_ADC_PollForConversion+0x1e4>)
 8000b3c:	400b      	ands	r3, r1
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d111      	bne.n	8000b66 <HAL_ADC_PollForConversion+0xf6>
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	6919      	ldr	r1, [r3, #16]
 8000b48:	4b43      	ldr	r3, [pc, #268]	; (8000c58 <HAL_ADC_PollForConversion+0x1e8>)
 8000b4a:	400b      	ands	r3, r1
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d108      	bne.n	8000b62 <HAL_ADC_PollForConversion+0xf2>
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	68d9      	ldr	r1, [r3, #12]
 8000b56:	4b41      	ldr	r3, [pc, #260]	; (8000c5c <HAL_ADC_PollForConversion+0x1ec>)
 8000b58:	400b      	ands	r3, r1
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d101      	bne.n	8000b62 <HAL_ADC_PollForConversion+0xf2>
 8000b5e:	2314      	movs	r3, #20
 8000b60:	e020      	b.n	8000ba4 <HAL_ADC_PollForConversion+0x134>
 8000b62:	2329      	movs	r3, #41	; 0x29
 8000b64:	e01e      	b.n	8000ba4 <HAL_ADC_PollForConversion+0x134>
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	6919      	ldr	r1, [r3, #16]
 8000b6c:	4b3a      	ldr	r3, [pc, #232]	; (8000c58 <HAL_ADC_PollForConversion+0x1e8>)
 8000b6e:	400b      	ands	r3, r1
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d106      	bne.n	8000b82 <HAL_ADC_PollForConversion+0x112>
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	68d9      	ldr	r1, [r3, #12]
 8000b7a:	4b38      	ldr	r3, [pc, #224]	; (8000c5c <HAL_ADC_PollForConversion+0x1ec>)
 8000b7c:	400b      	ands	r3, r1
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d00d      	beq.n	8000b9e <HAL_ADC_PollForConversion+0x12e>
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	6919      	ldr	r1, [r3, #16]
 8000b88:	4b35      	ldr	r3, [pc, #212]	; (8000c60 <HAL_ADC_PollForConversion+0x1f0>)
 8000b8a:	400b      	ands	r3, r1
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d108      	bne.n	8000ba2 <HAL_ADC_PollForConversion+0x132>
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	68d9      	ldr	r1, [r3, #12]
 8000b96:	4b32      	ldr	r3, [pc, #200]	; (8000c60 <HAL_ADC_PollForConversion+0x1f0>)
 8000b98:	400b      	ands	r3, r1
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d101      	bne.n	8000ba2 <HAL_ADC_PollForConversion+0x132>
 8000b9e:	2354      	movs	r3, #84	; 0x54
 8000ba0:	e000      	b.n	8000ba4 <HAL_ADC_PollForConversion+0x134>
 8000ba2:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000ba4:	fb02 f303 	mul.w	r3, r2, r3
 8000ba8:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000baa:	e01d      	b.n	8000be8 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bb2:	d016      	beq.n	8000be2 <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d007      	beq.n	8000bca <HAL_ADC_PollForConversion+0x15a>
 8000bba:	f7ff fdc9 	bl	8000750 <HAL_GetTick>
 8000bbe:	4602      	mov	r2, r0
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	1ad3      	subs	r3, r2, r3
 8000bc4:	683a      	ldr	r2, [r7, #0]
 8000bc6:	429a      	cmp	r2, r3
 8000bc8:	d20b      	bcs.n	8000be2 <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bce:	f043 0204 	orr.w	r2, r3, #4
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	2200      	movs	r2, #0
 8000bda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8000bde:	2303      	movs	r3, #3
 8000be0:	e030      	b.n	8000c44 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	3301      	adds	r3, #1
 8000be6:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	693a      	ldr	r2, [r7, #16]
 8000bec:	429a      	cmp	r2, r3
 8000bee:	d8dd      	bhi.n	8000bac <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f06f 0212 	mvn.w	r2, #18
 8000bf8:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bfe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	689b      	ldr	r3, [r3, #8]
 8000c0c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000c10:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000c14:	d115      	bne.n	8000c42 <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d111      	bne.n	8000c42 <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c22:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d105      	bne.n	8000c42 <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c3a:	f043 0201 	orr.w	r2, r3, #1
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000c42:	2300      	movs	r3, #0
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	371c      	adds	r7, #28
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd90      	pop	{r4, r7, pc}
 8000c4c:	20000000 	.word	0x20000000
 8000c50:	24924924 	.word	0x24924924
 8000c54:	00924924 	.word	0x00924924
 8000c58:	12492492 	.word	0x12492492
 8000c5c:	00492492 	.word	0x00492492
 8000c60:	00249249 	.word	0x00249249

08000c64 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	370c      	adds	r7, #12
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bc80      	pop	{r7}
 8000c7a:	4770      	bx	lr

08000c7c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000c7c:	b480      	push	{r7}
 8000c7e:	b085      	sub	sp, #20
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
 8000c84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c86:	2300      	movs	r3, #0
 8000c88:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000c94:	2b01      	cmp	r3, #1
 8000c96:	d101      	bne.n	8000c9c <HAL_ADC_ConfigChannel+0x20>
 8000c98:	2302      	movs	r3, #2
 8000c9a:	e0dc      	b.n	8000e56 <HAL_ADC_ConfigChannel+0x1da>
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	2b06      	cmp	r3, #6
 8000caa:	d81c      	bhi.n	8000ce6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	685a      	ldr	r2, [r3, #4]
 8000cb6:	4613      	mov	r3, r2
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	4413      	add	r3, r2
 8000cbc:	3b05      	subs	r3, #5
 8000cbe:	221f      	movs	r2, #31
 8000cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc4:	43db      	mvns	r3, r3
 8000cc6:	4019      	ands	r1, r3
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	6818      	ldr	r0, [r3, #0]
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	685a      	ldr	r2, [r3, #4]
 8000cd0:	4613      	mov	r3, r2
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	4413      	add	r3, r2
 8000cd6:	3b05      	subs	r3, #5
 8000cd8:	fa00 f203 	lsl.w	r2, r0, r3
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	430a      	orrs	r2, r1
 8000ce2:	635a      	str	r2, [r3, #52]	; 0x34
 8000ce4:	e03c      	b.n	8000d60 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	2b0c      	cmp	r3, #12
 8000cec:	d81c      	bhi.n	8000d28 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	685a      	ldr	r2, [r3, #4]
 8000cf8:	4613      	mov	r3, r2
 8000cfa:	009b      	lsls	r3, r3, #2
 8000cfc:	4413      	add	r3, r2
 8000cfe:	3b23      	subs	r3, #35	; 0x23
 8000d00:	221f      	movs	r2, #31
 8000d02:	fa02 f303 	lsl.w	r3, r2, r3
 8000d06:	43db      	mvns	r3, r3
 8000d08:	4019      	ands	r1, r3
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	6818      	ldr	r0, [r3, #0]
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	685a      	ldr	r2, [r3, #4]
 8000d12:	4613      	mov	r3, r2
 8000d14:	009b      	lsls	r3, r3, #2
 8000d16:	4413      	add	r3, r2
 8000d18:	3b23      	subs	r3, #35	; 0x23
 8000d1a:	fa00 f203 	lsl.w	r2, r0, r3
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	430a      	orrs	r2, r1
 8000d24:	631a      	str	r2, [r3, #48]	; 0x30
 8000d26:	e01b      	b.n	8000d60 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	685a      	ldr	r2, [r3, #4]
 8000d32:	4613      	mov	r3, r2
 8000d34:	009b      	lsls	r3, r3, #2
 8000d36:	4413      	add	r3, r2
 8000d38:	3b41      	subs	r3, #65	; 0x41
 8000d3a:	221f      	movs	r2, #31
 8000d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d40:	43db      	mvns	r3, r3
 8000d42:	4019      	ands	r1, r3
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	6818      	ldr	r0, [r3, #0]
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	685a      	ldr	r2, [r3, #4]
 8000d4c:	4613      	mov	r3, r2
 8000d4e:	009b      	lsls	r3, r3, #2
 8000d50:	4413      	add	r3, r2
 8000d52:	3b41      	subs	r3, #65	; 0x41
 8000d54:	fa00 f203 	lsl.w	r2, r0, r3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	430a      	orrs	r2, r1
 8000d5e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	2b09      	cmp	r3, #9
 8000d66:	d91c      	bls.n	8000da2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	68d9      	ldr	r1, [r3, #12]
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	4613      	mov	r3, r2
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	4413      	add	r3, r2
 8000d78:	3b1e      	subs	r3, #30
 8000d7a:	2207      	movs	r2, #7
 8000d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d80:	43db      	mvns	r3, r3
 8000d82:	4019      	ands	r1, r3
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	6898      	ldr	r0, [r3, #8]
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	4613      	mov	r3, r2
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	4413      	add	r3, r2
 8000d92:	3b1e      	subs	r3, #30
 8000d94:	fa00 f203 	lsl.w	r2, r0, r3
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	430a      	orrs	r2, r1
 8000d9e:	60da      	str	r2, [r3, #12]
 8000da0:	e019      	b.n	8000dd6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	6919      	ldr	r1, [r3, #16]
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	4613      	mov	r3, r2
 8000dae:	005b      	lsls	r3, r3, #1
 8000db0:	4413      	add	r3, r2
 8000db2:	2207      	movs	r2, #7
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	43db      	mvns	r3, r3
 8000dba:	4019      	ands	r1, r3
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	6898      	ldr	r0, [r3, #8]
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	4613      	mov	r3, r2
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	4413      	add	r3, r2
 8000dca:	fa00 f203 	lsl.w	r2, r0, r3
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	430a      	orrs	r2, r1
 8000dd4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	2b10      	cmp	r3, #16
 8000ddc:	d003      	beq.n	8000de6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000de2:	2b11      	cmp	r3, #17
 8000de4:	d132      	bne.n	8000e4c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a1d      	ldr	r2, [pc, #116]	; (8000e60 <HAL_ADC_ConfigChannel+0x1e4>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d125      	bne.n	8000e3c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	689b      	ldr	r3, [r3, #8]
 8000df6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d126      	bne.n	8000e4c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	689a      	ldr	r2, [r3, #8]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000e0c:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	2b10      	cmp	r3, #16
 8000e14:	d11a      	bne.n	8000e4c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000e16:	4b13      	ldr	r3, [pc, #76]	; (8000e64 <HAL_ADC_ConfigChannel+0x1e8>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4a13      	ldr	r2, [pc, #76]	; (8000e68 <HAL_ADC_ConfigChannel+0x1ec>)
 8000e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8000e20:	0c9a      	lsrs	r2, r3, #18
 8000e22:	4613      	mov	r3, r2
 8000e24:	009b      	lsls	r3, r3, #2
 8000e26:	4413      	add	r3, r2
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e2c:	e002      	b.n	8000e34 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000e2e:	68bb      	ldr	r3, [r7, #8]
 8000e30:	3b01      	subs	r3, #1
 8000e32:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d1f9      	bne.n	8000e2e <HAL_ADC_ConfigChannel+0x1b2>
 8000e3a:	e007      	b.n	8000e4c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e40:	f043 0220 	orr.w	r2, r3, #32
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2200      	movs	r2, #0
 8000e50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3714      	adds	r7, #20
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bc80      	pop	{r7}
 8000e5e:	4770      	bx	lr
 8000e60:	40012400 	.word	0x40012400
 8000e64:	20000000 	.word	0x20000000
 8000e68:	431bde83 	.word	0x431bde83

08000e6c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000e74:	2300      	movs	r3, #0
 8000e76:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	689b      	ldr	r3, [r3, #8]
 8000e82:	f003 0301 	and.w	r3, r3, #1
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d039      	beq.n	8000efe <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	689a      	ldr	r2, [r3, #8]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f042 0201 	orr.w	r2, r2, #1
 8000e98:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000e9a:	4b1b      	ldr	r3, [pc, #108]	; (8000f08 <ADC_Enable+0x9c>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a1b      	ldr	r2, [pc, #108]	; (8000f0c <ADC_Enable+0xa0>)
 8000ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ea4:	0c9b      	lsrs	r3, r3, #18
 8000ea6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000ea8:	e002      	b.n	8000eb0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000eaa:	68bb      	ldr	r3, [r7, #8]
 8000eac:	3b01      	subs	r3, #1
 8000eae:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d1f9      	bne.n	8000eaa <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000eb6:	f7ff fc4b 	bl	8000750 <HAL_GetTick>
 8000eba:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000ebc:	e018      	b.n	8000ef0 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000ebe:	f7ff fc47 	bl	8000750 <HAL_GetTick>
 8000ec2:	4602      	mov	r2, r0
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	1ad3      	subs	r3, r2, r3
 8000ec8:	2b02      	cmp	r3, #2
 8000eca:	d911      	bls.n	8000ef0 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ed0:	f043 0210 	orr.w	r2, r3, #16
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000edc:	f043 0201 	orr.w	r2, r3, #1
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8000eec:	2301      	movs	r3, #1
 8000eee:	e007      	b.n	8000f00 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	689b      	ldr	r3, [r3, #8]
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d1df      	bne.n	8000ebe <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000efe:	2300      	movs	r3, #0
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3710      	adds	r7, #16
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	20000000 	.word	0x20000000
 8000f0c:	431bde83 	.word	0x431bde83

08000f10 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	689b      	ldr	r3, [r3, #8]
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d127      	bne.n	8000f7a <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	689a      	ldr	r2, [r3, #8]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f022 0201 	bic.w	r2, r2, #1
 8000f38:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000f3a:	f7ff fc09 	bl	8000750 <HAL_GetTick>
 8000f3e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000f40:	e014      	b.n	8000f6c <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000f42:	f7ff fc05 	bl	8000750 <HAL_GetTick>
 8000f46:	4602      	mov	r2, r0
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	1ad3      	subs	r3, r2, r3
 8000f4c:	2b02      	cmp	r3, #2
 8000f4e:	d90d      	bls.n	8000f6c <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f54:	f043 0210 	orr.w	r2, r3, #16
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f60:	f043 0201 	orr.w	r2, r3, #1
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	e007      	b.n	8000f7c <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	f003 0301 	and.w	r3, r3, #1
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d0e3      	beq.n	8000f42 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000f7a:	2300      	movs	r3, #0
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3710      	adds	r7, #16
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	f003 0307 	and.w	r3, r3, #7
 8000f92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f94:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f9a:	68ba      	ldr	r2, [r7, #8]
 8000f9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fb6:	4a04      	ldr	r2, [pc, #16]	; (8000fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	60d3      	str	r3, [r2, #12]
}
 8000fbc:	bf00      	nop
 8000fbe:	3714      	adds	r7, #20
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bc80      	pop	{r7}
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fd0:	4b04      	ldr	r3, [pc, #16]	; (8000fe4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	0a1b      	lsrs	r3, r3, #8
 8000fd6:	f003 0307 	and.w	r3, r3, #7
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bc80      	pop	{r7}
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	db0b      	blt.n	8001012 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ffa:	79fb      	ldrb	r3, [r7, #7]
 8000ffc:	f003 021f 	and.w	r2, r3, #31
 8001000:	4906      	ldr	r1, [pc, #24]	; (800101c <__NVIC_EnableIRQ+0x34>)
 8001002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001006:	095b      	lsrs	r3, r3, #5
 8001008:	2001      	movs	r0, #1
 800100a:	fa00 f202 	lsl.w	r2, r0, r2
 800100e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001012:	bf00      	nop
 8001014:	370c      	adds	r7, #12
 8001016:	46bd      	mov	sp, r7
 8001018:	bc80      	pop	{r7}
 800101a:	4770      	bx	lr
 800101c:	e000e100 	.word	0xe000e100

08001020 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	6039      	str	r1, [r7, #0]
 800102a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800102c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001030:	2b00      	cmp	r3, #0
 8001032:	db0a      	blt.n	800104a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	b2da      	uxtb	r2, r3
 8001038:	490c      	ldr	r1, [pc, #48]	; (800106c <__NVIC_SetPriority+0x4c>)
 800103a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103e:	0112      	lsls	r2, r2, #4
 8001040:	b2d2      	uxtb	r2, r2
 8001042:	440b      	add	r3, r1
 8001044:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001048:	e00a      	b.n	8001060 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	b2da      	uxtb	r2, r3
 800104e:	4908      	ldr	r1, [pc, #32]	; (8001070 <__NVIC_SetPriority+0x50>)
 8001050:	79fb      	ldrb	r3, [r7, #7]
 8001052:	f003 030f 	and.w	r3, r3, #15
 8001056:	3b04      	subs	r3, #4
 8001058:	0112      	lsls	r2, r2, #4
 800105a:	b2d2      	uxtb	r2, r2
 800105c:	440b      	add	r3, r1
 800105e:	761a      	strb	r2, [r3, #24]
}
 8001060:	bf00      	nop
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	bc80      	pop	{r7}
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	e000e100 	.word	0xe000e100
 8001070:	e000ed00 	.word	0xe000ed00

08001074 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001074:	b480      	push	{r7}
 8001076:	b089      	sub	sp, #36	; 0x24
 8001078:	af00      	add	r7, sp, #0
 800107a:	60f8      	str	r0, [r7, #12]
 800107c:	60b9      	str	r1, [r7, #8]
 800107e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	f003 0307 	and.w	r3, r3, #7
 8001086:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	f1c3 0307 	rsb	r3, r3, #7
 800108e:	2b04      	cmp	r3, #4
 8001090:	bf28      	it	cs
 8001092:	2304      	movcs	r3, #4
 8001094:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	3304      	adds	r3, #4
 800109a:	2b06      	cmp	r3, #6
 800109c:	d902      	bls.n	80010a4 <NVIC_EncodePriority+0x30>
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	3b03      	subs	r3, #3
 80010a2:	e000      	b.n	80010a6 <NVIC_EncodePriority+0x32>
 80010a4:	2300      	movs	r3, #0
 80010a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a8:	f04f 32ff 	mov.w	r2, #4294967295
 80010ac:	69bb      	ldr	r3, [r7, #24]
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	43da      	mvns	r2, r3
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	401a      	ands	r2, r3
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010bc:	f04f 31ff 	mov.w	r1, #4294967295
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	fa01 f303 	lsl.w	r3, r1, r3
 80010c6:	43d9      	mvns	r1, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010cc:	4313      	orrs	r3, r2
         );
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3724      	adds	r7, #36	; 0x24
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bc80      	pop	{r7}
 80010d6:	4770      	bx	lr

080010d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	3b01      	subs	r3, #1
 80010e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010e8:	d301      	bcc.n	80010ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ea:	2301      	movs	r3, #1
 80010ec:	e00f      	b.n	800110e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ee:	4a0a      	ldr	r2, [pc, #40]	; (8001118 <SysTick_Config+0x40>)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	3b01      	subs	r3, #1
 80010f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010f6:	210f      	movs	r1, #15
 80010f8:	f04f 30ff 	mov.w	r0, #4294967295
 80010fc:	f7ff ff90 	bl	8001020 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001100:	4b05      	ldr	r3, [pc, #20]	; (8001118 <SysTick_Config+0x40>)
 8001102:	2200      	movs	r2, #0
 8001104:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001106:	4b04      	ldr	r3, [pc, #16]	; (8001118 <SysTick_Config+0x40>)
 8001108:	2207      	movs	r2, #7
 800110a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800110c:	2300      	movs	r3, #0
}
 800110e:	4618      	mov	r0, r3
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	e000e010 	.word	0xe000e010

0800111c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f7ff ff2d 	bl	8000f84 <__NVIC_SetPriorityGrouping>
}
 800112a:	bf00      	nop
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001132:	b580      	push	{r7, lr}
 8001134:	b086      	sub	sp, #24
 8001136:	af00      	add	r7, sp, #0
 8001138:	4603      	mov	r3, r0
 800113a:	60b9      	str	r1, [r7, #8]
 800113c:	607a      	str	r2, [r7, #4]
 800113e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001140:	2300      	movs	r3, #0
 8001142:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001144:	f7ff ff42 	bl	8000fcc <__NVIC_GetPriorityGrouping>
 8001148:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	68b9      	ldr	r1, [r7, #8]
 800114e:	6978      	ldr	r0, [r7, #20]
 8001150:	f7ff ff90 	bl	8001074 <NVIC_EncodePriority>
 8001154:	4602      	mov	r2, r0
 8001156:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800115a:	4611      	mov	r1, r2
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff ff5f 	bl	8001020 <__NVIC_SetPriority>
}
 8001162:	bf00      	nop
 8001164:	3718      	adds	r7, #24
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800116a:	b580      	push	{r7, lr}
 800116c:	b082      	sub	sp, #8
 800116e:	af00      	add	r7, sp, #0
 8001170:	4603      	mov	r3, r0
 8001172:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001174:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff ff35 	bl	8000fe8 <__NVIC_EnableIRQ>
}
 800117e:	bf00      	nop
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001186:	b580      	push	{r7, lr}
 8001188:	b082      	sub	sp, #8
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800118e:	6878      	ldr	r0, [r7, #4]
 8001190:	f7ff ffa2 	bl	80010d8 <SysTick_Config>
 8001194:	4603      	mov	r3, r0
}
 8001196:	4618      	mov	r0, r3
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
	...

080011a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b08b      	sub	sp, #44	; 0x2c
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011aa:	2300      	movs	r3, #0
 80011ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80011ae:	2300      	movs	r3, #0
 80011b0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011b2:	e127      	b.n	8001404 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80011b4:	2201      	movs	r2, #1
 80011b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	69fa      	ldr	r2, [r7, #28]
 80011c4:	4013      	ands	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	f040 8116 	bne.w	80013fe <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	2b12      	cmp	r3, #18
 80011d8:	d034      	beq.n	8001244 <HAL_GPIO_Init+0xa4>
 80011da:	2b12      	cmp	r3, #18
 80011dc:	d80d      	bhi.n	80011fa <HAL_GPIO_Init+0x5a>
 80011de:	2b02      	cmp	r3, #2
 80011e0:	d02b      	beq.n	800123a <HAL_GPIO_Init+0x9a>
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	d804      	bhi.n	80011f0 <HAL_GPIO_Init+0x50>
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d031      	beq.n	800124e <HAL_GPIO_Init+0xae>
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d01c      	beq.n	8001228 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80011ee:	e048      	b.n	8001282 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80011f0:	2b03      	cmp	r3, #3
 80011f2:	d043      	beq.n	800127c <HAL_GPIO_Init+0xdc>
 80011f4:	2b11      	cmp	r3, #17
 80011f6:	d01b      	beq.n	8001230 <HAL_GPIO_Init+0x90>
          break;
 80011f8:	e043      	b.n	8001282 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80011fa:	4a89      	ldr	r2, [pc, #548]	; (8001420 <HAL_GPIO_Init+0x280>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d026      	beq.n	800124e <HAL_GPIO_Init+0xae>
 8001200:	4a87      	ldr	r2, [pc, #540]	; (8001420 <HAL_GPIO_Init+0x280>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d806      	bhi.n	8001214 <HAL_GPIO_Init+0x74>
 8001206:	4a87      	ldr	r2, [pc, #540]	; (8001424 <HAL_GPIO_Init+0x284>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d020      	beq.n	800124e <HAL_GPIO_Init+0xae>
 800120c:	4a86      	ldr	r2, [pc, #536]	; (8001428 <HAL_GPIO_Init+0x288>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d01d      	beq.n	800124e <HAL_GPIO_Init+0xae>
          break;
 8001212:	e036      	b.n	8001282 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001214:	4a85      	ldr	r2, [pc, #532]	; (800142c <HAL_GPIO_Init+0x28c>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d019      	beq.n	800124e <HAL_GPIO_Init+0xae>
 800121a:	4a85      	ldr	r2, [pc, #532]	; (8001430 <HAL_GPIO_Init+0x290>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d016      	beq.n	800124e <HAL_GPIO_Init+0xae>
 8001220:	4a84      	ldr	r2, [pc, #528]	; (8001434 <HAL_GPIO_Init+0x294>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d013      	beq.n	800124e <HAL_GPIO_Init+0xae>
          break;
 8001226:	e02c      	b.n	8001282 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	623b      	str	r3, [r7, #32]
          break;
 800122e:	e028      	b.n	8001282 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	3304      	adds	r3, #4
 8001236:	623b      	str	r3, [r7, #32]
          break;
 8001238:	e023      	b.n	8001282 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	68db      	ldr	r3, [r3, #12]
 800123e:	3308      	adds	r3, #8
 8001240:	623b      	str	r3, [r7, #32]
          break;
 8001242:	e01e      	b.n	8001282 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	330c      	adds	r3, #12
 800124a:	623b      	str	r3, [r7, #32]
          break;
 800124c:	e019      	b.n	8001282 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d102      	bne.n	800125c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001256:	2304      	movs	r3, #4
 8001258:	623b      	str	r3, [r7, #32]
          break;
 800125a:	e012      	b.n	8001282 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	2b01      	cmp	r3, #1
 8001262:	d105      	bne.n	8001270 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001264:	2308      	movs	r3, #8
 8001266:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	69fa      	ldr	r2, [r7, #28]
 800126c:	611a      	str	r2, [r3, #16]
          break;
 800126e:	e008      	b.n	8001282 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001270:	2308      	movs	r3, #8
 8001272:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	69fa      	ldr	r2, [r7, #28]
 8001278:	615a      	str	r2, [r3, #20]
          break;
 800127a:	e002      	b.n	8001282 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800127c:	2300      	movs	r3, #0
 800127e:	623b      	str	r3, [r7, #32]
          break;
 8001280:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001282:	69bb      	ldr	r3, [r7, #24]
 8001284:	2bff      	cmp	r3, #255	; 0xff
 8001286:	d801      	bhi.n	800128c <HAL_GPIO_Init+0xec>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	e001      	b.n	8001290 <HAL_GPIO_Init+0xf0>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	3304      	adds	r3, #4
 8001290:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	2bff      	cmp	r3, #255	; 0xff
 8001296:	d802      	bhi.n	800129e <HAL_GPIO_Init+0xfe>
 8001298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	e002      	b.n	80012a4 <HAL_GPIO_Init+0x104>
 800129e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a0:	3b08      	subs	r3, #8
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	210f      	movs	r1, #15
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	fa01 f303 	lsl.w	r3, r1, r3
 80012b2:	43db      	mvns	r3, r3
 80012b4:	401a      	ands	r2, r3
 80012b6:	6a39      	ldr	r1, [r7, #32]
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	fa01 f303 	lsl.w	r3, r1, r3
 80012be:	431a      	orrs	r2, r3
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	f000 8096 	beq.w	80013fe <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80012d2:	4b59      	ldr	r3, [pc, #356]	; (8001438 <HAL_GPIO_Init+0x298>)
 80012d4:	699b      	ldr	r3, [r3, #24]
 80012d6:	4a58      	ldr	r2, [pc, #352]	; (8001438 <HAL_GPIO_Init+0x298>)
 80012d8:	f043 0301 	orr.w	r3, r3, #1
 80012dc:	6193      	str	r3, [r2, #24]
 80012de:	4b56      	ldr	r3, [pc, #344]	; (8001438 <HAL_GPIO_Init+0x298>)
 80012e0:	699b      	ldr	r3, [r3, #24]
 80012e2:	f003 0301 	and.w	r3, r3, #1
 80012e6:	60bb      	str	r3, [r7, #8]
 80012e8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80012ea:	4a54      	ldr	r2, [pc, #336]	; (800143c <HAL_GPIO_Init+0x29c>)
 80012ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ee:	089b      	lsrs	r3, r3, #2
 80012f0:	3302      	adds	r3, #2
 80012f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012f6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80012f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fa:	f003 0303 	and.w	r3, r3, #3
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	220f      	movs	r2, #15
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	43db      	mvns	r3, r3
 8001308:	68fa      	ldr	r2, [r7, #12]
 800130a:	4013      	ands	r3, r2
 800130c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a4b      	ldr	r2, [pc, #300]	; (8001440 <HAL_GPIO_Init+0x2a0>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d013      	beq.n	800133e <HAL_GPIO_Init+0x19e>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a4a      	ldr	r2, [pc, #296]	; (8001444 <HAL_GPIO_Init+0x2a4>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d00d      	beq.n	800133a <HAL_GPIO_Init+0x19a>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a49      	ldr	r2, [pc, #292]	; (8001448 <HAL_GPIO_Init+0x2a8>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d007      	beq.n	8001336 <HAL_GPIO_Init+0x196>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a48      	ldr	r2, [pc, #288]	; (800144c <HAL_GPIO_Init+0x2ac>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d101      	bne.n	8001332 <HAL_GPIO_Init+0x192>
 800132e:	2303      	movs	r3, #3
 8001330:	e006      	b.n	8001340 <HAL_GPIO_Init+0x1a0>
 8001332:	2304      	movs	r3, #4
 8001334:	e004      	b.n	8001340 <HAL_GPIO_Init+0x1a0>
 8001336:	2302      	movs	r3, #2
 8001338:	e002      	b.n	8001340 <HAL_GPIO_Init+0x1a0>
 800133a:	2301      	movs	r3, #1
 800133c:	e000      	b.n	8001340 <HAL_GPIO_Init+0x1a0>
 800133e:	2300      	movs	r3, #0
 8001340:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001342:	f002 0203 	and.w	r2, r2, #3
 8001346:	0092      	lsls	r2, r2, #2
 8001348:	4093      	lsls	r3, r2
 800134a:	68fa      	ldr	r2, [r7, #12]
 800134c:	4313      	orrs	r3, r2
 800134e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001350:	493a      	ldr	r1, [pc, #232]	; (800143c <HAL_GPIO_Init+0x29c>)
 8001352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001354:	089b      	lsrs	r3, r3, #2
 8001356:	3302      	adds	r3, #2
 8001358:	68fa      	ldr	r2, [r7, #12]
 800135a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d006      	beq.n	8001378 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800136a:	4b39      	ldr	r3, [pc, #228]	; (8001450 <HAL_GPIO_Init+0x2b0>)
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	4938      	ldr	r1, [pc, #224]	; (8001450 <HAL_GPIO_Init+0x2b0>)
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	4313      	orrs	r3, r2
 8001374:	600b      	str	r3, [r1, #0]
 8001376:	e006      	b.n	8001386 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001378:	4b35      	ldr	r3, [pc, #212]	; (8001450 <HAL_GPIO_Init+0x2b0>)
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	43db      	mvns	r3, r3
 8001380:	4933      	ldr	r1, [pc, #204]	; (8001450 <HAL_GPIO_Init+0x2b0>)
 8001382:	4013      	ands	r3, r2
 8001384:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d006      	beq.n	80013a0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001392:	4b2f      	ldr	r3, [pc, #188]	; (8001450 <HAL_GPIO_Init+0x2b0>)
 8001394:	685a      	ldr	r2, [r3, #4]
 8001396:	492e      	ldr	r1, [pc, #184]	; (8001450 <HAL_GPIO_Init+0x2b0>)
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	4313      	orrs	r3, r2
 800139c:	604b      	str	r3, [r1, #4]
 800139e:	e006      	b.n	80013ae <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80013a0:	4b2b      	ldr	r3, [pc, #172]	; (8001450 <HAL_GPIO_Init+0x2b0>)
 80013a2:	685a      	ldr	r2, [r3, #4]
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	43db      	mvns	r3, r3
 80013a8:	4929      	ldr	r1, [pc, #164]	; (8001450 <HAL_GPIO_Init+0x2b0>)
 80013aa:	4013      	ands	r3, r2
 80013ac:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d006      	beq.n	80013c8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80013ba:	4b25      	ldr	r3, [pc, #148]	; (8001450 <HAL_GPIO_Init+0x2b0>)
 80013bc:	689a      	ldr	r2, [r3, #8]
 80013be:	4924      	ldr	r1, [pc, #144]	; (8001450 <HAL_GPIO_Init+0x2b0>)
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	608b      	str	r3, [r1, #8]
 80013c6:	e006      	b.n	80013d6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80013c8:	4b21      	ldr	r3, [pc, #132]	; (8001450 <HAL_GPIO_Init+0x2b0>)
 80013ca:	689a      	ldr	r2, [r3, #8]
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	43db      	mvns	r3, r3
 80013d0:	491f      	ldr	r1, [pc, #124]	; (8001450 <HAL_GPIO_Init+0x2b0>)
 80013d2:	4013      	ands	r3, r2
 80013d4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d006      	beq.n	80013f0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80013e2:	4b1b      	ldr	r3, [pc, #108]	; (8001450 <HAL_GPIO_Init+0x2b0>)
 80013e4:	68da      	ldr	r2, [r3, #12]
 80013e6:	491a      	ldr	r1, [pc, #104]	; (8001450 <HAL_GPIO_Init+0x2b0>)
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	60cb      	str	r3, [r1, #12]
 80013ee:	e006      	b.n	80013fe <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80013f0:	4b17      	ldr	r3, [pc, #92]	; (8001450 <HAL_GPIO_Init+0x2b0>)
 80013f2:	68da      	ldr	r2, [r3, #12]
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	43db      	mvns	r3, r3
 80013f8:	4915      	ldr	r1, [pc, #84]	; (8001450 <HAL_GPIO_Init+0x2b0>)
 80013fa:	4013      	ands	r3, r2
 80013fc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80013fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001400:	3301      	adds	r3, #1
 8001402:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140a:	fa22 f303 	lsr.w	r3, r2, r3
 800140e:	2b00      	cmp	r3, #0
 8001410:	f47f aed0 	bne.w	80011b4 <HAL_GPIO_Init+0x14>
  }
}
 8001414:	bf00      	nop
 8001416:	372c      	adds	r7, #44	; 0x2c
 8001418:	46bd      	mov	sp, r7
 800141a:	bc80      	pop	{r7}
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	10210000 	.word	0x10210000
 8001424:	10110000 	.word	0x10110000
 8001428:	10120000 	.word	0x10120000
 800142c:	10310000 	.word	0x10310000
 8001430:	10320000 	.word	0x10320000
 8001434:	10220000 	.word	0x10220000
 8001438:	40021000 	.word	0x40021000
 800143c:	40010000 	.word	0x40010000
 8001440:	40010800 	.word	0x40010800
 8001444:	40010c00 	.word	0x40010c00
 8001448:	40011000 	.word	0x40011000
 800144c:	40011400 	.word	0x40011400
 8001450:	40010400 	.word	0x40010400

08001454 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	460b      	mov	r3, r1
 800145e:	807b      	strh	r3, [r7, #2]
 8001460:	4613      	mov	r3, r2
 8001462:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001464:	787b      	ldrb	r3, [r7, #1]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d003      	beq.n	8001472 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800146a:	887a      	ldrh	r2, [r7, #2]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001470:	e003      	b.n	800147a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001472:	887b      	ldrh	r3, [r7, #2]
 8001474:	041a      	lsls	r2, r3, #16
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	611a      	str	r2, [r3, #16]
}
 800147a:	bf00      	nop
 800147c:	370c      	adds	r7, #12
 800147e:	46bd      	mov	sp, r7
 8001480:	bc80      	pop	{r7}
 8001482:	4770      	bx	lr

08001484 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001486:	b08b      	sub	sp, #44	; 0x2c
 8001488:	af06      	add	r7, sp, #24
 800148a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d101      	bne.n	8001496 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e0fd      	b.n	8001692 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800149c:	b2db      	uxtb	r3, r3
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d106      	bne.n	80014b0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2200      	movs	r2, #0
 80014a6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f005 fefa 	bl	80072a4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2203      	movs	r2, #3
 80014b4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4618      	mov	r0, r3
 80014be:	f002 f905 	bl	80036cc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	603b      	str	r3, [r7, #0]
 80014c8:	687e      	ldr	r6, [r7, #4]
 80014ca:	466d      	mov	r5, sp
 80014cc:	f106 0410 	add.w	r4, r6, #16
 80014d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014d4:	6823      	ldr	r3, [r4, #0]
 80014d6:	602b      	str	r3, [r5, #0]
 80014d8:	1d33      	adds	r3, r6, #4
 80014da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014dc:	6838      	ldr	r0, [r7, #0]
 80014de:	f002 f8cf 	bl	8003680 <USB_CoreInit>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d005      	beq.n	80014f4 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2202      	movs	r2, #2
 80014ec:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80014f0:	2301      	movs	r3, #1
 80014f2:	e0ce      	b.n	8001692 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2100      	movs	r1, #0
 80014fa:	4618      	mov	r0, r3
 80014fc:	f002 f900 	bl	8003700 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001500:	2300      	movs	r3, #0
 8001502:	73fb      	strb	r3, [r7, #15]
 8001504:	e04c      	b.n	80015a0 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001506:	7bfb      	ldrb	r3, [r7, #15]
 8001508:	6879      	ldr	r1, [r7, #4]
 800150a:	1c5a      	adds	r2, r3, #1
 800150c:	4613      	mov	r3, r2
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	4413      	add	r3, r2
 8001512:	00db      	lsls	r3, r3, #3
 8001514:	440b      	add	r3, r1
 8001516:	3301      	adds	r3, #1
 8001518:	2201      	movs	r2, #1
 800151a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800151c:	7bfb      	ldrb	r3, [r7, #15]
 800151e:	6879      	ldr	r1, [r7, #4]
 8001520:	1c5a      	adds	r2, r3, #1
 8001522:	4613      	mov	r3, r2
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	4413      	add	r3, r2
 8001528:	00db      	lsls	r3, r3, #3
 800152a:	440b      	add	r3, r1
 800152c:	7bfa      	ldrb	r2, [r7, #15]
 800152e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001530:	7bfa      	ldrb	r2, [r7, #15]
 8001532:	7bfb      	ldrb	r3, [r7, #15]
 8001534:	b298      	uxth	r0, r3
 8001536:	6879      	ldr	r1, [r7, #4]
 8001538:	4613      	mov	r3, r2
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	4413      	add	r3, r2
 800153e:	00db      	lsls	r3, r3, #3
 8001540:	440b      	add	r3, r1
 8001542:	3336      	adds	r3, #54	; 0x36
 8001544:	4602      	mov	r2, r0
 8001546:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001548:	7bfb      	ldrb	r3, [r7, #15]
 800154a:	6879      	ldr	r1, [r7, #4]
 800154c:	1c5a      	adds	r2, r3, #1
 800154e:	4613      	mov	r3, r2
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	4413      	add	r3, r2
 8001554:	00db      	lsls	r3, r3, #3
 8001556:	440b      	add	r3, r1
 8001558:	3303      	adds	r3, #3
 800155a:	2200      	movs	r2, #0
 800155c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800155e:	7bfa      	ldrb	r2, [r7, #15]
 8001560:	6879      	ldr	r1, [r7, #4]
 8001562:	4613      	mov	r3, r2
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	4413      	add	r3, r2
 8001568:	00db      	lsls	r3, r3, #3
 800156a:	440b      	add	r3, r1
 800156c:	3338      	adds	r3, #56	; 0x38
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001572:	7bfa      	ldrb	r2, [r7, #15]
 8001574:	6879      	ldr	r1, [r7, #4]
 8001576:	4613      	mov	r3, r2
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	4413      	add	r3, r2
 800157c:	00db      	lsls	r3, r3, #3
 800157e:	440b      	add	r3, r1
 8001580:	333c      	adds	r3, #60	; 0x3c
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001586:	7bfa      	ldrb	r2, [r7, #15]
 8001588:	6879      	ldr	r1, [r7, #4]
 800158a:	4613      	mov	r3, r2
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	4413      	add	r3, r2
 8001590:	00db      	lsls	r3, r3, #3
 8001592:	440b      	add	r3, r1
 8001594:	3340      	adds	r3, #64	; 0x40
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800159a:	7bfb      	ldrb	r3, [r7, #15]
 800159c:	3301      	adds	r3, #1
 800159e:	73fb      	strb	r3, [r7, #15]
 80015a0:	7bfa      	ldrb	r2, [r7, #15]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d3ad      	bcc.n	8001506 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015aa:	2300      	movs	r3, #0
 80015ac:	73fb      	strb	r3, [r7, #15]
 80015ae:	e044      	b.n	800163a <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80015b0:	7bfa      	ldrb	r2, [r7, #15]
 80015b2:	6879      	ldr	r1, [r7, #4]
 80015b4:	4613      	mov	r3, r2
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	4413      	add	r3, r2
 80015ba:	00db      	lsls	r3, r3, #3
 80015bc:	440b      	add	r3, r1
 80015be:	f203 1369 	addw	r3, r3, #361	; 0x169
 80015c2:	2200      	movs	r2, #0
 80015c4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80015c6:	7bfa      	ldrb	r2, [r7, #15]
 80015c8:	6879      	ldr	r1, [r7, #4]
 80015ca:	4613      	mov	r3, r2
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	4413      	add	r3, r2
 80015d0:	00db      	lsls	r3, r3, #3
 80015d2:	440b      	add	r3, r1
 80015d4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80015d8:	7bfa      	ldrb	r2, [r7, #15]
 80015da:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80015dc:	7bfa      	ldrb	r2, [r7, #15]
 80015de:	6879      	ldr	r1, [r7, #4]
 80015e0:	4613      	mov	r3, r2
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	4413      	add	r3, r2
 80015e6:	00db      	lsls	r3, r3, #3
 80015e8:	440b      	add	r3, r1
 80015ea:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80015ee:	2200      	movs	r2, #0
 80015f0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80015f2:	7bfa      	ldrb	r2, [r7, #15]
 80015f4:	6879      	ldr	r1, [r7, #4]
 80015f6:	4613      	mov	r3, r2
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	4413      	add	r3, r2
 80015fc:	00db      	lsls	r3, r3, #3
 80015fe:	440b      	add	r3, r1
 8001600:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001608:	7bfa      	ldrb	r2, [r7, #15]
 800160a:	6879      	ldr	r1, [r7, #4]
 800160c:	4613      	mov	r3, r2
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	4413      	add	r3, r2
 8001612:	00db      	lsls	r3, r3, #3
 8001614:	440b      	add	r3, r1
 8001616:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800161e:	7bfa      	ldrb	r2, [r7, #15]
 8001620:	6879      	ldr	r1, [r7, #4]
 8001622:	4613      	mov	r3, r2
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	4413      	add	r3, r2
 8001628:	00db      	lsls	r3, r3, #3
 800162a:	440b      	add	r3, r1
 800162c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001634:	7bfb      	ldrb	r3, [r7, #15]
 8001636:	3301      	adds	r3, #1
 8001638:	73fb      	strb	r3, [r7, #15]
 800163a:	7bfa      	ldrb	r2, [r7, #15]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	429a      	cmp	r2, r3
 8001642:	d3b5      	bcc.n	80015b0 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	603b      	str	r3, [r7, #0]
 800164a:	687e      	ldr	r6, [r7, #4]
 800164c:	466d      	mov	r5, sp
 800164e:	f106 0410 	add.w	r4, r6, #16
 8001652:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001654:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001656:	6823      	ldr	r3, [r4, #0]
 8001658:	602b      	str	r3, [r5, #0]
 800165a:	1d33      	adds	r3, r6, #4
 800165c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800165e:	6838      	ldr	r0, [r7, #0]
 8001660:	f002 f85a 	bl	8003718 <USB_DevInit>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d005      	beq.n	8001676 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2202      	movs	r2, #2
 800166e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e00d      	b.n	8001692 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2200      	movs	r2, #0
 800167a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2201      	movs	r2, #1
 8001682:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4618      	mov	r0, r3
 800168c:	f003 fff4 	bl	8005678 <USB_DevDisconnect>

  return HAL_OK;
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3714      	adds	r7, #20
 8001696:	46bd      	mov	sp, r7
 8001698:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800169a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	b082      	sub	sp, #8
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d101      	bne.n	80016b0 <HAL_PCD_Start+0x16>
 80016ac:	2302      	movs	r3, #2
 80016ae:	e016      	b.n	80016de <HAL_PCD_Start+0x44>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2201      	movs	r2, #1
 80016b4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4618      	mov	r0, r3
 80016be:	f001 ffef 	bl	80036a0 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80016c2:	2101      	movs	r1, #1
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f006 f860 	bl	800778a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4618      	mov	r0, r3
 80016d0:	f003 ffc8 	bl	8005664 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2200      	movs	r2, #0
 80016d8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b088      	sub	sp, #32
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f003 ffca 	bl	800568c <USB_ReadInterrupts>
 80016f8:	4603      	mov	r3, r0
 80016fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001702:	d102      	bne.n	800170a <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f000 fb61 	bl	8001dcc <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4618      	mov	r0, r3
 8001710:	f003 ffbc 	bl	800568c <USB_ReadInterrupts>
 8001714:	4603      	mov	r3, r0
 8001716:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800171a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800171e:	d112      	bne.n	8001746 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001728:	b29a      	uxth	r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001732:	b292      	uxth	r2, r2
 8001734:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f005 fe2e 	bl	800739a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800173e:	2100      	movs	r1, #0
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f000 f925 	bl	8001990 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4618      	mov	r0, r3
 800174c:	f003 ff9e 	bl	800568c <USB_ReadInterrupts>
 8001750:	4603      	mov	r3, r0
 8001752:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001756:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800175a:	d10b      	bne.n	8001774 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001764:	b29a      	uxth	r2, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800176e:	b292      	uxth	r2, r2
 8001770:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4618      	mov	r0, r3
 800177a:	f003 ff87 	bl	800568c <USB_ReadInterrupts>
 800177e:	4603      	mov	r3, r0
 8001780:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001784:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001788:	d10b      	bne.n	80017a2 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001792:	b29a      	uxth	r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800179c:	b292      	uxth	r2, r2
 800179e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f003 ff70 	bl	800568c <USB_ReadInterrupts>
 80017ac:	4603      	mov	r3, r0
 80017ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017b6:	d126      	bne.n	8001806 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80017c0:	b29a      	uxth	r2, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f022 0204 	bic.w	r2, r2, #4
 80017ca:	b292      	uxth	r2, r2
 80017cc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80017d8:	b29a      	uxth	r2, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f022 0208 	bic.w	r2, r2, #8
 80017e2:	b292      	uxth	r2, r2
 80017e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f005 fe0f 	bl	800740c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017f6:	b29a      	uxth	r2, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001800:	b292      	uxth	r2, r2
 8001802:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4618      	mov	r0, r3
 800180c:	f003 ff3e 	bl	800568c <USB_ReadInterrupts>
 8001810:	4603      	mov	r3, r0
 8001812:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001816:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800181a:	f040 8084 	bne.w	8001926 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 800181e:	2300      	movs	r3, #0
 8001820:	77fb      	strb	r3, [r7, #31]
 8001822:	e011      	b.n	8001848 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	461a      	mov	r2, r3
 800182a:	7ffb      	ldrb	r3, [r7, #31]
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	441a      	add	r2, r3
 8001830:	7ffb      	ldrb	r3, [r7, #31]
 8001832:	8812      	ldrh	r2, [r2, #0]
 8001834:	b292      	uxth	r2, r2
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	f107 0120 	add.w	r1, r7, #32
 800183c:	440b      	add	r3, r1
 800183e:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001842:	7ffb      	ldrb	r3, [r7, #31]
 8001844:	3301      	adds	r3, #1
 8001846:	77fb      	strb	r3, [r7, #31]
 8001848:	7ffb      	ldrb	r3, [r7, #31]
 800184a:	2b07      	cmp	r3, #7
 800184c:	d9ea      	bls.n	8001824 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001856:	b29a      	uxth	r2, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f042 0201 	orr.w	r2, r2, #1
 8001860:	b292      	uxth	r2, r2
 8001862:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800186e:	b29a      	uxth	r2, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f022 0201 	bic.w	r2, r2, #1
 8001878:	b292      	uxth	r2, r2
 800187a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800187e:	bf00      	nop
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001888:	b29b      	uxth	r3, r3
 800188a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800188e:	2b00      	cmp	r3, #0
 8001890:	d0f6      	beq.n	8001880 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800189a:	b29a      	uxth	r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018a4:	b292      	uxth	r2, r2
 80018a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80018aa:	2300      	movs	r3, #0
 80018ac:	77fb      	strb	r3, [r7, #31]
 80018ae:	e010      	b.n	80018d2 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80018b0:	7ffb      	ldrb	r3, [r7, #31]
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	6812      	ldr	r2, [r2, #0]
 80018b6:	4611      	mov	r1, r2
 80018b8:	7ffa      	ldrb	r2, [r7, #31]
 80018ba:	0092      	lsls	r2, r2, #2
 80018bc:	440a      	add	r2, r1
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	f107 0120 	add.w	r1, r7, #32
 80018c4:	440b      	add	r3, r1
 80018c6:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80018ca:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80018cc:	7ffb      	ldrb	r3, [r7, #31]
 80018ce:	3301      	adds	r3, #1
 80018d0:	77fb      	strb	r3, [r7, #31]
 80018d2:	7ffb      	ldrb	r3, [r7, #31]
 80018d4:	2b07      	cmp	r3, #7
 80018d6:	d9eb      	bls.n	80018b0 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80018e0:	b29a      	uxth	r2, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f042 0208 	orr.w	r2, r2, #8
 80018ea:	b292      	uxth	r2, r2
 80018ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018f8:	b29a      	uxth	r2, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001902:	b292      	uxth	r2, r2
 8001904:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001910:	b29a      	uxth	r2, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f042 0204 	orr.w	r2, r2, #4
 800191a:	b292      	uxth	r2, r2
 800191c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f005 fd59 	bl	80073d8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4618      	mov	r0, r3
 800192c:	f003 feae 	bl	800568c <USB_ReadInterrupts>
 8001930:	4603      	mov	r3, r0
 8001932:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001936:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800193a:	d10e      	bne.n	800195a <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001944:	b29a      	uxth	r2, r3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800194e:	b292      	uxth	r2, r2
 8001950:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f005 fd12 	bl	800737e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4618      	mov	r0, r3
 8001960:	f003 fe94 	bl	800568c <USB_ReadInterrupts>
 8001964:	4603      	mov	r3, r0
 8001966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800196a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800196e:	d10b      	bne.n	8001988 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001978:	b29a      	uxth	r2, r3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001982:	b292      	uxth	r2, r2
 8001984:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001988:	bf00      	nop
 800198a:	3720      	adds	r7, #32
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}

08001990 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	460b      	mov	r3, r1
 800199a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d101      	bne.n	80019aa <HAL_PCD_SetAddress+0x1a>
 80019a6:	2302      	movs	r3, #2
 80019a8:	e013      	b.n	80019d2 <HAL_PCD_SetAddress+0x42>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2201      	movs	r2, #1
 80019ae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	78fa      	ldrb	r2, [r7, #3]
 80019b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	78fa      	ldrb	r2, [r7, #3]
 80019c0:	4611      	mov	r1, r2
 80019c2:	4618      	mov	r0, r3
 80019c4:	f003 fe3b 	bl	800563e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2200      	movs	r2, #0
 80019cc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}

080019da <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80019da:	b580      	push	{r7, lr}
 80019dc:	b084      	sub	sp, #16
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
 80019e2:	4608      	mov	r0, r1
 80019e4:	4611      	mov	r1, r2
 80019e6:	461a      	mov	r2, r3
 80019e8:	4603      	mov	r3, r0
 80019ea:	70fb      	strb	r3, [r7, #3]
 80019ec:	460b      	mov	r3, r1
 80019ee:	803b      	strh	r3, [r7, #0]
 80019f0:	4613      	mov	r3, r2
 80019f2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80019f4:	2300      	movs	r3, #0
 80019f6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80019f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	da0e      	bge.n	8001a1e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a00:	78fb      	ldrb	r3, [r7, #3]
 8001a02:	f003 0307 	and.w	r3, r3, #7
 8001a06:	1c5a      	adds	r2, r3, #1
 8001a08:	4613      	mov	r3, r2
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	4413      	add	r3, r2
 8001a0e:	00db      	lsls	r3, r3, #3
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	4413      	add	r3, r2
 8001a14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	2201      	movs	r2, #1
 8001a1a:	705a      	strb	r2, [r3, #1]
 8001a1c:	e00e      	b.n	8001a3c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a1e:	78fb      	ldrb	r3, [r7, #3]
 8001a20:	f003 0207 	and.w	r2, r3, #7
 8001a24:	4613      	mov	r3, r2
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	4413      	add	r3, r2
 8001a2a:	00db      	lsls	r3, r3, #3
 8001a2c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	4413      	add	r3, r2
 8001a34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001a3c:	78fb      	ldrb	r3, [r7, #3]
 8001a3e:	f003 0307 	and.w	r3, r3, #7
 8001a42:	b2da      	uxtb	r2, r3
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001a48:	883a      	ldrh	r2, [r7, #0]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	78ba      	ldrb	r2, [r7, #2]
 8001a52:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	785b      	ldrb	r3, [r3, #1]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d004      	beq.n	8001a66 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	b29a      	uxth	r2, r3
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001a66:	78bb      	ldrb	r3, [r7, #2]
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d102      	bne.n	8001a72 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d101      	bne.n	8001a80 <HAL_PCD_EP_Open+0xa6>
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	e00e      	b.n	8001a9e <HAL_PCD_EP_Open+0xc4>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2201      	movs	r2, #1
 8001a84:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	68f9      	ldr	r1, [r7, #12]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f001 fe62 	bl	8003758 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2200      	movs	r2, #0
 8001a98:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001a9c:	7afb      	ldrb	r3, [r7, #11]
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3710      	adds	r7, #16
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b084      	sub	sp, #16
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
 8001aae:	460b      	mov	r3, r1
 8001ab0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ab2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	da0e      	bge.n	8001ad8 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001aba:	78fb      	ldrb	r3, [r7, #3]
 8001abc:	f003 0307 	and.w	r3, r3, #7
 8001ac0:	1c5a      	adds	r2, r3, #1
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	4413      	add	r3, r2
 8001ac8:	00db      	lsls	r3, r3, #3
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	4413      	add	r3, r2
 8001ace:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	705a      	strb	r2, [r3, #1]
 8001ad6:	e00e      	b.n	8001af6 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ad8:	78fb      	ldrb	r3, [r7, #3]
 8001ada:	f003 0207 	and.w	r2, r3, #7
 8001ade:	4613      	mov	r3, r2
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	4413      	add	r3, r2
 8001ae4:	00db      	lsls	r3, r3, #3
 8001ae6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	4413      	add	r3, r2
 8001aee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2200      	movs	r2, #0
 8001af4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001af6:	78fb      	ldrb	r3, [r7, #3]
 8001af8:	f003 0307 	and.w	r3, r3, #7
 8001afc:	b2da      	uxtb	r2, r3
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d101      	bne.n	8001b10 <HAL_PCD_EP_Close+0x6a>
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	e00e      	b.n	8001b2e <HAL_PCD_EP_Close+0x88>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2201      	movs	r2, #1
 8001b14:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	68f9      	ldr	r1, [r7, #12]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f002 f984 	bl	8003e2c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2200      	movs	r2, #0
 8001b28:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3710      	adds	r7, #16
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b086      	sub	sp, #24
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	60f8      	str	r0, [r7, #12]
 8001b3e:	607a      	str	r2, [r7, #4]
 8001b40:	603b      	str	r3, [r7, #0]
 8001b42:	460b      	mov	r3, r1
 8001b44:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b46:	7afb      	ldrb	r3, [r7, #11]
 8001b48:	f003 0207 	and.w	r2, r3, #7
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	4413      	add	r3, r2
 8001b52:	00db      	lsls	r3, r3, #3
 8001b54:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b58:	68fa      	ldr	r2, [r7, #12]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	683a      	ldr	r2, [r7, #0]
 8001b68:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	2200      	movs	r2, #0
 8001b74:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b76:	7afb      	ldrb	r3, [r7, #11]
 8001b78:	f003 0307 	and.w	r3, r3, #7
 8001b7c:	b2da      	uxtb	r2, r3
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b82:	7afb      	ldrb	r3, [r7, #11]
 8001b84:	f003 0307 	and.w	r3, r3, #7
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d106      	bne.n	8001b9a <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	6979      	ldr	r1, [r7, #20]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f002 fb36 	bl	8004204 <USB_EPStartXfer>
 8001b98:	e005      	b.n	8001ba6 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	6979      	ldr	r1, [r7, #20]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f002 fb2f 	bl	8004204 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001ba6:	2300      	movs	r3, #0
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3718      	adds	r7, #24
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	460b      	mov	r3, r1
 8001bba:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001bbc:	78fb      	ldrb	r3, [r7, #3]
 8001bbe:	f003 0207 	and.w	r2, r3, #7
 8001bc2:	6879      	ldr	r1, [r7, #4]
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	4413      	add	r3, r2
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	440b      	add	r3, r1
 8001bce:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001bd2:	681b      	ldr	r3, [r3, #0]
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bc80      	pop	{r7}
 8001bdc:	4770      	bx	lr

08001bde <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b086      	sub	sp, #24
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	60f8      	str	r0, [r7, #12]
 8001be6:	607a      	str	r2, [r7, #4]
 8001be8:	603b      	str	r3, [r7, #0]
 8001bea:	460b      	mov	r3, r1
 8001bec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bee:	7afb      	ldrb	r3, [r7, #11]
 8001bf0:	f003 0307 	and.w	r3, r3, #7
 8001bf4:	1c5a      	adds	r2, r3, #1
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	4413      	add	r3, r2
 8001bfc:	00db      	lsls	r3, r3, #3
 8001bfe:	68fa      	ldr	r2, [r7, #12]
 8001c00:	4413      	add	r3, r2
 8001c02:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	683a      	ldr	r2, [r7, #0]
 8001c0e:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	683a      	ldr	r2, [r7, #0]
 8001c1c:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	2200      	movs	r2, #0
 8001c22:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	2201      	movs	r2, #1
 8001c28:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c2a:	7afb      	ldrb	r3, [r7, #11]
 8001c2c:	f003 0307 	and.w	r3, r3, #7
 8001c30:	b2da      	uxtb	r2, r3
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c36:	7afb      	ldrb	r3, [r7, #11]
 8001c38:	f003 0307 	and.w	r3, r3, #7
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d106      	bne.n	8001c4e <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	6979      	ldr	r1, [r7, #20]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f002 fadc 	bl	8004204 <USB_EPStartXfer>
 8001c4c:	e005      	b.n	8001c5a <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	6979      	ldr	r1, [r7, #20]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f002 fad5 	bl	8004204 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001c5a:	2300      	movs	r3, #0
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3718      	adds	r7, #24
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001c70:	78fb      	ldrb	r3, [r7, #3]
 8001c72:	f003 0207 	and.w	r2, r3, #7
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d901      	bls.n	8001c82 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e04c      	b.n	8001d1c <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001c82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	da0e      	bge.n	8001ca8 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c8a:	78fb      	ldrb	r3, [r7, #3]
 8001c8c:	f003 0307 	and.w	r3, r3, #7
 8001c90:	1c5a      	adds	r2, r3, #1
 8001c92:	4613      	mov	r3, r2
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	4413      	add	r3, r2
 8001c98:	00db      	lsls	r3, r3, #3
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	705a      	strb	r2, [r3, #1]
 8001ca6:	e00c      	b.n	8001cc2 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001ca8:	78fa      	ldrb	r2, [r7, #3]
 8001caa:	4613      	mov	r3, r2
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	4413      	add	r3, r2
 8001cb0:	00db      	lsls	r3, r3, #3
 8001cb2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	4413      	add	r3, r2
 8001cba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cc8:	78fb      	ldrb	r3, [r7, #3]
 8001cca:	f003 0307 	and.w	r3, r3, #7
 8001cce:	b2da      	uxtb	r2, r3
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d101      	bne.n	8001ce2 <HAL_PCD_EP_SetStall+0x7e>
 8001cde:	2302      	movs	r3, #2
 8001ce0:	e01c      	b.n	8001d1c <HAL_PCD_EP_SetStall+0xb8>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	68f9      	ldr	r1, [r7, #12]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f003 fba7 	bl	8005444 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001cf6:	78fb      	ldrb	r3, [r7, #3]
 8001cf8:	f003 0307 	and.w	r3, r3, #7
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d108      	bne.n	8001d12 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	4610      	mov	r0, r2
 8001d0e:	f003 fccc 	bl	80056aa <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001d1a:	2300      	movs	r3, #0
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3710      	adds	r7, #16
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001d30:	78fb      	ldrb	r3, [r7, #3]
 8001d32:	f003 020f 	and.w	r2, r3, #15
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d901      	bls.n	8001d42 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e040      	b.n	8001dc4 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	da0e      	bge.n	8001d68 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d4a:	78fb      	ldrb	r3, [r7, #3]
 8001d4c:	f003 0307 	and.w	r3, r3, #7
 8001d50:	1c5a      	adds	r2, r3, #1
 8001d52:	4613      	mov	r3, r2
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	4413      	add	r3, r2
 8001d58:	00db      	lsls	r3, r3, #3
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2201      	movs	r2, #1
 8001d64:	705a      	strb	r2, [r3, #1]
 8001d66:	e00e      	b.n	8001d86 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d68:	78fb      	ldrb	r3, [r7, #3]
 8001d6a:	f003 0207 	and.w	r2, r3, #7
 8001d6e:	4613      	mov	r3, r2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	4413      	add	r3, r2
 8001d74:	00db      	lsls	r3, r3, #3
 8001d76:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2200      	movs	r2, #0
 8001d84:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d8c:	78fb      	ldrb	r3, [r7, #3]
 8001d8e:	f003 0307 	and.w	r3, r3, #7
 8001d92:	b2da      	uxtb	r2, r3
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d101      	bne.n	8001da6 <HAL_PCD_EP_ClrStall+0x82>
 8001da2:	2302      	movs	r3, #2
 8001da4:	e00e      	b.n	8001dc4 <HAL_PCD_EP_ClrStall+0xa0>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2201      	movs	r2, #1
 8001daa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	68f9      	ldr	r1, [r7, #12]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f003 fb95 	bl	80054e4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001dc2:	2300      	movs	r3, #0
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3710      	adds	r7, #16
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b08e      	sub	sp, #56	; 0x38
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001dd4:	e2df      	b.n	8002396 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001dde:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001de0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	f003 030f 	and.w	r3, r3, #15
 8001de8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001dec:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	f040 8158 	bne.w	80020a6 <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001df6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001df8:	f003 0310 	and.w	r3, r3, #16
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d152      	bne.n	8001ea6 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	881b      	ldrh	r3, [r3, #0]
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001e0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e10:	81fb      	strh	r3, [r7, #14]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	89fb      	ldrh	r3, [r7, #14]
 8001e18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	3328      	adds	r3, #40	; 0x28
 8001e28:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e32:	b29b      	uxth	r3, r3
 8001e34:	461a      	mov	r2, r3
 8001e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	00db      	lsls	r3, r3, #3
 8001e3c:	4413      	add	r3, r2
 8001e3e:	3302      	adds	r3, #2
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	6812      	ldr	r2, [r2, #0]
 8001e46:	4413      	add	r3, r2
 8001e48:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e4c:	881b      	ldrh	r3, [r3, #0]
 8001e4e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e54:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e58:	695a      	ldr	r2, [r3, #20]
 8001e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5c:	69db      	ldr	r3, [r3, #28]
 8001e5e:	441a      	add	r2, r3
 8001e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e62:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001e64:	2100      	movs	r1, #0
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f005 fa6f 	bl	800734a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	f000 828e 	beq.w	8002396 <PCD_EP_ISR_Handler+0x5ca>
 8001e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7c:	699b      	ldr	r3, [r3, #24]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	f040 8289 	bne.w	8002396 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001e90:	b2da      	uxtb	r2, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	b292      	uxth	r2, r2
 8001e98:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001ea4:	e277      	b.n	8002396 <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001eac:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	881b      	ldrh	r3, [r3, #0]
 8001eb4:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001eb6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001eb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d034      	beq.n	8001f2a <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	461a      	mov	r2, r3
 8001ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	00db      	lsls	r3, r3, #3
 8001ed2:	4413      	add	r3, r2
 8001ed4:	3306      	adds	r3, #6
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	6812      	ldr	r2, [r2, #0]
 8001edc:	4413      	add	r3, r2
 8001ede:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ee2:	881b      	ldrh	r3, [r3, #0]
 8001ee4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eea:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6818      	ldr	r0, [r3, #0]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef8:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efc:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	f003 fc22 	bl	8005748 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	881b      	ldrh	r3, [r3, #0]
 8001f0a:	b29a      	uxth	r2, r3
 8001f0c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001f10:	4013      	ands	r3, r2
 8001f12:	823b      	strh	r3, [r7, #16]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	8a3a      	ldrh	r2, [r7, #16]
 8001f1a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f1e:	b292      	uxth	r2, r2
 8001f20:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f005 f9e4 	bl	80072f0 <HAL_PCD_SetupStageCallback>
 8001f28:	e235      	b.n	8002396 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001f2a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	f280 8231 	bge.w	8002396 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	881b      	ldrh	r3, [r3, #0]
 8001f3a:	b29a      	uxth	r2, r3
 8001f3c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001f40:	4013      	ands	r3, r2
 8001f42:	83bb      	strh	r3, [r7, #28]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	8bba      	ldrh	r2, [r7, #28]
 8001f4a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f4e:	b292      	uxth	r2, r2
 8001f50:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	00db      	lsls	r3, r3, #3
 8001f64:	4413      	add	r3, r2
 8001f66:	3306      	adds	r3, #6
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	6812      	ldr	r2, [r2, #0]
 8001f6e:	4413      	add	r3, r2
 8001f70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f74:	881b      	ldrh	r3, [r3, #0]
 8001f76:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f80:	69db      	ldr	r3, [r3, #28]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d019      	beq.n	8001fba <PCD_EP_ISR_Handler+0x1ee>
 8001f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f88:	695b      	ldr	r3, [r3, #20]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d015      	beq.n	8001fba <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6818      	ldr	r0, [r3, #0]
 8001f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f94:	6959      	ldr	r1, [r3, #20]
 8001f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f98:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	f003 fbd2 	bl	8005748 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa6:	695a      	ldr	r2, [r3, #20]
 8001fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001faa:	69db      	ldr	r3, [r3, #28]
 8001fac:	441a      	add	r2, r3
 8001fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb0:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f005 f9ad 	bl	8007314 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	61bb      	str	r3, [r7, #24]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	461a      	mov	r2, r3
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	4413      	add	r3, r2
 8001fd0:	61bb      	str	r3, [r7, #24]
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001fd8:	617b      	str	r3, [r7, #20]
 8001fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fdc:	691b      	ldr	r3, [r3, #16]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d112      	bne.n	8002008 <PCD_EP_ISR_Handler+0x23c>
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	881b      	ldrh	r3, [r3, #0]
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001fec:	b29a      	uxth	r2, r3
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	801a      	strh	r2, [r3, #0]
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	881b      	ldrh	r3, [r3, #0]
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ffc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002000:	b29a      	uxth	r2, r3
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	801a      	strh	r2, [r3, #0]
 8002006:	e02f      	b.n	8002068 <PCD_EP_ISR_Handler+0x29c>
 8002008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200a:	691b      	ldr	r3, [r3, #16]
 800200c:	2b3e      	cmp	r3, #62	; 0x3e
 800200e:	d813      	bhi.n	8002038 <PCD_EP_ISR_Handler+0x26c>
 8002010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002012:	691b      	ldr	r3, [r3, #16]
 8002014:	085b      	lsrs	r3, r3, #1
 8002016:	633b      	str	r3, [r7, #48]	; 0x30
 8002018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201a:	691b      	ldr	r3, [r3, #16]
 800201c:	f003 0301 	and.w	r3, r3, #1
 8002020:	2b00      	cmp	r3, #0
 8002022:	d002      	beq.n	800202a <PCD_EP_ISR_Handler+0x25e>
 8002024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002026:	3301      	adds	r3, #1
 8002028:	633b      	str	r3, [r7, #48]	; 0x30
 800202a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800202c:	b29b      	uxth	r3, r3
 800202e:	029b      	lsls	r3, r3, #10
 8002030:	b29a      	uxth	r2, r3
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	801a      	strh	r2, [r3, #0]
 8002036:	e017      	b.n	8002068 <PCD_EP_ISR_Handler+0x29c>
 8002038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203a:	691b      	ldr	r3, [r3, #16]
 800203c:	095b      	lsrs	r3, r3, #5
 800203e:	633b      	str	r3, [r7, #48]	; 0x30
 8002040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002042:	691b      	ldr	r3, [r3, #16]
 8002044:	f003 031f 	and.w	r3, r3, #31
 8002048:	2b00      	cmp	r3, #0
 800204a:	d102      	bne.n	8002052 <PCD_EP_ISR_Handler+0x286>
 800204c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800204e:	3b01      	subs	r3, #1
 8002050:	633b      	str	r3, [r7, #48]	; 0x30
 8002052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002054:	b29b      	uxth	r3, r3
 8002056:	029b      	lsls	r3, r3, #10
 8002058:	b29b      	uxth	r3, r3
 800205a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800205e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002062:	b29a      	uxth	r2, r3
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	881b      	ldrh	r3, [r3, #0]
 800206e:	b29b      	uxth	r3, r3
 8002070:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002074:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002078:	827b      	strh	r3, [r7, #18]
 800207a:	8a7b      	ldrh	r3, [r7, #18]
 800207c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002080:	827b      	strh	r3, [r7, #18]
 8002082:	8a7b      	ldrh	r3, [r7, #18]
 8002084:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002088:	827b      	strh	r3, [r7, #18]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	8a7b      	ldrh	r3, [r7, #18]
 8002090:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002094:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002098:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800209c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	8013      	strh	r3, [r2, #0]
 80020a4:	e177      	b.n	8002396 <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	461a      	mov	r2, r3
 80020ac:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	4413      	add	r3, r2
 80020b4:	881b      	ldrh	r3, [r3, #0]
 80020b6:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80020b8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80020bc:	2b00      	cmp	r3, #0
 80020be:	f280 80ea 	bge.w	8002296 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	461a      	mov	r2, r3
 80020c8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	4413      	add	r3, r2
 80020d0:	881b      	ldrh	r3, [r3, #0]
 80020d2:	b29a      	uxth	r2, r3
 80020d4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80020d8:	4013      	ands	r3, r2
 80020da:	853b      	strh	r3, [r7, #40]	; 0x28
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	461a      	mov	r2, r3
 80020e2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	4413      	add	r3, r2
 80020ea:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80020ec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80020f0:	b292      	uxth	r2, r2
 80020f2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80020f4:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80020f8:	4613      	mov	r3, r2
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	4413      	add	r3, r2
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	4413      	add	r3, r2
 8002108:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800210a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210c:	7b1b      	ldrb	r3, [r3, #12]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d122      	bne.n	8002158 <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800211a:	b29b      	uxth	r3, r3
 800211c:	461a      	mov	r2, r3
 800211e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	00db      	lsls	r3, r3, #3
 8002124:	4413      	add	r3, r2
 8002126:	3306      	adds	r3, #6
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	6812      	ldr	r2, [r2, #0]
 800212e:	4413      	add	r3, r2
 8002130:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002134:	881b      	ldrh	r3, [r3, #0]
 8002136:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800213a:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 800213c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800213e:	2b00      	cmp	r3, #0
 8002140:	f000 8087 	beq.w	8002252 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6818      	ldr	r0, [r3, #0]
 8002148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214a:	6959      	ldr	r1, [r3, #20]
 800214c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214e:	88da      	ldrh	r2, [r3, #6]
 8002150:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002152:	f003 faf9 	bl	8005748 <USB_ReadPMA>
 8002156:	e07c      	b.n	8002252 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215a:	78db      	ldrb	r3, [r3, #3]
 800215c:	2b02      	cmp	r3, #2
 800215e:	d108      	bne.n	8002172 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002160:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002162:	461a      	mov	r2, r3
 8002164:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f000 f923 	bl	80023b2 <HAL_PCD_EP_DB_Receive>
 800216c:	4603      	mov	r3, r0
 800216e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002170:	e06f      	b.n	8002252 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	461a      	mov	r2, r3
 8002178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	4413      	add	r3, r2
 8002180:	881b      	ldrh	r3, [r3, #0]
 8002182:	b29b      	uxth	r3, r3
 8002184:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002188:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800218c:	847b      	strh	r3, [r7, #34]	; 0x22
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	461a      	mov	r2, r3
 8002194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	441a      	add	r2, r3
 800219c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800219e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80021a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80021a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021aa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	461a      	mov	r2, r3
 80021b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	4413      	add	r3, r2
 80021c0:	881b      	ldrh	r3, [r3, #0]
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d021      	beq.n	8002210 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	461a      	mov	r2, r3
 80021d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	00db      	lsls	r3, r3, #3
 80021de:	4413      	add	r3, r2
 80021e0:	3302      	adds	r3, #2
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	6812      	ldr	r2, [r2, #0]
 80021e8:	4413      	add	r3, r2
 80021ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021ee:	881b      	ldrh	r3, [r3, #0]
 80021f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021f4:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80021f6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d02a      	beq.n	8002252 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6818      	ldr	r0, [r3, #0]
 8002200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002202:	6959      	ldr	r1, [r3, #20]
 8002204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002206:	891a      	ldrh	r2, [r3, #8]
 8002208:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800220a:	f003 fa9d 	bl	8005748 <USB_ReadPMA>
 800220e:	e020      	b.n	8002252 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002218:	b29b      	uxth	r3, r3
 800221a:	461a      	mov	r2, r3
 800221c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	00db      	lsls	r3, r3, #3
 8002222:	4413      	add	r3, r2
 8002224:	3306      	adds	r3, #6
 8002226:	005b      	lsls	r3, r3, #1
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	6812      	ldr	r2, [r2, #0]
 800222c:	4413      	add	r3, r2
 800222e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002232:	881b      	ldrh	r3, [r3, #0]
 8002234:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002238:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800223a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800223c:	2b00      	cmp	r3, #0
 800223e:	d008      	beq.n	8002252 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6818      	ldr	r0, [r3, #0]
 8002244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002246:	6959      	ldr	r1, [r3, #20]
 8002248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224a:	895a      	ldrh	r2, [r3, #10]
 800224c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800224e:	f003 fa7b 	bl	8005748 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002254:	69da      	ldr	r2, [r3, #28]
 8002256:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002258:	441a      	add	r2, r3
 800225a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800225e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002260:	695a      	ldr	r2, [r3, #20]
 8002262:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002264:	441a      	add	r2, r3
 8002266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002268:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800226a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226c:	699b      	ldr	r3, [r3, #24]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d004      	beq.n	800227c <PCD_EP_ISR_Handler+0x4b0>
 8002272:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002276:	691b      	ldr	r3, [r3, #16]
 8002278:	429a      	cmp	r2, r3
 800227a:	d206      	bcs.n	800228a <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800227c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	4619      	mov	r1, r3
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f005 f846 	bl	8007314 <HAL_PCD_DataOutStageCallback>
 8002288:	e005      	b.n	8002296 <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002290:	4618      	mov	r0, r3
 8002292:	f001 ffb7 	bl	8004204 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002296:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002298:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800229c:	2b00      	cmp	r3, #0
 800229e:	d07a      	beq.n	8002396 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 80022a0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80022a4:	1c5a      	adds	r2, r3, #1
 80022a6:	4613      	mov	r3, r2
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	4413      	add	r3, r2
 80022ac:	00db      	lsls	r3, r3, #3
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	4413      	add	r3, r2
 80022b2:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	461a      	mov	r2, r3
 80022ba:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	4413      	add	r3, r2
 80022c2:	881b      	ldrh	r3, [r3, #0]
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80022ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022ce:	843b      	strh	r3, [r7, #32]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	461a      	mov	r2, r3
 80022d6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	441a      	add	r2, r3
 80022de:	8c3b      	ldrh	r3, [r7, #32]
 80022e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 80022ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ee:	78db      	ldrb	r3, [r3, #3]
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d108      	bne.n	8002306 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80022f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f6:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d146      	bne.n	800238a <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80022fc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80022fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002302:	2b00      	cmp	r3, #0
 8002304:	d141      	bne.n	800238a <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800230e:	b29b      	uxth	r3, r3
 8002310:	461a      	mov	r2, r3
 8002312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	00db      	lsls	r3, r3, #3
 8002318:	4413      	add	r3, r2
 800231a:	3302      	adds	r3, #2
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	6812      	ldr	r2, [r2, #0]
 8002322:	4413      	add	r3, r2
 8002324:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002328:	881b      	ldrh	r3, [r3, #0]
 800232a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800232e:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002332:	699a      	ldr	r2, [r3, #24]
 8002334:	8bfb      	ldrh	r3, [r7, #30]
 8002336:	429a      	cmp	r2, r3
 8002338:	d906      	bls.n	8002348 <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 800233a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233c:	699a      	ldr	r2, [r3, #24]
 800233e:	8bfb      	ldrh	r3, [r7, #30]
 8002340:	1ad2      	subs	r2, r2, r3
 8002342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002344:	619a      	str	r2, [r3, #24]
 8002346:	e002      	b.n	800234e <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8002348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234a:	2200      	movs	r2, #0
 800234c:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800234e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002350:	699b      	ldr	r3, [r3, #24]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d106      	bne.n	8002364 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	4619      	mov	r1, r3
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f004 fff4 	bl	800734a <HAL_PCD_DataInStageCallback>
 8002362:	e018      	b.n	8002396 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002366:	695a      	ldr	r2, [r3, #20]
 8002368:	8bfb      	ldrh	r3, [r7, #30]
 800236a:	441a      	add	r2, r3
 800236c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236e:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002372:	69da      	ldr	r2, [r3, #28]
 8002374:	8bfb      	ldrh	r3, [r7, #30]
 8002376:	441a      	add	r2, r3
 8002378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237a:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002382:	4618      	mov	r0, r3
 8002384:	f001 ff3e 	bl	8004204 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002388:	e005      	b.n	8002396 <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800238a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800238c:	461a      	mov	r2, r3
 800238e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f000 f91b 	bl	80025cc <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800239e:	b29b      	uxth	r3, r3
 80023a0:	b21b      	sxth	r3, r3
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	f6ff ad17 	blt.w	8001dd6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3738      	adds	r7, #56	; 0x38
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b088      	sub	sp, #32
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	60f8      	str	r0, [r7, #12]
 80023ba:	60b9      	str	r1, [r7, #8]
 80023bc:	4613      	mov	r3, r2
 80023be:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80023c0:	88fb      	ldrh	r3, [r7, #6]
 80023c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d07e      	beq.n	80024c8 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	461a      	mov	r2, r3
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	00db      	lsls	r3, r3, #3
 80023dc:	4413      	add	r3, r2
 80023de:	3302      	adds	r3, #2
 80023e0:	005b      	lsls	r3, r3, #1
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	6812      	ldr	r2, [r2, #0]
 80023e6:	4413      	add	r3, r2
 80023e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023ec:	881b      	ldrh	r3, [r3, #0]
 80023ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023f2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	699a      	ldr	r2, [r3, #24]
 80023f8:	8b7b      	ldrh	r3, [r7, #26]
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d306      	bcc.n	800240c <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	699a      	ldr	r2, [r3, #24]
 8002402:	8b7b      	ldrh	r3, [r7, #26]
 8002404:	1ad2      	subs	r2, r2, r3
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	619a      	str	r2, [r3, #24]
 800240a:	e002      	b.n	8002412 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	2200      	movs	r2, #0
 8002410:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	699b      	ldr	r3, [r3, #24]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d123      	bne.n	8002462 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	461a      	mov	r2, r3
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	4413      	add	r3, r2
 8002428:	881b      	ldrh	r3, [r3, #0]
 800242a:	b29b      	uxth	r3, r3
 800242c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002430:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002434:	833b      	strh	r3, [r7, #24]
 8002436:	8b3b      	ldrh	r3, [r7, #24]
 8002438:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800243c:	833b      	strh	r3, [r7, #24]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	461a      	mov	r2, r3
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	441a      	add	r2, r3
 800244c:	8b3b      	ldrh	r3, [r7, #24]
 800244e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002452:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002456:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800245a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800245e:	b29b      	uxth	r3, r3
 8002460:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002462:	88fb      	ldrh	r3, [r7, #6]
 8002464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002468:	2b00      	cmp	r3, #0
 800246a:	d01f      	beq.n	80024ac <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	461a      	mov	r2, r3
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	4413      	add	r3, r2
 800247a:	881b      	ldrh	r3, [r3, #0]
 800247c:	b29b      	uxth	r3, r3
 800247e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002482:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002486:	82fb      	strh	r3, [r7, #22]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	461a      	mov	r2, r3
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	441a      	add	r2, r3
 8002496:	8afb      	ldrh	r3, [r7, #22]
 8002498:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800249c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80024a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024a4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80024ac:	8b7b      	ldrh	r3, [r7, #26]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	f000 8087 	beq.w	80025c2 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6818      	ldr	r0, [r3, #0]
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	6959      	ldr	r1, [r3, #20]
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	891a      	ldrh	r2, [r3, #8]
 80024c0:	8b7b      	ldrh	r3, [r7, #26]
 80024c2:	f003 f941 	bl	8005748 <USB_ReadPMA>
 80024c6:	e07c      	b.n	80025c2 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	461a      	mov	r2, r3
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	00db      	lsls	r3, r3, #3
 80024da:	4413      	add	r3, r2
 80024dc:	3306      	adds	r3, #6
 80024de:	005b      	lsls	r3, r3, #1
 80024e0:	68fa      	ldr	r2, [r7, #12]
 80024e2:	6812      	ldr	r2, [r2, #0]
 80024e4:	4413      	add	r3, r2
 80024e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024ea:	881b      	ldrh	r3, [r3, #0]
 80024ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024f0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	699a      	ldr	r2, [r3, #24]
 80024f6:	8b7b      	ldrh	r3, [r7, #26]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d306      	bcc.n	800250a <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	699a      	ldr	r2, [r3, #24]
 8002500:	8b7b      	ldrh	r3, [r7, #26]
 8002502:	1ad2      	subs	r2, r2, r3
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	619a      	str	r2, [r3, #24]
 8002508:	e002      	b.n	8002510 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	2200      	movs	r2, #0
 800250e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d123      	bne.n	8002560 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	461a      	mov	r2, r3
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	4413      	add	r3, r2
 8002526:	881b      	ldrh	r3, [r3, #0]
 8002528:	b29b      	uxth	r3, r3
 800252a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800252e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002532:	83fb      	strh	r3, [r7, #30]
 8002534:	8bfb      	ldrh	r3, [r7, #30]
 8002536:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800253a:	83fb      	strh	r3, [r7, #30]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	461a      	mov	r2, r3
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	441a      	add	r2, r3
 800254a:	8bfb      	ldrh	r3, [r7, #30]
 800254c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002550:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002554:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002558:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800255c:	b29b      	uxth	r3, r3
 800255e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002560:	88fb      	ldrh	r3, [r7, #6]
 8002562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002566:	2b00      	cmp	r3, #0
 8002568:	d11f      	bne.n	80025aa <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	461a      	mov	r2, r3
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	4413      	add	r3, r2
 8002578:	881b      	ldrh	r3, [r3, #0]
 800257a:	b29b      	uxth	r3, r3
 800257c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002580:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002584:	83bb      	strh	r3, [r7, #28]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	461a      	mov	r2, r3
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	441a      	add	r2, r3
 8002594:	8bbb      	ldrh	r3, [r7, #28]
 8002596:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800259a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800259e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025a2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80025aa:	8b7b      	ldrh	r3, [r7, #26]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d008      	beq.n	80025c2 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6818      	ldr	r0, [r3, #0]
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	6959      	ldr	r1, [r3, #20]
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	895a      	ldrh	r2, [r3, #10]
 80025bc:	8b7b      	ldrh	r3, [r7, #26]
 80025be:	f003 f8c3 	bl	8005748 <USB_ReadPMA>
    }
  }

  return count;
 80025c2:	8b7b      	ldrh	r3, [r7, #26]
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3720      	adds	r7, #32
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}

080025cc <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b092      	sub	sp, #72	; 0x48
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	60b9      	str	r1, [r7, #8]
 80025d6:	4613      	mov	r3, r2
 80025d8:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80025da:	88fb      	ldrh	r3, [r7, #6]
 80025dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	f000 8132 	beq.w	800284a <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	461a      	mov	r2, r3
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	00db      	lsls	r3, r3, #3
 80025f8:	4413      	add	r3, r2
 80025fa:	3302      	adds	r3, #2
 80025fc:	005b      	lsls	r3, r3, #1
 80025fe:	68fa      	ldr	r2, [r7, #12]
 8002600:	6812      	ldr	r2, [r2, #0]
 8002602:	4413      	add	r3, r2
 8002604:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002608:	881b      	ldrh	r3, [r3, #0]
 800260a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800260e:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	699a      	ldr	r2, [r3, #24]
 8002614:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002616:	429a      	cmp	r2, r3
 8002618:	d906      	bls.n	8002628 <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	699a      	ldr	r2, [r3, #24]
 800261e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002620:	1ad2      	subs	r2, r2, r3
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	619a      	str	r2, [r3, #24]
 8002626:	e002      	b.n	800262e <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	2200      	movs	r2, #0
 800262c:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	699b      	ldr	r3, [r3, #24]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d12c      	bne.n	8002690 <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	4619      	mov	r1, r3
 800263c:	68f8      	ldr	r0, [r7, #12]
 800263e:	f004 fe84 	bl	800734a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002642:	88fb      	ldrh	r3, [r7, #6]
 8002644:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002648:	2b00      	cmp	r3, #0
 800264a:	f000 822f 	beq.w	8002aac <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	461a      	mov	r2, r3
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	4413      	add	r3, r2
 800265c:	881b      	ldrh	r3, [r3, #0]
 800265e:	b29b      	uxth	r3, r3
 8002660:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002664:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002668:	827b      	strh	r3, [r7, #18]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	461a      	mov	r2, r3
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	441a      	add	r2, r3
 8002678:	8a7b      	ldrh	r3, [r7, #18]
 800267a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800267e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002682:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002686:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800268a:	b29b      	uxth	r3, r3
 800268c:	8013      	strh	r3, [r2, #0]
 800268e:	e20d      	b.n	8002aac <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002690:	88fb      	ldrh	r3, [r7, #6]
 8002692:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d01f      	beq.n	80026da <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	461a      	mov	r2, r3
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	4413      	add	r3, r2
 80026a8:	881b      	ldrh	r3, [r3, #0]
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026b4:	84bb      	strh	r3, [r7, #36]	; 0x24
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	461a      	mov	r2, r3
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	441a      	add	r2, r3
 80026c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80026c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	f040 81e3 	bne.w	8002aac <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	695a      	ldr	r2, [r3, #20]
 80026ea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80026ec:	441a      	add	r2, r3
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	69da      	ldr	r2, [r3, #28]
 80026f6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80026f8:	441a      	add	r2, r3
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	6a1a      	ldr	r2, [r3, #32]
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	691b      	ldr	r3, [r3, #16]
 8002706:	429a      	cmp	r2, r3
 8002708:	d309      	bcc.n	800271e <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	691b      	ldr	r3, [r3, #16]
 800270e:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	6a1a      	ldr	r2, [r3, #32]
 8002714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002716:	1ad2      	subs	r2, r2, r3
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	621a      	str	r2, [r3, #32]
 800271c:	e014      	b.n	8002748 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	6a1b      	ldr	r3, [r3, #32]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d106      	bne.n	8002734 <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 8002726:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002728:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	2200      	movs	r2, #0
 800272e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002732:	e009      	b.n	8002748 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	2200      	movs	r2, #0
 8002738:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	6a1b      	ldr	r3, [r3, #32]
 8002740:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	2200      	movs	r2, #0
 8002746:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	785b      	ldrb	r3, [r3, #1]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d155      	bne.n	80027fc <HAL_PCD_EP_DB_Transmit+0x230>
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	61bb      	str	r3, [r7, #24]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800275e:	b29b      	uxth	r3, r3
 8002760:	461a      	mov	r2, r3
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	4413      	add	r3, r2
 8002766:	61bb      	str	r3, [r7, #24]
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	011a      	lsls	r2, r3, #4
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	4413      	add	r3, r2
 8002772:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002776:	617b      	str	r3, [r7, #20]
 8002778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800277a:	2b00      	cmp	r3, #0
 800277c:	d112      	bne.n	80027a4 <HAL_PCD_EP_DB_Transmit+0x1d8>
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	881b      	ldrh	r3, [r3, #0]
 8002782:	b29b      	uxth	r3, r3
 8002784:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002788:	b29a      	uxth	r2, r3
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	801a      	strh	r2, [r3, #0]
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	881b      	ldrh	r3, [r3, #0]
 8002792:	b29b      	uxth	r3, r3
 8002794:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002798:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800279c:	b29a      	uxth	r2, r3
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	801a      	strh	r2, [r3, #0]
 80027a2:	e047      	b.n	8002834 <HAL_PCD_EP_DB_Transmit+0x268>
 80027a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027a6:	2b3e      	cmp	r3, #62	; 0x3e
 80027a8:	d811      	bhi.n	80027ce <HAL_PCD_EP_DB_Transmit+0x202>
 80027aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027ac:	085b      	lsrs	r3, r3, #1
 80027ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80027b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027b2:	f003 0301 	and.w	r3, r3, #1
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d002      	beq.n	80027c0 <HAL_PCD_EP_DB_Transmit+0x1f4>
 80027ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027bc:	3301      	adds	r3, #1
 80027be:	62bb      	str	r3, [r7, #40]	; 0x28
 80027c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	029b      	lsls	r3, r3, #10
 80027c6:	b29a      	uxth	r2, r3
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	801a      	strh	r2, [r3, #0]
 80027cc:	e032      	b.n	8002834 <HAL_PCD_EP_DB_Transmit+0x268>
 80027ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027d0:	095b      	lsrs	r3, r3, #5
 80027d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80027d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027d6:	f003 031f 	and.w	r3, r3, #31
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d102      	bne.n	80027e4 <HAL_PCD_EP_DB_Transmit+0x218>
 80027de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027e0:	3b01      	subs	r3, #1
 80027e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80027e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	029b      	lsls	r3, r3, #10
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027f4:	b29a      	uxth	r2, r3
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	801a      	strh	r2, [r3, #0]
 80027fa:	e01b      	b.n	8002834 <HAL_PCD_EP_DB_Transmit+0x268>
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	785b      	ldrb	r3, [r3, #1]
 8002800:	2b01      	cmp	r3, #1
 8002802:	d117      	bne.n	8002834 <HAL_PCD_EP_DB_Transmit+0x268>
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	623b      	str	r3, [r7, #32]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002812:	b29b      	uxth	r3, r3
 8002814:	461a      	mov	r2, r3
 8002816:	6a3b      	ldr	r3, [r7, #32]
 8002818:	4413      	add	r3, r2
 800281a:	623b      	str	r3, [r7, #32]
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	011a      	lsls	r2, r3, #4
 8002822:	6a3b      	ldr	r3, [r7, #32]
 8002824:	4413      	add	r3, r2
 8002826:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800282a:	61fb      	str	r3, [r7, #28]
 800282c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800282e:	b29a      	uxth	r2, r3
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	6818      	ldr	r0, [r3, #0]
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	6959      	ldr	r1, [r3, #20]
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	891a      	ldrh	r2, [r3, #8]
 8002840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002842:	b29b      	uxth	r3, r3
 8002844:	f002 ff3c 	bl	80056c0 <USB_WritePMA>
 8002848:	e130      	b.n	8002aac <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002852:	b29b      	uxth	r3, r3
 8002854:	461a      	mov	r2, r3
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	00db      	lsls	r3, r3, #3
 800285c:	4413      	add	r3, r2
 800285e:	3306      	adds	r3, #6
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	68fa      	ldr	r2, [r7, #12]
 8002864:	6812      	ldr	r2, [r2, #0]
 8002866:	4413      	add	r3, r2
 8002868:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800286c:	881b      	ldrh	r3, [r3, #0]
 800286e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002872:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	699a      	ldr	r2, [r3, #24]
 8002878:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800287a:	429a      	cmp	r2, r3
 800287c:	d306      	bcc.n	800288c <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	699a      	ldr	r2, [r3, #24]
 8002882:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002884:	1ad2      	subs	r2, r2, r3
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	619a      	str	r2, [r3, #24]
 800288a:	e002      	b.n	8002892 <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	2200      	movs	r2, #0
 8002890:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	699b      	ldr	r3, [r3, #24]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d12c      	bne.n	80028f4 <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	4619      	mov	r1, r3
 80028a0:	68f8      	ldr	r0, [r7, #12]
 80028a2:	f004 fd52 	bl	800734a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80028a6:	88fb      	ldrh	r3, [r7, #6]
 80028a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	f040 80fd 	bne.w	8002aac <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	461a      	mov	r2, r3
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	4413      	add	r3, r2
 80028c0:	881b      	ldrh	r3, [r3, #0]
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028cc:	84fb      	strh	r3, [r7, #38]	; 0x26
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	461a      	mov	r2, r3
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	441a      	add	r2, r3
 80028dc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80028de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	8013      	strh	r3, [r2, #0]
 80028f2:	e0db      	b.n	8002aac <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80028f4:	88fb      	ldrh	r3, [r7, #6]
 80028f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d11f      	bne.n	800293e <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	461a      	mov	r2, r3
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	4413      	add	r3, r2
 800290c:	881b      	ldrh	r3, [r3, #0]
 800290e:	b29b      	uxth	r3, r3
 8002910:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002914:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002918:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	461a      	mov	r2, r3
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	441a      	add	r2, r3
 8002928:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800292a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800292e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002932:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002936:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800293a:	b29b      	uxth	r3, r3
 800293c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002944:	2b01      	cmp	r3, #1
 8002946:	f040 80b1 	bne.w	8002aac <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	695a      	ldr	r2, [r3, #20]
 800294e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002950:	441a      	add	r2, r3
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	69da      	ldr	r2, [r3, #28]
 800295a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800295c:	441a      	add	r2, r3
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	6a1a      	ldr	r2, [r3, #32]
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	429a      	cmp	r2, r3
 800296c:	d309      	bcc.n	8002982 <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	6a1a      	ldr	r2, [r3, #32]
 8002978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800297a:	1ad2      	subs	r2, r2, r3
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	621a      	str	r2, [r3, #32]
 8002980:	e014      	b.n	80029ac <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	6a1b      	ldr	r3, [r3, #32]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d106      	bne.n	8002998 <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 800298a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800298c:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	2200      	movs	r2, #0
 8002992:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002996:	e009      	b.n	80029ac <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	6a1b      	ldr	r3, [r3, #32]
 800299c:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	2200      	movs	r2, #0
 80029a2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	637b      	str	r3, [r7, #52]	; 0x34
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	785b      	ldrb	r3, [r3, #1]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d155      	bne.n	8002a66 <HAL_PCD_EP_DB_Transmit+0x49a>
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	647b      	str	r3, [r7, #68]	; 0x44
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	461a      	mov	r2, r3
 80029cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029ce:	4413      	add	r3, r2
 80029d0:	647b      	str	r3, [r7, #68]	; 0x44
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	011a      	lsls	r2, r3, #4
 80029d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029da:	4413      	add	r3, r2
 80029dc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80029e0:	643b      	str	r3, [r7, #64]	; 0x40
 80029e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d112      	bne.n	8002a0e <HAL_PCD_EP_DB_Transmit+0x442>
 80029e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029ea:	881b      	ldrh	r3, [r3, #0]
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80029f2:	b29a      	uxth	r2, r3
 80029f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029f6:	801a      	strh	r2, [r3, #0]
 80029f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029fa:	881b      	ldrh	r3, [r3, #0]
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a06:	b29a      	uxth	r2, r3
 8002a08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a0a:	801a      	strh	r2, [r3, #0]
 8002a0c:	e044      	b.n	8002a98 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a10:	2b3e      	cmp	r3, #62	; 0x3e
 8002a12:	d811      	bhi.n	8002a38 <HAL_PCD_EP_DB_Transmit+0x46c>
 8002a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a16:	085b      	lsrs	r3, r3, #1
 8002a18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a1c:	f003 0301 	and.w	r3, r3, #1
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d002      	beq.n	8002a2a <HAL_PCD_EP_DB_Transmit+0x45e>
 8002a24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a26:	3301      	adds	r3, #1
 8002a28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	029b      	lsls	r3, r3, #10
 8002a30:	b29a      	uxth	r2, r3
 8002a32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a34:	801a      	strh	r2, [r3, #0]
 8002a36:	e02f      	b.n	8002a98 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a3a:	095b      	lsrs	r3, r3, #5
 8002a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a40:	f003 031f 	and.w	r3, r3, #31
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d102      	bne.n	8002a4e <HAL_PCD_EP_DB_Transmit+0x482>
 8002a48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	029b      	lsls	r3, r3, #10
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a5e:	b29a      	uxth	r2, r3
 8002a60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a62:	801a      	strh	r2, [r3, #0]
 8002a64:	e018      	b.n	8002a98 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	785b      	ldrb	r3, [r3, #1]
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d114      	bne.n	8002a98 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	461a      	mov	r2, r3
 8002a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a7c:	4413      	add	r3, r2
 8002a7e:	637b      	str	r3, [r7, #52]	; 0x34
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	011a      	lsls	r2, r3, #4
 8002a86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a88:	4413      	add	r3, r2
 8002a8a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002a8e:	633b      	str	r3, [r7, #48]	; 0x30
 8002a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a92:	b29a      	uxth	r2, r3
 8002a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a96:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6818      	ldr	r0, [r3, #0]
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	6959      	ldr	r1, [r3, #20]
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	895a      	ldrh	r2, [r3, #10]
 8002aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	f002 fe0a 	bl	80056c0 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	4413      	add	r3, r2
 8002aba:	881b      	ldrh	r3, [r3, #0]
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ac2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ac6:	823b      	strh	r3, [r7, #16]
 8002ac8:	8a3b      	ldrh	r3, [r7, #16]
 8002aca:	f083 0310 	eor.w	r3, r3, #16
 8002ace:	823b      	strh	r3, [r7, #16]
 8002ad0:	8a3b      	ldrh	r3, [r7, #16]
 8002ad2:	f083 0320 	eor.w	r3, r3, #32
 8002ad6:	823b      	strh	r3, [r7, #16]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	461a      	mov	r2, r3
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	441a      	add	r2, r3
 8002ae6:	8a3b      	ldrh	r3, [r7, #16]
 8002ae8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002aec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002af0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002af4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3748      	adds	r7, #72	; 0x48
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002b06:	b480      	push	{r7}
 8002b08:	b087      	sub	sp, #28
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	60f8      	str	r0, [r7, #12]
 8002b0e:	607b      	str	r3, [r7, #4]
 8002b10:	460b      	mov	r3, r1
 8002b12:	817b      	strh	r3, [r7, #10]
 8002b14:	4613      	mov	r3, r2
 8002b16:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002b18:	897b      	ldrh	r3, [r7, #10]
 8002b1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d00b      	beq.n	8002b3c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b24:	897b      	ldrh	r3, [r7, #10]
 8002b26:	f003 0307 	and.w	r3, r3, #7
 8002b2a:	1c5a      	adds	r2, r3, #1
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	4413      	add	r3, r2
 8002b32:	00db      	lsls	r3, r3, #3
 8002b34:	68fa      	ldr	r2, [r7, #12]
 8002b36:	4413      	add	r3, r2
 8002b38:	617b      	str	r3, [r7, #20]
 8002b3a:	e009      	b.n	8002b50 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002b3c:	897a      	ldrh	r2, [r7, #10]
 8002b3e:	4613      	mov	r3, r2
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	4413      	add	r3, r2
 8002b44:	00db      	lsls	r3, r3, #3
 8002b46:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002b4a:	68fa      	ldr	r2, [r7, #12]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002b50:	893b      	ldrh	r3, [r7, #8]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d107      	bne.n	8002b66 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	b29a      	uxth	r2, r3
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	80da      	strh	r2, [r3, #6]
 8002b64:	e00b      	b.n	8002b7e <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	2201      	movs	r2, #1
 8002b6a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	b29a      	uxth	r2, r3
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	0c1b      	lsrs	r3, r3, #16
 8002b78:	b29a      	uxth	r2, r3
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002b7e:	2300      	movs	r3, #0
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	371c      	adds	r7, #28
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bc80      	pop	{r7}
 8002b88:	4770      	bx	lr
	...

08002b8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b086      	sub	sp, #24
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d101      	bne.n	8002b9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e26c      	b.n	8003078 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0301 	and.w	r3, r3, #1
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	f000 8087 	beq.w	8002cba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bac:	4b92      	ldr	r3, [pc, #584]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f003 030c 	and.w	r3, r3, #12
 8002bb4:	2b04      	cmp	r3, #4
 8002bb6:	d00c      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002bb8:	4b8f      	ldr	r3, [pc, #572]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f003 030c 	and.w	r3, r3, #12
 8002bc0:	2b08      	cmp	r3, #8
 8002bc2:	d112      	bne.n	8002bea <HAL_RCC_OscConfig+0x5e>
 8002bc4:	4b8c      	ldr	r3, [pc, #560]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bd0:	d10b      	bne.n	8002bea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bd2:	4b89      	ldr	r3, [pc, #548]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d06c      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x12c>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d168      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e246      	b.n	8003078 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bf2:	d106      	bne.n	8002c02 <HAL_RCC_OscConfig+0x76>
 8002bf4:	4b80      	ldr	r3, [pc, #512]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a7f      	ldr	r2, [pc, #508]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002bfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bfe:	6013      	str	r3, [r2, #0]
 8002c00:	e02e      	b.n	8002c60 <HAL_RCC_OscConfig+0xd4>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d10c      	bne.n	8002c24 <HAL_RCC_OscConfig+0x98>
 8002c0a:	4b7b      	ldr	r3, [pc, #492]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a7a      	ldr	r2, [pc, #488]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002c10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c14:	6013      	str	r3, [r2, #0]
 8002c16:	4b78      	ldr	r3, [pc, #480]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a77      	ldr	r2, [pc, #476]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002c1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c20:	6013      	str	r3, [r2, #0]
 8002c22:	e01d      	b.n	8002c60 <HAL_RCC_OscConfig+0xd4>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c2c:	d10c      	bne.n	8002c48 <HAL_RCC_OscConfig+0xbc>
 8002c2e:	4b72      	ldr	r3, [pc, #456]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a71      	ldr	r2, [pc, #452]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002c34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c38:	6013      	str	r3, [r2, #0]
 8002c3a:	4b6f      	ldr	r3, [pc, #444]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a6e      	ldr	r2, [pc, #440]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002c40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c44:	6013      	str	r3, [r2, #0]
 8002c46:	e00b      	b.n	8002c60 <HAL_RCC_OscConfig+0xd4>
 8002c48:	4b6b      	ldr	r3, [pc, #428]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a6a      	ldr	r2, [pc, #424]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002c4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c52:	6013      	str	r3, [r2, #0]
 8002c54:	4b68      	ldr	r3, [pc, #416]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a67      	ldr	r2, [pc, #412]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002c5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c5e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d013      	beq.n	8002c90 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c68:	f7fd fd72 	bl	8000750 <HAL_GetTick>
 8002c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c6e:	e008      	b.n	8002c82 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c70:	f7fd fd6e 	bl	8000750 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b64      	cmp	r3, #100	; 0x64
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e1fa      	b.n	8003078 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c82:	4b5d      	ldr	r3, [pc, #372]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d0f0      	beq.n	8002c70 <HAL_RCC_OscConfig+0xe4>
 8002c8e:	e014      	b.n	8002cba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c90:	f7fd fd5e 	bl	8000750 <HAL_GetTick>
 8002c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c96:	e008      	b.n	8002caa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c98:	f7fd fd5a 	bl	8000750 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b64      	cmp	r3, #100	; 0x64
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e1e6      	b.n	8003078 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002caa:	4b53      	ldr	r3, [pc, #332]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1f0      	bne.n	8002c98 <HAL_RCC_OscConfig+0x10c>
 8002cb6:	e000      	b.n	8002cba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d063      	beq.n	8002d8e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cc6:	4b4c      	ldr	r3, [pc, #304]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f003 030c 	and.w	r3, r3, #12
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d00b      	beq.n	8002cea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002cd2:	4b49      	ldr	r3, [pc, #292]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f003 030c 	and.w	r3, r3, #12
 8002cda:	2b08      	cmp	r3, #8
 8002cdc:	d11c      	bne.n	8002d18 <HAL_RCC_OscConfig+0x18c>
 8002cde:	4b46      	ldr	r3, [pc, #280]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d116      	bne.n	8002d18 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cea:	4b43      	ldr	r3, [pc, #268]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d005      	beq.n	8002d02 <HAL_RCC_OscConfig+0x176>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d001      	beq.n	8002d02 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e1ba      	b.n	8003078 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d02:	4b3d      	ldr	r3, [pc, #244]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	00db      	lsls	r3, r3, #3
 8002d10:	4939      	ldr	r1, [pc, #228]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002d12:	4313      	orrs	r3, r2
 8002d14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d16:	e03a      	b.n	8002d8e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	691b      	ldr	r3, [r3, #16]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d020      	beq.n	8002d62 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d20:	4b36      	ldr	r3, [pc, #216]	; (8002dfc <HAL_RCC_OscConfig+0x270>)
 8002d22:	2201      	movs	r2, #1
 8002d24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d26:	f7fd fd13 	bl	8000750 <HAL_GetTick>
 8002d2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d2c:	e008      	b.n	8002d40 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d2e:	f7fd fd0f 	bl	8000750 <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d901      	bls.n	8002d40 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e19b      	b.n	8003078 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d40:	4b2d      	ldr	r3, [pc, #180]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0302 	and.w	r3, r3, #2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d0f0      	beq.n	8002d2e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d4c:	4b2a      	ldr	r3, [pc, #168]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	695b      	ldr	r3, [r3, #20]
 8002d58:	00db      	lsls	r3, r3, #3
 8002d5a:	4927      	ldr	r1, [pc, #156]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	600b      	str	r3, [r1, #0]
 8002d60:	e015      	b.n	8002d8e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d62:	4b26      	ldr	r3, [pc, #152]	; (8002dfc <HAL_RCC_OscConfig+0x270>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d68:	f7fd fcf2 	bl	8000750 <HAL_GetTick>
 8002d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d6e:	e008      	b.n	8002d82 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d70:	f7fd fcee 	bl	8000750 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e17a      	b.n	8003078 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d82:	4b1d      	ldr	r3, [pc, #116]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d1f0      	bne.n	8002d70 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0308 	and.w	r3, r3, #8
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d03a      	beq.n	8002e10 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	699b      	ldr	r3, [r3, #24]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d019      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002da2:	4b17      	ldr	r3, [pc, #92]	; (8002e00 <HAL_RCC_OscConfig+0x274>)
 8002da4:	2201      	movs	r2, #1
 8002da6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002da8:	f7fd fcd2 	bl	8000750 <HAL_GetTick>
 8002dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dae:	e008      	b.n	8002dc2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002db0:	f7fd fcce 	bl	8000750 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e15a      	b.n	8003078 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dc2:	4b0d      	ldr	r3, [pc, #52]	; (8002df8 <HAL_RCC_OscConfig+0x26c>)
 8002dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc6:	f003 0302 	and.w	r3, r3, #2
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d0f0      	beq.n	8002db0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002dce:	2001      	movs	r0, #1
 8002dd0:	f000 fac6 	bl	8003360 <RCC_Delay>
 8002dd4:	e01c      	b.n	8002e10 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dd6:	4b0a      	ldr	r3, [pc, #40]	; (8002e00 <HAL_RCC_OscConfig+0x274>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ddc:	f7fd fcb8 	bl	8000750 <HAL_GetTick>
 8002de0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002de2:	e00f      	b.n	8002e04 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002de4:	f7fd fcb4 	bl	8000750 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d908      	bls.n	8002e04 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e140      	b.n	8003078 <HAL_RCC_OscConfig+0x4ec>
 8002df6:	bf00      	nop
 8002df8:	40021000 	.word	0x40021000
 8002dfc:	42420000 	.word	0x42420000
 8002e00:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e04:	4b9e      	ldr	r3, [pc, #632]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e08:	f003 0302 	and.w	r3, r3, #2
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d1e9      	bne.n	8002de4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0304 	and.w	r3, r3, #4
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	f000 80a6 	beq.w	8002f6a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e22:	4b97      	ldr	r3, [pc, #604]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002e24:	69db      	ldr	r3, [r3, #28]
 8002e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d10d      	bne.n	8002e4a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e2e:	4b94      	ldr	r3, [pc, #592]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002e30:	69db      	ldr	r3, [r3, #28]
 8002e32:	4a93      	ldr	r2, [pc, #588]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002e34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e38:	61d3      	str	r3, [r2, #28]
 8002e3a:	4b91      	ldr	r3, [pc, #580]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002e3c:	69db      	ldr	r3, [r3, #28]
 8002e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e42:	60bb      	str	r3, [r7, #8]
 8002e44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e46:	2301      	movs	r3, #1
 8002e48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e4a:	4b8e      	ldr	r3, [pc, #568]	; (8003084 <HAL_RCC_OscConfig+0x4f8>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d118      	bne.n	8002e88 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e56:	4b8b      	ldr	r3, [pc, #556]	; (8003084 <HAL_RCC_OscConfig+0x4f8>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a8a      	ldr	r2, [pc, #552]	; (8003084 <HAL_RCC_OscConfig+0x4f8>)
 8002e5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e62:	f7fd fc75 	bl	8000750 <HAL_GetTick>
 8002e66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e68:	e008      	b.n	8002e7c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e6a:	f7fd fc71 	bl	8000750 <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	2b64      	cmp	r3, #100	; 0x64
 8002e76:	d901      	bls.n	8002e7c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e0fd      	b.n	8003078 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e7c:	4b81      	ldr	r3, [pc, #516]	; (8003084 <HAL_RCC_OscConfig+0x4f8>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d0f0      	beq.n	8002e6a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d106      	bne.n	8002e9e <HAL_RCC_OscConfig+0x312>
 8002e90:	4b7b      	ldr	r3, [pc, #492]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002e92:	6a1b      	ldr	r3, [r3, #32]
 8002e94:	4a7a      	ldr	r2, [pc, #488]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002e96:	f043 0301 	orr.w	r3, r3, #1
 8002e9a:	6213      	str	r3, [r2, #32]
 8002e9c:	e02d      	b.n	8002efa <HAL_RCC_OscConfig+0x36e>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d10c      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x334>
 8002ea6:	4b76      	ldr	r3, [pc, #472]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002ea8:	6a1b      	ldr	r3, [r3, #32]
 8002eaa:	4a75      	ldr	r2, [pc, #468]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002eac:	f023 0301 	bic.w	r3, r3, #1
 8002eb0:	6213      	str	r3, [r2, #32]
 8002eb2:	4b73      	ldr	r3, [pc, #460]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002eb4:	6a1b      	ldr	r3, [r3, #32]
 8002eb6:	4a72      	ldr	r2, [pc, #456]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002eb8:	f023 0304 	bic.w	r3, r3, #4
 8002ebc:	6213      	str	r3, [r2, #32]
 8002ebe:	e01c      	b.n	8002efa <HAL_RCC_OscConfig+0x36e>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	2b05      	cmp	r3, #5
 8002ec6:	d10c      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x356>
 8002ec8:	4b6d      	ldr	r3, [pc, #436]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002eca:	6a1b      	ldr	r3, [r3, #32]
 8002ecc:	4a6c      	ldr	r2, [pc, #432]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002ece:	f043 0304 	orr.w	r3, r3, #4
 8002ed2:	6213      	str	r3, [r2, #32]
 8002ed4:	4b6a      	ldr	r3, [pc, #424]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002ed6:	6a1b      	ldr	r3, [r3, #32]
 8002ed8:	4a69      	ldr	r2, [pc, #420]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002eda:	f043 0301 	orr.w	r3, r3, #1
 8002ede:	6213      	str	r3, [r2, #32]
 8002ee0:	e00b      	b.n	8002efa <HAL_RCC_OscConfig+0x36e>
 8002ee2:	4b67      	ldr	r3, [pc, #412]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002ee4:	6a1b      	ldr	r3, [r3, #32]
 8002ee6:	4a66      	ldr	r2, [pc, #408]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002ee8:	f023 0301 	bic.w	r3, r3, #1
 8002eec:	6213      	str	r3, [r2, #32]
 8002eee:	4b64      	ldr	r3, [pc, #400]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002ef0:	6a1b      	ldr	r3, [r3, #32]
 8002ef2:	4a63      	ldr	r2, [pc, #396]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002ef4:	f023 0304 	bic.w	r3, r3, #4
 8002ef8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d015      	beq.n	8002f2e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f02:	f7fd fc25 	bl	8000750 <HAL_GetTick>
 8002f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f08:	e00a      	b.n	8002f20 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f0a:	f7fd fc21 	bl	8000750 <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d901      	bls.n	8002f20 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e0ab      	b.n	8003078 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f20:	4b57      	ldr	r3, [pc, #348]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002f22:	6a1b      	ldr	r3, [r3, #32]
 8002f24:	f003 0302 	and.w	r3, r3, #2
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d0ee      	beq.n	8002f0a <HAL_RCC_OscConfig+0x37e>
 8002f2c:	e014      	b.n	8002f58 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f2e:	f7fd fc0f 	bl	8000750 <HAL_GetTick>
 8002f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f34:	e00a      	b.n	8002f4c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f36:	f7fd fc0b 	bl	8000750 <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d901      	bls.n	8002f4c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	e095      	b.n	8003078 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f4c:	4b4c      	ldr	r3, [pc, #304]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002f4e:	6a1b      	ldr	r3, [r3, #32]
 8002f50:	f003 0302 	and.w	r3, r3, #2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d1ee      	bne.n	8002f36 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f58:	7dfb      	ldrb	r3, [r7, #23]
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d105      	bne.n	8002f6a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f5e:	4b48      	ldr	r3, [pc, #288]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002f60:	69db      	ldr	r3, [r3, #28]
 8002f62:	4a47      	ldr	r2, [pc, #284]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002f64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f68:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	69db      	ldr	r3, [r3, #28]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	f000 8081 	beq.w	8003076 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f74:	4b42      	ldr	r3, [pc, #264]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f003 030c 	and.w	r3, r3, #12
 8002f7c:	2b08      	cmp	r3, #8
 8002f7e:	d061      	beq.n	8003044 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	69db      	ldr	r3, [r3, #28]
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d146      	bne.n	8003016 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f88:	4b3f      	ldr	r3, [pc, #252]	; (8003088 <HAL_RCC_OscConfig+0x4fc>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f8e:	f7fd fbdf 	bl	8000750 <HAL_GetTick>
 8002f92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f94:	e008      	b.n	8002fa8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f96:	f7fd fbdb 	bl	8000750 <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d901      	bls.n	8002fa8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e067      	b.n	8003078 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fa8:	4b35      	ldr	r3, [pc, #212]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d1f0      	bne.n	8002f96 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a1b      	ldr	r3, [r3, #32]
 8002fb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fbc:	d108      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002fbe:	4b30      	ldr	r3, [pc, #192]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	492d      	ldr	r1, [pc, #180]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fd0:	4b2b      	ldr	r3, [pc, #172]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a19      	ldr	r1, [r3, #32]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe0:	430b      	orrs	r3, r1
 8002fe2:	4927      	ldr	r1, [pc, #156]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fe8:	4b27      	ldr	r3, [pc, #156]	; (8003088 <HAL_RCC_OscConfig+0x4fc>)
 8002fea:	2201      	movs	r2, #1
 8002fec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fee:	f7fd fbaf 	bl	8000750 <HAL_GetTick>
 8002ff2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ff4:	e008      	b.n	8003008 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ff6:	f7fd fbab 	bl	8000750 <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	2b02      	cmp	r3, #2
 8003002:	d901      	bls.n	8003008 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e037      	b.n	8003078 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003008:	4b1d      	ldr	r3, [pc, #116]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d0f0      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x46a>
 8003014:	e02f      	b.n	8003076 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003016:	4b1c      	ldr	r3, [pc, #112]	; (8003088 <HAL_RCC_OscConfig+0x4fc>)
 8003018:	2200      	movs	r2, #0
 800301a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800301c:	f7fd fb98 	bl	8000750 <HAL_GetTick>
 8003020:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003022:	e008      	b.n	8003036 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003024:	f7fd fb94 	bl	8000750 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	2b02      	cmp	r3, #2
 8003030:	d901      	bls.n	8003036 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e020      	b.n	8003078 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003036:	4b12      	ldr	r3, [pc, #72]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d1f0      	bne.n	8003024 <HAL_RCC_OscConfig+0x498>
 8003042:	e018      	b.n	8003076 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	69db      	ldr	r3, [r3, #28]
 8003048:	2b01      	cmp	r3, #1
 800304a:	d101      	bne.n	8003050 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e013      	b.n	8003078 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003050:	4b0b      	ldr	r3, [pc, #44]	; (8003080 <HAL_RCC_OscConfig+0x4f4>)
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a1b      	ldr	r3, [r3, #32]
 8003060:	429a      	cmp	r2, r3
 8003062:	d106      	bne.n	8003072 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800306e:	429a      	cmp	r2, r3
 8003070:	d001      	beq.n	8003076 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e000      	b.n	8003078 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003076:	2300      	movs	r3, #0
}
 8003078:	4618      	mov	r0, r3
 800307a:	3718      	adds	r7, #24
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	40021000 	.word	0x40021000
 8003084:	40007000 	.word	0x40007000
 8003088:	42420060 	.word	0x42420060

0800308c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d101      	bne.n	80030a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e0d0      	b.n	8003242 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030a0:	4b6a      	ldr	r3, [pc, #424]	; (800324c <HAL_RCC_ClockConfig+0x1c0>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0307 	and.w	r3, r3, #7
 80030a8:	683a      	ldr	r2, [r7, #0]
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d910      	bls.n	80030d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ae:	4b67      	ldr	r3, [pc, #412]	; (800324c <HAL_RCC_ClockConfig+0x1c0>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f023 0207 	bic.w	r2, r3, #7
 80030b6:	4965      	ldr	r1, [pc, #404]	; (800324c <HAL_RCC_ClockConfig+0x1c0>)
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030be:	4b63      	ldr	r3, [pc, #396]	; (800324c <HAL_RCC_ClockConfig+0x1c0>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0307 	and.w	r3, r3, #7
 80030c6:	683a      	ldr	r2, [r7, #0]
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d001      	beq.n	80030d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e0b8      	b.n	8003242 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0302 	and.w	r3, r3, #2
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d020      	beq.n	800311e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0304 	and.w	r3, r3, #4
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d005      	beq.n	80030f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030e8:	4b59      	ldr	r3, [pc, #356]	; (8003250 <HAL_RCC_ClockConfig+0x1c4>)
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	4a58      	ldr	r2, [pc, #352]	; (8003250 <HAL_RCC_ClockConfig+0x1c4>)
 80030ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80030f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0308 	and.w	r3, r3, #8
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d005      	beq.n	800310c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003100:	4b53      	ldr	r3, [pc, #332]	; (8003250 <HAL_RCC_ClockConfig+0x1c4>)
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	4a52      	ldr	r2, [pc, #328]	; (8003250 <HAL_RCC_ClockConfig+0x1c4>)
 8003106:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800310a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800310c:	4b50      	ldr	r3, [pc, #320]	; (8003250 <HAL_RCC_ClockConfig+0x1c4>)
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	494d      	ldr	r1, [pc, #308]	; (8003250 <HAL_RCC_ClockConfig+0x1c4>)
 800311a:	4313      	orrs	r3, r2
 800311c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	2b00      	cmp	r3, #0
 8003128:	d040      	beq.n	80031ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	2b01      	cmp	r3, #1
 8003130:	d107      	bne.n	8003142 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003132:	4b47      	ldr	r3, [pc, #284]	; (8003250 <HAL_RCC_ClockConfig+0x1c4>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d115      	bne.n	800316a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e07f      	b.n	8003242 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	2b02      	cmp	r3, #2
 8003148:	d107      	bne.n	800315a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800314a:	4b41      	ldr	r3, [pc, #260]	; (8003250 <HAL_RCC_ClockConfig+0x1c4>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d109      	bne.n	800316a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e073      	b.n	8003242 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800315a:	4b3d      	ldr	r3, [pc, #244]	; (8003250 <HAL_RCC_ClockConfig+0x1c4>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	2b00      	cmp	r3, #0
 8003164:	d101      	bne.n	800316a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e06b      	b.n	8003242 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800316a:	4b39      	ldr	r3, [pc, #228]	; (8003250 <HAL_RCC_ClockConfig+0x1c4>)
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f023 0203 	bic.w	r2, r3, #3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	4936      	ldr	r1, [pc, #216]	; (8003250 <HAL_RCC_ClockConfig+0x1c4>)
 8003178:	4313      	orrs	r3, r2
 800317a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800317c:	f7fd fae8 	bl	8000750 <HAL_GetTick>
 8003180:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003182:	e00a      	b.n	800319a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003184:	f7fd fae4 	bl	8000750 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003192:	4293      	cmp	r3, r2
 8003194:	d901      	bls.n	800319a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e053      	b.n	8003242 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800319a:	4b2d      	ldr	r3, [pc, #180]	; (8003250 <HAL_RCC_ClockConfig+0x1c4>)
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f003 020c 	and.w	r2, r3, #12
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d1eb      	bne.n	8003184 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031ac:	4b27      	ldr	r3, [pc, #156]	; (800324c <HAL_RCC_ClockConfig+0x1c0>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0307 	and.w	r3, r3, #7
 80031b4:	683a      	ldr	r2, [r7, #0]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d210      	bcs.n	80031dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ba:	4b24      	ldr	r3, [pc, #144]	; (800324c <HAL_RCC_ClockConfig+0x1c0>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f023 0207 	bic.w	r2, r3, #7
 80031c2:	4922      	ldr	r1, [pc, #136]	; (800324c <HAL_RCC_ClockConfig+0x1c0>)
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ca:	4b20      	ldr	r3, [pc, #128]	; (800324c <HAL_RCC_ClockConfig+0x1c0>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0307 	and.w	r3, r3, #7
 80031d2:	683a      	ldr	r2, [r7, #0]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d001      	beq.n	80031dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e032      	b.n	8003242 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0304 	and.w	r3, r3, #4
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d008      	beq.n	80031fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031e8:	4b19      	ldr	r3, [pc, #100]	; (8003250 <HAL_RCC_ClockConfig+0x1c4>)
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	4916      	ldr	r1, [pc, #88]	; (8003250 <HAL_RCC_ClockConfig+0x1c4>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0308 	and.w	r3, r3, #8
 8003202:	2b00      	cmp	r3, #0
 8003204:	d009      	beq.n	800321a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003206:	4b12      	ldr	r3, [pc, #72]	; (8003250 <HAL_RCC_ClockConfig+0x1c4>)
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	691b      	ldr	r3, [r3, #16]
 8003212:	00db      	lsls	r3, r3, #3
 8003214:	490e      	ldr	r1, [pc, #56]	; (8003250 <HAL_RCC_ClockConfig+0x1c4>)
 8003216:	4313      	orrs	r3, r2
 8003218:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800321a:	f000 f821 	bl	8003260 <HAL_RCC_GetSysClockFreq>
 800321e:	4601      	mov	r1, r0
 8003220:	4b0b      	ldr	r3, [pc, #44]	; (8003250 <HAL_RCC_ClockConfig+0x1c4>)
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	091b      	lsrs	r3, r3, #4
 8003226:	f003 030f 	and.w	r3, r3, #15
 800322a:	4a0a      	ldr	r2, [pc, #40]	; (8003254 <HAL_RCC_ClockConfig+0x1c8>)
 800322c:	5cd3      	ldrb	r3, [r2, r3]
 800322e:	fa21 f303 	lsr.w	r3, r1, r3
 8003232:	4a09      	ldr	r2, [pc, #36]	; (8003258 <HAL_RCC_ClockConfig+0x1cc>)
 8003234:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003236:	4b09      	ldr	r3, [pc, #36]	; (800325c <HAL_RCC_ClockConfig+0x1d0>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4618      	mov	r0, r3
 800323c:	f7fd fa46 	bl	80006cc <HAL_InitTick>

  return HAL_OK;
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	3710      	adds	r7, #16
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	40022000 	.word	0x40022000
 8003250:	40021000 	.word	0x40021000
 8003254:	0800815c 	.word	0x0800815c
 8003258:	20000000 	.word	0x20000000
 800325c:	20000004 	.word	0x20000004

08003260 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003260:	b490      	push	{r4, r7}
 8003262:	b08a      	sub	sp, #40	; 0x28
 8003264:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003266:	4b2a      	ldr	r3, [pc, #168]	; (8003310 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003268:	1d3c      	adds	r4, r7, #4
 800326a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800326c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003270:	4b28      	ldr	r3, [pc, #160]	; (8003314 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003272:	881b      	ldrh	r3, [r3, #0]
 8003274:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003276:	2300      	movs	r3, #0
 8003278:	61fb      	str	r3, [r7, #28]
 800327a:	2300      	movs	r3, #0
 800327c:	61bb      	str	r3, [r7, #24]
 800327e:	2300      	movs	r3, #0
 8003280:	627b      	str	r3, [r7, #36]	; 0x24
 8003282:	2300      	movs	r3, #0
 8003284:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003286:	2300      	movs	r3, #0
 8003288:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800328a:	4b23      	ldr	r3, [pc, #140]	; (8003318 <HAL_RCC_GetSysClockFreq+0xb8>)
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	f003 030c 	and.w	r3, r3, #12
 8003296:	2b04      	cmp	r3, #4
 8003298:	d002      	beq.n	80032a0 <HAL_RCC_GetSysClockFreq+0x40>
 800329a:	2b08      	cmp	r3, #8
 800329c:	d003      	beq.n	80032a6 <HAL_RCC_GetSysClockFreq+0x46>
 800329e:	e02d      	b.n	80032fc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80032a0:	4b1e      	ldr	r3, [pc, #120]	; (800331c <HAL_RCC_GetSysClockFreq+0xbc>)
 80032a2:	623b      	str	r3, [r7, #32]
      break;
 80032a4:	e02d      	b.n	8003302 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	0c9b      	lsrs	r3, r3, #18
 80032aa:	f003 030f 	and.w	r3, r3, #15
 80032ae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80032b2:	4413      	add	r3, r2
 80032b4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80032b8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d013      	beq.n	80032ec <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80032c4:	4b14      	ldr	r3, [pc, #80]	; (8003318 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	0c5b      	lsrs	r3, r3, #17
 80032ca:	f003 0301 	and.w	r3, r3, #1
 80032ce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80032d2:	4413      	add	r3, r2
 80032d4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80032d8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	4a0f      	ldr	r2, [pc, #60]	; (800331c <HAL_RCC_GetSysClockFreq+0xbc>)
 80032de:	fb02 f203 	mul.w	r2, r2, r3
 80032e2:	69bb      	ldr	r3, [r7, #24]
 80032e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032e8:	627b      	str	r3, [r7, #36]	; 0x24
 80032ea:	e004      	b.n	80032f6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	4a0c      	ldr	r2, [pc, #48]	; (8003320 <HAL_RCC_GetSysClockFreq+0xc0>)
 80032f0:	fb02 f303 	mul.w	r3, r2, r3
 80032f4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80032f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f8:	623b      	str	r3, [r7, #32]
      break;
 80032fa:	e002      	b.n	8003302 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80032fc:	4b07      	ldr	r3, [pc, #28]	; (800331c <HAL_RCC_GetSysClockFreq+0xbc>)
 80032fe:	623b      	str	r3, [r7, #32]
      break;
 8003300:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003302:	6a3b      	ldr	r3, [r7, #32]
}
 8003304:	4618      	mov	r0, r3
 8003306:	3728      	adds	r7, #40	; 0x28
 8003308:	46bd      	mov	sp, r7
 800330a:	bc90      	pop	{r4, r7}
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	080080ec 	.word	0x080080ec
 8003314:	080080fc 	.word	0x080080fc
 8003318:	40021000 	.word	0x40021000
 800331c:	007a1200 	.word	0x007a1200
 8003320:	003d0900 	.word	0x003d0900

08003324 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003324:	b480      	push	{r7}
 8003326:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003328:	4b02      	ldr	r3, [pc, #8]	; (8003334 <HAL_RCC_GetHCLKFreq+0x10>)
 800332a:	681b      	ldr	r3, [r3, #0]
}
 800332c:	4618      	mov	r0, r3
 800332e:	46bd      	mov	sp, r7
 8003330:	bc80      	pop	{r7}
 8003332:	4770      	bx	lr
 8003334:	20000000 	.word	0x20000000

08003338 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800333c:	f7ff fff2 	bl	8003324 <HAL_RCC_GetHCLKFreq>
 8003340:	4601      	mov	r1, r0
 8003342:	4b05      	ldr	r3, [pc, #20]	; (8003358 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	0adb      	lsrs	r3, r3, #11
 8003348:	f003 0307 	and.w	r3, r3, #7
 800334c:	4a03      	ldr	r2, [pc, #12]	; (800335c <HAL_RCC_GetPCLK2Freq+0x24>)
 800334e:	5cd3      	ldrb	r3, [r2, r3]
 8003350:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003354:	4618      	mov	r0, r3
 8003356:	bd80      	pop	{r7, pc}
 8003358:	40021000 	.word	0x40021000
 800335c:	0800816c 	.word	0x0800816c

08003360 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003360:	b480      	push	{r7}
 8003362:	b085      	sub	sp, #20
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003368:	4b0a      	ldr	r3, [pc, #40]	; (8003394 <RCC_Delay+0x34>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a0a      	ldr	r2, [pc, #40]	; (8003398 <RCC_Delay+0x38>)
 800336e:	fba2 2303 	umull	r2, r3, r2, r3
 8003372:	0a5b      	lsrs	r3, r3, #9
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	fb02 f303 	mul.w	r3, r2, r3
 800337a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800337c:	bf00      	nop
  }
  while (Delay --);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	1e5a      	subs	r2, r3, #1
 8003382:	60fa      	str	r2, [r7, #12]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d1f9      	bne.n	800337c <RCC_Delay+0x1c>
}
 8003388:	bf00      	nop
 800338a:	3714      	adds	r7, #20
 800338c:	46bd      	mov	sp, r7
 800338e:	bc80      	pop	{r7}
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop
 8003394:	20000000 	.word	0x20000000
 8003398:	10624dd3 	.word	0x10624dd3

0800339c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b086      	sub	sp, #24
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80033a4:	2300      	movs	r3, #0
 80033a6:	613b      	str	r3, [r7, #16]
 80033a8:	2300      	movs	r3, #0
 80033aa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0301 	and.w	r3, r3, #1
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d07d      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80033b8:	2300      	movs	r3, #0
 80033ba:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033bc:	4b4f      	ldr	r3, [pc, #316]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033be:	69db      	ldr	r3, [r3, #28]
 80033c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d10d      	bne.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033c8:	4b4c      	ldr	r3, [pc, #304]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ca:	69db      	ldr	r3, [r3, #28]
 80033cc:	4a4b      	ldr	r2, [pc, #300]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033d2:	61d3      	str	r3, [r2, #28]
 80033d4:	4b49      	ldr	r3, [pc, #292]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033d6:	69db      	ldr	r3, [r3, #28]
 80033d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033dc:	60bb      	str	r3, [r7, #8]
 80033de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033e0:	2301      	movs	r3, #1
 80033e2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033e4:	4b46      	ldr	r3, [pc, #280]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d118      	bne.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033f0:	4b43      	ldr	r3, [pc, #268]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a42      	ldr	r2, [pc, #264]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033fc:	f7fd f9a8 	bl	8000750 <HAL_GetTick>
 8003400:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003402:	e008      	b.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003404:	f7fd f9a4 	bl	8000750 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	2b64      	cmp	r3, #100	; 0x64
 8003410:	d901      	bls.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e06d      	b.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003416:	4b3a      	ldr	r3, [pc, #232]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800341e:	2b00      	cmp	r3, #0
 8003420:	d0f0      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003422:	4b36      	ldr	r3, [pc, #216]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800342a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d02e      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800343a:	68fa      	ldr	r2, [r7, #12]
 800343c:	429a      	cmp	r2, r3
 800343e:	d027      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003440:	4b2e      	ldr	r3, [pc, #184]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003442:	6a1b      	ldr	r3, [r3, #32]
 8003444:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003448:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800344a:	4b2e      	ldr	r3, [pc, #184]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800344c:	2201      	movs	r2, #1
 800344e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003450:	4b2c      	ldr	r3, [pc, #176]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003452:	2200      	movs	r2, #0
 8003454:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003456:	4a29      	ldr	r2, [pc, #164]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f003 0301 	and.w	r3, r3, #1
 8003462:	2b00      	cmp	r3, #0
 8003464:	d014      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003466:	f7fd f973 	bl	8000750 <HAL_GetTick>
 800346a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800346c:	e00a      	b.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800346e:	f7fd f96f 	bl	8000750 <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	f241 3288 	movw	r2, #5000	; 0x1388
 800347c:	4293      	cmp	r3, r2
 800347e:	d901      	bls.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003480:	2303      	movs	r3, #3
 8003482:	e036      	b.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003484:	4b1d      	ldr	r3, [pc, #116]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003486:	6a1b      	ldr	r3, [r3, #32]
 8003488:	f003 0302 	and.w	r3, r3, #2
 800348c:	2b00      	cmp	r3, #0
 800348e:	d0ee      	beq.n	800346e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003490:	4b1a      	ldr	r3, [pc, #104]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003492:	6a1b      	ldr	r3, [r3, #32]
 8003494:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	4917      	ldr	r1, [pc, #92]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80034a2:	7dfb      	ldrb	r3, [r7, #23]
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d105      	bne.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034a8:	4b14      	ldr	r3, [pc, #80]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034aa:	69db      	ldr	r3, [r3, #28]
 80034ac:	4a13      	ldr	r2, [pc, #76]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034b2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0302 	and.w	r3, r3, #2
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d008      	beq.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034c0:	4b0e      	ldr	r3, [pc, #56]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	490b      	ldr	r1, [pc, #44]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0310 	and.w	r3, r3, #16
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d008      	beq.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80034de:	4b07      	ldr	r3, [pc, #28]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	4904      	ldr	r1, [pc, #16]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ec:	4313      	orrs	r3, r2
 80034ee:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3718      	adds	r7, #24
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	40021000 	.word	0x40021000
 8003500:	40007000 	.word	0x40007000
 8003504:	42420440 	.word	0x42420440

08003508 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003508:	b590      	push	{r4, r7, lr}
 800350a:	b08d      	sub	sp, #52	; 0x34
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003510:	4b55      	ldr	r3, [pc, #340]	; (8003668 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003512:	f107 040c 	add.w	r4, r7, #12
 8003516:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003518:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800351c:	4b53      	ldr	r3, [pc, #332]	; (800366c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800351e:	881b      	ldrh	r3, [r3, #0]
 8003520:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003522:	2300      	movs	r3, #0
 8003524:	627b      	str	r3, [r7, #36]	; 0x24
 8003526:	2300      	movs	r3, #0
 8003528:	62fb      	str	r3, [r7, #44]	; 0x2c
 800352a:	2300      	movs	r3, #0
 800352c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800352e:	2300      	movs	r3, #0
 8003530:	61fb      	str	r3, [r7, #28]
 8003532:	2300      	movs	r3, #0
 8003534:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2b02      	cmp	r3, #2
 800353a:	d07f      	beq.n	800363c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800353c:	2b10      	cmp	r3, #16
 800353e:	d002      	beq.n	8003546 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8003540:	2b01      	cmp	r3, #1
 8003542:	d048      	beq.n	80035d6 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003544:	e08b      	b.n	800365e <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8003546:	4b4a      	ldr	r3, [pc, #296]	; (8003670 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800354c:	4b48      	ldr	r3, [pc, #288]	; (8003670 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d07f      	beq.n	8003658 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	0c9b      	lsrs	r3, r3, #18
 800355c:	f003 030f 	and.w	r3, r3, #15
 8003560:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003564:	4413      	add	r3, r2
 8003566:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800356a:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d018      	beq.n	80035a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003576:	4b3e      	ldr	r3, [pc, #248]	; (8003670 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	0c5b      	lsrs	r3, r3, #17
 800357c:	f003 0301 	and.w	r3, r3, #1
 8003580:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003584:	4413      	add	r3, r2
 8003586:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800358a:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00d      	beq.n	80035b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003596:	4a37      	ldr	r2, [pc, #220]	; (8003674 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8003598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359a:	fbb2 f2f3 	udiv	r2, r2, r3
 800359e:	6a3b      	ldr	r3, [r7, #32]
 80035a0:	fb02 f303 	mul.w	r3, r2, r3
 80035a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035a6:	e004      	b.n	80035b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80035a8:	6a3b      	ldr	r3, [r7, #32]
 80035aa:	4a33      	ldr	r2, [pc, #204]	; (8003678 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80035ac:	fb02 f303 	mul.w	r3, r2, r3
 80035b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80035b2:	4b2f      	ldr	r3, [pc, #188]	; (8003670 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035be:	d102      	bne.n	80035c6 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 80035c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035c2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80035c4:	e048      	b.n	8003658 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 80035c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035c8:	005b      	lsls	r3, r3, #1
 80035ca:	4a2c      	ldr	r2, [pc, #176]	; (800367c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80035cc:	fba2 2303 	umull	r2, r3, r2, r3
 80035d0:	085b      	lsrs	r3, r3, #1
 80035d2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80035d4:	e040      	b.n	8003658 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 80035d6:	4b26      	ldr	r3, [pc, #152]	; (8003670 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80035d8:	6a1b      	ldr	r3, [r3, #32]
 80035da:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035e6:	d108      	bne.n	80035fa <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	f003 0302 	and.w	r3, r3, #2
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d003      	beq.n	80035fa <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 80035f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80035f8:	e01f      	b.n	800363a <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003600:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003604:	d109      	bne.n	800361a <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8003606:	4b1a      	ldr	r3, [pc, #104]	; (8003670 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	2b00      	cmp	r3, #0
 8003610:	d003      	beq.n	800361a <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8003612:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003616:	62bb      	str	r3, [r7, #40]	; 0x28
 8003618:	e00f      	b.n	800363a <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003620:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003624:	d11a      	bne.n	800365c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8003626:	4b12      	ldr	r3, [pc, #72]	; (8003670 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d014      	beq.n	800365c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8003632:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003636:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003638:	e010      	b.n	800365c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 800363a:	e00f      	b.n	800365c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800363c:	f7ff fe7c 	bl	8003338 <HAL_RCC_GetPCLK2Freq>
 8003640:	4602      	mov	r2, r0
 8003642:	4b0b      	ldr	r3, [pc, #44]	; (8003670 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	0b9b      	lsrs	r3, r3, #14
 8003648:	f003 0303 	and.w	r3, r3, #3
 800364c:	3301      	adds	r3, #1
 800364e:	005b      	lsls	r3, r3, #1
 8003650:	fbb2 f3f3 	udiv	r3, r2, r3
 8003654:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003656:	e002      	b.n	800365e <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8003658:	bf00      	nop
 800365a:	e000      	b.n	800365e <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 800365c:	bf00      	nop
    }
  }
  return (frequency);
 800365e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003660:	4618      	mov	r0, r3
 8003662:	3734      	adds	r7, #52	; 0x34
 8003664:	46bd      	mov	sp, r7
 8003666:	bd90      	pop	{r4, r7, pc}
 8003668:	08008100 	.word	0x08008100
 800366c:	08008110 	.word	0x08008110
 8003670:	40021000 	.word	0x40021000
 8003674:	007a1200 	.word	0x007a1200
 8003678:	003d0900 	.word	0x003d0900
 800367c:	aaaaaaab 	.word	0xaaaaaaab

08003680 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003680:	b084      	sub	sp, #16
 8003682:	b480      	push	{r7}
 8003684:	b083      	sub	sp, #12
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
 800368a:	f107 0014 	add.w	r0, r7, #20
 800368e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003692:	2300      	movs	r3, #0
}
 8003694:	4618      	mov	r0, r3
 8003696:	370c      	adds	r7, #12
 8003698:	46bd      	mov	sp, r7
 800369a:	bc80      	pop	{r7}
 800369c:	b004      	add	sp, #16
 800369e:	4770      	bx	lr

080036a0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b085      	sub	sp, #20
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80036b0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80036b4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	b29a      	uxth	r2, r3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3714      	adds	r7, #20
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bc80      	pop	{r7}
 80036ca:	4770      	bx	lr

080036cc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b085      	sub	sp, #20
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80036d4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80036d8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80036e0:	b29a      	uxth	r2, r3
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	43db      	mvns	r3, r3
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	4013      	ands	r3, r2
 80036ec:	b29a      	uxth	r2, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3714      	adds	r7, #20
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bc80      	pop	{r7}
 80036fe:	4770      	bx	lr

08003700 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	460b      	mov	r3, r1
 800370a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800370c:	2300      	movs	r3, #0
}
 800370e:	4618      	mov	r0, r3
 8003710:	370c      	adds	r7, #12
 8003712:	46bd      	mov	sp, r7
 8003714:	bc80      	pop	{r7}
 8003716:	4770      	bx	lr

08003718 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003718:	b084      	sub	sp, #16
 800371a:	b480      	push	{r7}
 800371c:	b083      	sub	sp, #12
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
 8003722:	f107 0014 	add.w	r0, r7, #20
 8003726:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2201      	movs	r2, #1
 800372e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800374a:	2300      	movs	r3, #0
}
 800374c:	4618      	mov	r0, r3
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	bc80      	pop	{r7}
 8003754:	b004      	add	sp, #16
 8003756:	4770      	bx	lr

08003758 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003758:	b480      	push	{r7}
 800375a:	b09b      	sub	sp, #108	; 0x6c
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003762:	2300      	movs	r3, #0
 8003764:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	4413      	add	r3, r2
 8003772:	881b      	ldrh	r3, [r3, #0]
 8003774:	b29b      	uxth	r3, r3
 8003776:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800377a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800377e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	78db      	ldrb	r3, [r3, #3]
 8003786:	2b03      	cmp	r3, #3
 8003788:	d81f      	bhi.n	80037ca <USB_ActivateEndpoint+0x72>
 800378a:	a201      	add	r2, pc, #4	; (adr r2, 8003790 <USB_ActivateEndpoint+0x38>)
 800378c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003790:	080037a1 	.word	0x080037a1
 8003794:	080037bd 	.word	0x080037bd
 8003798:	080037d3 	.word	0x080037d3
 800379c:	080037af 	.word	0x080037af
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80037a0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80037a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037a8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80037ac:	e012      	b.n	80037d4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80037ae:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80037b2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80037b6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80037ba:	e00b      	b.n	80037d4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80037bc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80037c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037c4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80037c8:	e004      	b.n	80037d4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80037d0:	e000      	b.n	80037d4 <USB_ActivateEndpoint+0x7c>
      break;
 80037d2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	441a      	add	r2, r3
 80037de:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80037e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	4413      	add	r3, r2
 8003800:	881b      	ldrh	r3, [r3, #0]
 8003802:	b29b      	uxth	r3, r3
 8003804:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003808:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800380c:	b29a      	uxth	r2, r3
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	781b      	ldrb	r3, [r3, #0]
 8003812:	b29b      	uxth	r3, r3
 8003814:	4313      	orrs	r3, r2
 8003816:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	441a      	add	r2, r3
 8003824:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003828:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800382c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003830:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003838:	b29b      	uxth	r3, r3
 800383a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	7b1b      	ldrb	r3, [r3, #12]
 8003840:	2b00      	cmp	r3, #0
 8003842:	f040 8149 	bne.w	8003ad8 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	785b      	ldrb	r3, [r3, #1]
 800384a:	2b00      	cmp	r3, #0
 800384c:	f000 8084 	beq.w	8003958 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	617b      	str	r3, [r7, #20]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800385a:	b29b      	uxth	r3, r3
 800385c:	461a      	mov	r2, r3
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	4413      	add	r3, r2
 8003862:	617b      	str	r3, [r7, #20]
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	011a      	lsls	r2, r3, #4
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	4413      	add	r3, r2
 800386e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003872:	613b      	str	r3, [r7, #16]
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	88db      	ldrh	r3, [r3, #6]
 8003878:	085b      	lsrs	r3, r3, #1
 800387a:	b29b      	uxth	r3, r3
 800387c:	005b      	lsls	r3, r3, #1
 800387e:	b29a      	uxth	r2, r3
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	4413      	add	r3, r2
 800388e:	881b      	ldrh	r3, [r3, #0]
 8003890:	81fb      	strh	r3, [r7, #14]
 8003892:	89fb      	ldrh	r3, [r7, #14]
 8003894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003898:	2b00      	cmp	r3, #0
 800389a:	d01b      	beq.n	80038d4 <USB_ActivateEndpoint+0x17c>
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	4413      	add	r3, r2
 80038a6:	881b      	ldrh	r3, [r3, #0]
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038b2:	81bb      	strh	r3, [r7, #12]
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	441a      	add	r2, r3
 80038be:	89bb      	ldrh	r3, [r7, #12]
 80038c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038cc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	78db      	ldrb	r3, [r3, #3]
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d020      	beq.n	800391e <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	4413      	add	r3, r2
 80038e6:	881b      	ldrh	r3, [r3, #0]
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038f2:	813b      	strh	r3, [r7, #8]
 80038f4:	893b      	ldrh	r3, [r7, #8]
 80038f6:	f083 0320 	eor.w	r3, r3, #32
 80038fa:	813b      	strh	r3, [r7, #8]
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	441a      	add	r2, r3
 8003906:	893b      	ldrh	r3, [r7, #8]
 8003908:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800390c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003910:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003914:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003918:	b29b      	uxth	r3, r3
 800391a:	8013      	strh	r3, [r2, #0]
 800391c:	e27f      	b.n	8003e1e <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	781b      	ldrb	r3, [r3, #0]
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	4413      	add	r3, r2
 8003928:	881b      	ldrh	r3, [r3, #0]
 800392a:	b29b      	uxth	r3, r3
 800392c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003930:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003934:	817b      	strh	r3, [r7, #10]
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	441a      	add	r2, r3
 8003940:	897b      	ldrh	r3, [r7, #10]
 8003942:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003946:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800394a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800394e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003952:	b29b      	uxth	r3, r3
 8003954:	8013      	strh	r3, [r2, #0]
 8003956:	e262      	b.n	8003e1e <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003962:	b29b      	uxth	r3, r3
 8003964:	461a      	mov	r2, r3
 8003966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003968:	4413      	add	r3, r2
 800396a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	011a      	lsls	r2, r3, #4
 8003972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003974:	4413      	add	r3, r2
 8003976:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800397a:	62bb      	str	r3, [r7, #40]	; 0x28
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	88db      	ldrh	r3, [r3, #6]
 8003980:	085b      	lsrs	r3, r3, #1
 8003982:	b29b      	uxth	r3, r3
 8003984:	005b      	lsls	r3, r3, #1
 8003986:	b29a      	uxth	r2, r3
 8003988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800398a:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	627b      	str	r3, [r7, #36]	; 0x24
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003996:	b29b      	uxth	r3, r3
 8003998:	461a      	mov	r2, r3
 800399a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399c:	4413      	add	r3, r2
 800399e:	627b      	str	r3, [r7, #36]	; 0x24
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	011a      	lsls	r2, r3, #4
 80039a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a8:	4413      	add	r3, r2
 80039aa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80039ae:	623b      	str	r3, [r7, #32]
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	691b      	ldr	r3, [r3, #16]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d112      	bne.n	80039de <USB_ActivateEndpoint+0x286>
 80039b8:	6a3b      	ldr	r3, [r7, #32]
 80039ba:	881b      	ldrh	r3, [r3, #0]
 80039bc:	b29b      	uxth	r3, r3
 80039be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80039c2:	b29a      	uxth	r2, r3
 80039c4:	6a3b      	ldr	r3, [r7, #32]
 80039c6:	801a      	strh	r2, [r3, #0]
 80039c8:	6a3b      	ldr	r3, [r7, #32]
 80039ca:	881b      	ldrh	r3, [r3, #0]
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039d6:	b29a      	uxth	r2, r3
 80039d8:	6a3b      	ldr	r3, [r7, #32]
 80039da:	801a      	strh	r2, [r3, #0]
 80039dc:	e02f      	b.n	8003a3e <USB_ActivateEndpoint+0x2e6>
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	691b      	ldr	r3, [r3, #16]
 80039e2:	2b3e      	cmp	r3, #62	; 0x3e
 80039e4:	d813      	bhi.n	8003a0e <USB_ActivateEndpoint+0x2b6>
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	085b      	lsrs	r3, r3, #1
 80039ec:	663b      	str	r3, [r7, #96]	; 0x60
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	f003 0301 	and.w	r3, r3, #1
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d002      	beq.n	8003a00 <USB_ActivateEndpoint+0x2a8>
 80039fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80039fc:	3301      	adds	r3, #1
 80039fe:	663b      	str	r3, [r7, #96]	; 0x60
 8003a00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	029b      	lsls	r3, r3, #10
 8003a06:	b29a      	uxth	r2, r3
 8003a08:	6a3b      	ldr	r3, [r7, #32]
 8003a0a:	801a      	strh	r2, [r3, #0]
 8003a0c:	e017      	b.n	8003a3e <USB_ActivateEndpoint+0x2e6>
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	691b      	ldr	r3, [r3, #16]
 8003a12:	095b      	lsrs	r3, r3, #5
 8003a14:	663b      	str	r3, [r7, #96]	; 0x60
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	691b      	ldr	r3, [r3, #16]
 8003a1a:	f003 031f 	and.w	r3, r3, #31
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d102      	bne.n	8003a28 <USB_ActivateEndpoint+0x2d0>
 8003a22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a24:	3b01      	subs	r3, #1
 8003a26:	663b      	str	r3, [r7, #96]	; 0x60
 8003a28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	029b      	lsls	r3, r3, #10
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a38:	b29a      	uxth	r2, r3
 8003a3a:	6a3b      	ldr	r3, [r7, #32]
 8003a3c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	4413      	add	r3, r2
 8003a48:	881b      	ldrh	r3, [r3, #0]
 8003a4a:	83fb      	strh	r3, [r7, #30]
 8003a4c:	8bfb      	ldrh	r3, [r7, #30]
 8003a4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d01b      	beq.n	8003a8e <USB_ActivateEndpoint+0x336>
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	4413      	add	r3, r2
 8003a60:	881b      	ldrh	r3, [r3, #0]
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a6c:	83bb      	strh	r3, [r7, #28]
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	441a      	add	r2, r3
 8003a78:	8bbb      	ldrh	r3, [r7, #28]
 8003a7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a82:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	781b      	ldrb	r3, [r3, #0]
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	4413      	add	r3, r2
 8003a98:	881b      	ldrh	r3, [r3, #0]
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003aa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aa4:	837b      	strh	r3, [r7, #26]
 8003aa6:	8b7b      	ldrh	r3, [r7, #26]
 8003aa8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003aac:	837b      	strh	r3, [r7, #26]
 8003aae:	8b7b      	ldrh	r3, [r7, #26]
 8003ab0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003ab4:	837b      	strh	r3, [r7, #26]
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	441a      	add	r2, r3
 8003ac0:	8b7b      	ldrh	r3, [r7, #26]
 8003ac2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ac6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003aca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ace:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	8013      	strh	r3, [r2, #0]
 8003ad6:	e1a2      	b.n	8003e1e <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	4413      	add	r3, r2
 8003ae2:	881b      	ldrh	r3, [r3, #0]
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003aea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aee:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	781b      	ldrb	r3, [r3, #0]
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	441a      	add	r2, r3
 8003afc:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003b00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b08:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003b0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	65bb      	str	r3, [r7, #88]	; 0x58
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	461a      	mov	r2, r3
 8003b22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b24:	4413      	add	r3, r2
 8003b26:	65bb      	str	r3, [r7, #88]	; 0x58
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	011a      	lsls	r2, r3, #4
 8003b2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b30:	4413      	add	r3, r2
 8003b32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b36:	657b      	str	r3, [r7, #84]	; 0x54
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	891b      	ldrh	r3, [r3, #8]
 8003b3c:	085b      	lsrs	r3, r3, #1
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	005b      	lsls	r3, r3, #1
 8003b42:	b29a      	uxth	r2, r3
 8003b44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b46:	801a      	strh	r2, [r3, #0]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	653b      	str	r3, [r7, #80]	; 0x50
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	461a      	mov	r2, r3
 8003b56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b58:	4413      	add	r3, r2
 8003b5a:	653b      	str	r3, [r7, #80]	; 0x50
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	011a      	lsls	r2, r3, #4
 8003b62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b64:	4413      	add	r3, r2
 8003b66:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003b6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	895b      	ldrh	r3, [r3, #10]
 8003b70:	085b      	lsrs	r3, r3, #1
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	005b      	lsls	r3, r3, #1
 8003b76:	b29a      	uxth	r2, r3
 8003b78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b7a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	785b      	ldrb	r3, [r3, #1]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	f040 8091 	bne.w	8003ca8 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	4413      	add	r3, r2
 8003b90:	881b      	ldrh	r3, [r3, #0]
 8003b92:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8003b94:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003b96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d01b      	beq.n	8003bd6 <USB_ActivateEndpoint+0x47e>
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	4413      	add	r3, r2
 8003ba8:	881b      	ldrh	r3, [r3, #0]
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bb4:	877b      	strh	r3, [r7, #58]	; 0x3a
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	441a      	add	r2, r3
 8003bc0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003bc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003bc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003bca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003bce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	4413      	add	r3, r2
 8003be0:	881b      	ldrh	r3, [r3, #0]
 8003be2:	873b      	strh	r3, [r7, #56]	; 0x38
 8003be4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d01b      	beq.n	8003c26 <USB_ActivateEndpoint+0x4ce>
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	4413      	add	r3, r2
 8003bf8:	881b      	ldrh	r3, [r3, #0]
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c04:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	441a      	add	r2, r3
 8003c10:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003c12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c1e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	781b      	ldrb	r3, [r3, #0]
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	4413      	add	r3, r2
 8003c30:	881b      	ldrh	r3, [r3, #0]
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c3c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003c3e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003c40:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003c44:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003c46:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003c48:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003c4c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	441a      	add	r2, r3
 8003c58:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003c5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	781b      	ldrb	r3, [r3, #0]
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	4413      	add	r3, r2
 8003c78:	881b      	ldrh	r3, [r3, #0]
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c84:	867b      	strh	r3, [r7, #50]	; 0x32
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	441a      	add	r2, r3
 8003c90:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003c92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	8013      	strh	r3, [r2, #0]
 8003ca6:	e0ba      	b.n	8003e1e <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	781b      	ldrb	r3, [r3, #0]
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	4413      	add	r3, r2
 8003cb2:	881b      	ldrh	r3, [r3, #0]
 8003cb4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003cb8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003cbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d01d      	beq.n	8003d00 <USB_ActivateEndpoint+0x5a8>
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	4413      	add	r3, r2
 8003cce:	881b      	ldrh	r3, [r3, #0]
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cda:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	441a      	add	r2, r3
 8003ce8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003cec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cf0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cf4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003cf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	4413      	add	r3, r2
 8003d0a:	881b      	ldrh	r3, [r3, #0]
 8003d0c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003d10:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d01d      	beq.n	8003d58 <USB_ActivateEndpoint+0x600>
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	4413      	add	r3, r2
 8003d26:	881b      	ldrh	r3, [r3, #0]
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d32:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	781b      	ldrb	r3, [r3, #0]
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	441a      	add	r2, r3
 8003d40:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003d44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d50:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	78db      	ldrb	r3, [r3, #3]
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d024      	beq.n	8003daa <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	4413      	add	r3, r2
 8003d6a:	881b      	ldrh	r3, [r3, #0]
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d76:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003d7a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003d7e:	f083 0320 	eor.w	r3, r3, #32
 8003d82:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	781b      	ldrb	r3, [r3, #0]
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	441a      	add	r2, r3
 8003d90:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003d94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003da0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	8013      	strh	r3, [r2, #0]
 8003da8:	e01d      	b.n	8003de6 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	4413      	add	r3, r2
 8003db4:	881b      	ldrh	r3, [r3, #0]
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dc0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	441a      	add	r2, r3
 8003dce:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003dd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003dd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003dda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	4413      	add	r3, r2
 8003df0:	881b      	ldrh	r3, [r3, #0]
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003df8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dfc:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	441a      	add	r2, r3
 8003e08:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003e0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8003e1e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	376c      	adds	r7, #108	; 0x6c
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bc80      	pop	{r7}
 8003e2a:	4770      	bx	lr

08003e2c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b08d      	sub	sp, #52	; 0x34
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	7b1b      	ldrb	r3, [r3, #12]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	f040 808e 	bne.w	8003f5c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	785b      	ldrb	r3, [r3, #1]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d044      	beq.n	8003ed2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	4413      	add	r3, r2
 8003e52:	881b      	ldrh	r3, [r3, #0]
 8003e54:	81bb      	strh	r3, [r7, #12]
 8003e56:	89bb      	ldrh	r3, [r7, #12]
 8003e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d01b      	beq.n	8003e98 <USB_DeactivateEndpoint+0x6c>
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	4413      	add	r3, r2
 8003e6a:	881b      	ldrh	r3, [r3, #0]
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e76:	817b      	strh	r3, [r7, #10]
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	441a      	add	r2, r3
 8003e82:	897b      	ldrh	r3, [r7, #10]
 8003e84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e90:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	781b      	ldrb	r3, [r3, #0]
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	4413      	add	r3, r2
 8003ea2:	881b      	ldrh	r3, [r3, #0]
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003eaa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003eae:	813b      	strh	r3, [r7, #8]
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	441a      	add	r2, r3
 8003eba:	893b      	ldrh	r3, [r7, #8]
 8003ebc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ec0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ec4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ec8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	8013      	strh	r3, [r2, #0]
 8003ed0:	e192      	b.n	80041f8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	781b      	ldrb	r3, [r3, #0]
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	4413      	add	r3, r2
 8003edc:	881b      	ldrh	r3, [r3, #0]
 8003ede:	827b      	strh	r3, [r7, #18]
 8003ee0:	8a7b      	ldrh	r3, [r7, #18]
 8003ee2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d01b      	beq.n	8003f22 <USB_DeactivateEndpoint+0xf6>
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	4413      	add	r3, r2
 8003ef4:	881b      	ldrh	r3, [r3, #0]
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003efc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f00:	823b      	strh	r3, [r7, #16]
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	441a      	add	r2, r3
 8003f0c:	8a3b      	ldrh	r3, [r7, #16]
 8003f0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f16:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	4413      	add	r3, r2
 8003f2c:	881b      	ldrh	r3, [r3, #0]
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f38:	81fb      	strh	r3, [r7, #14]
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	441a      	add	r2, r3
 8003f44:	89fb      	ldrh	r3, [r7, #14]
 8003f46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	8013      	strh	r3, [r2, #0]
 8003f5a:	e14d      	b.n	80041f8 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	785b      	ldrb	r3, [r3, #1]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	f040 80a5 	bne.w	80040b0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	4413      	add	r3, r2
 8003f70:	881b      	ldrh	r3, [r3, #0]
 8003f72:	843b      	strh	r3, [r7, #32]
 8003f74:	8c3b      	ldrh	r3, [r7, #32]
 8003f76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d01b      	beq.n	8003fb6 <USB_DeactivateEndpoint+0x18a>
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	4413      	add	r3, r2
 8003f88:	881b      	ldrh	r3, [r3, #0]
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f94:	83fb      	strh	r3, [r7, #30]
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	441a      	add	r2, r3
 8003fa0:	8bfb      	ldrh	r3, [r7, #30]
 8003fa2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fa6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003faa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003fae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	4413      	add	r3, r2
 8003fc0:	881b      	ldrh	r3, [r3, #0]
 8003fc2:	83bb      	strh	r3, [r7, #28]
 8003fc4:	8bbb      	ldrh	r3, [r7, #28]
 8003fc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d01b      	beq.n	8004006 <USB_DeactivateEndpoint+0x1da>
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	4413      	add	r3, r2
 8003fd8:	881b      	ldrh	r3, [r3, #0]
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fe0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fe4:	837b      	strh	r3, [r7, #26]
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	441a      	add	r2, r3
 8003ff0:	8b7b      	ldrh	r3, [r7, #26]
 8003ff2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ff6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ffa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ffe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004002:	b29b      	uxth	r3, r3
 8004004:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	4413      	add	r3, r2
 8004010:	881b      	ldrh	r3, [r3, #0]
 8004012:	b29b      	uxth	r3, r3
 8004014:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004018:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800401c:	833b      	strh	r3, [r7, #24]
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	441a      	add	r2, r3
 8004028:	8b3b      	ldrh	r3, [r7, #24]
 800402a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800402e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004032:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004036:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800403a:	b29b      	uxth	r3, r3
 800403c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	4413      	add	r3, r2
 8004048:	881b      	ldrh	r3, [r3, #0]
 800404a:	b29b      	uxth	r3, r3
 800404c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004050:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004054:	82fb      	strh	r3, [r7, #22]
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	781b      	ldrb	r3, [r3, #0]
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	441a      	add	r2, r3
 8004060:	8afb      	ldrh	r3, [r7, #22]
 8004062:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004066:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800406a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800406e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004072:	b29b      	uxth	r3, r3
 8004074:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	781b      	ldrb	r3, [r3, #0]
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	4413      	add	r3, r2
 8004080:	881b      	ldrh	r3, [r3, #0]
 8004082:	b29b      	uxth	r3, r3
 8004084:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004088:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800408c:	82bb      	strh	r3, [r7, #20]
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	781b      	ldrb	r3, [r3, #0]
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	441a      	add	r2, r3
 8004098:	8abb      	ldrh	r3, [r7, #20]
 800409a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800409e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	8013      	strh	r3, [r2, #0]
 80040ae:	e0a3      	b.n	80041f8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	781b      	ldrb	r3, [r3, #0]
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	4413      	add	r3, r2
 80040ba:	881b      	ldrh	r3, [r3, #0]
 80040bc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80040be:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80040c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d01b      	beq.n	8004100 <USB_DeactivateEndpoint+0x2d4>
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	781b      	ldrb	r3, [r3, #0]
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	4413      	add	r3, r2
 80040d2:	881b      	ldrh	r3, [r3, #0]
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040de:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	441a      	add	r2, r3
 80040ea:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80040ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80040f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	4413      	add	r3, r2
 800410a:	881b      	ldrh	r3, [r3, #0]
 800410c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800410e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004114:	2b00      	cmp	r3, #0
 8004116:	d01b      	beq.n	8004150 <USB_DeactivateEndpoint+0x324>
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	4413      	add	r3, r2
 8004122:	881b      	ldrh	r3, [r3, #0]
 8004124:	b29b      	uxth	r3, r3
 8004126:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800412a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800412e:	853b      	strh	r3, [r7, #40]	; 0x28
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	441a      	add	r2, r3
 800413a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800413c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004140:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004144:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004148:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800414c:	b29b      	uxth	r3, r3
 800414e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	4413      	add	r3, r2
 800415a:	881b      	ldrh	r3, [r3, #0]
 800415c:	b29b      	uxth	r3, r3
 800415e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004166:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	441a      	add	r2, r3
 8004172:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004174:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004178:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800417c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004180:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004184:	b29b      	uxth	r3, r3
 8004186:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	781b      	ldrb	r3, [r3, #0]
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	4413      	add	r3, r2
 8004192:	881b      	ldrh	r3, [r3, #0]
 8004194:	b29b      	uxth	r3, r3
 8004196:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800419a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800419e:	84bb      	strh	r3, [r7, #36]	; 0x24
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	441a      	add	r2, r3
 80041aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80041ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041bc:	b29b      	uxth	r3, r3
 80041be:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	781b      	ldrb	r3, [r3, #0]
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	4413      	add	r3, r2
 80041ca:	881b      	ldrh	r3, [r3, #0]
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041d6:	847b      	strh	r3, [r7, #34]	; 0x22
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	781b      	ldrb	r3, [r3, #0]
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	441a      	add	r2, r3
 80041e2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80041e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80041f8:	2300      	movs	r3, #0
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3734      	adds	r7, #52	; 0x34
 80041fe:	46bd      	mov	sp, r7
 8004200:	bc80      	pop	{r7}
 8004202:	4770      	bx	lr

08004204 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b0c4      	sub	sp, #272	; 0x110
 8004208:	af00      	add	r7, sp, #0
 800420a:	1d3b      	adds	r3, r7, #4
 800420c:	6018      	str	r0, [r3, #0]
 800420e:	463b      	mov	r3, r7
 8004210:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004212:	463b      	mov	r3, r7
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	785b      	ldrb	r3, [r3, #1]
 8004218:	2b01      	cmp	r3, #1
 800421a:	f040 8557 	bne.w	8004ccc <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800421e:	463b      	mov	r3, r7
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	699a      	ldr	r2, [r3, #24]
 8004224:	463b      	mov	r3, r7
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	429a      	cmp	r2, r3
 800422c:	d905      	bls.n	800423a <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800422e:	463b      	mov	r3, r7
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	691b      	ldr	r3, [r3, #16]
 8004234:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004238:	e004      	b.n	8004244 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800423a:	463b      	mov	r3, r7
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	699b      	ldr	r3, [r3, #24]
 8004240:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004244:	463b      	mov	r3, r7
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	7b1b      	ldrb	r3, [r3, #12]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d12c      	bne.n	80042a8 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800424e:	463b      	mov	r3, r7
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	6959      	ldr	r1, [r3, #20]
 8004254:	463b      	mov	r3, r7
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	88da      	ldrh	r2, [r3, #6]
 800425a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800425e:	b29b      	uxth	r3, r3
 8004260:	1d38      	adds	r0, r7, #4
 8004262:	6800      	ldr	r0, [r0, #0]
 8004264:	f001 fa2c 	bl	80056c0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004268:	1d3b      	adds	r3, r7, #4
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	617b      	str	r3, [r7, #20]
 800426e:	1d3b      	adds	r3, r7, #4
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004276:	b29b      	uxth	r3, r3
 8004278:	461a      	mov	r2, r3
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	4413      	add	r3, r2
 800427e:	617b      	str	r3, [r7, #20]
 8004280:	463b      	mov	r3, r7
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	781b      	ldrb	r3, [r3, #0]
 8004286:	011a      	lsls	r2, r3, #4
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	4413      	add	r3, r2
 800428c:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004290:	f107 0310 	add.w	r3, r7, #16
 8004294:	601a      	str	r2, [r3, #0]
 8004296:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800429a:	b29a      	uxth	r2, r3
 800429c:	f107 0310 	add.w	r3, r7, #16
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	801a      	strh	r2, [r3, #0]
 80042a4:	f000 bcdd 	b.w	8004c62 <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80042a8:	463b      	mov	r3, r7
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	78db      	ldrb	r3, [r3, #3]
 80042ae:	2b02      	cmp	r3, #2
 80042b0:	f040 8347 	bne.w	8004942 <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80042b4:	463b      	mov	r3, r7
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	6a1a      	ldr	r2, [r3, #32]
 80042ba:	463b      	mov	r3, r7
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	691b      	ldr	r3, [r3, #16]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	f240 82eb 	bls.w	800489c <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80042c6:	1d3b      	adds	r3, r7, #4
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	463b      	mov	r3, r7
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	4413      	add	r3, r2
 80042d4:	881b      	ldrh	r3, [r3, #0]
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042e0:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 80042e4:	1d3b      	adds	r3, r7, #4
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	463b      	mov	r3, r7
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	441a      	add	r2, r3
 80042f2:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80042f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042fe:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004302:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004306:	b29b      	uxth	r3, r3
 8004308:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800430a:	463b      	mov	r3, r7
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	6a1a      	ldr	r2, [r3, #32]
 8004310:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004314:	1ad2      	subs	r2, r2, r3
 8004316:	463b      	mov	r3, r7
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800431c:	1d3b      	adds	r3, r7, #4
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	463b      	mov	r3, r7
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	4413      	add	r3, r2
 800432a:	881b      	ldrh	r3, [r3, #0]
 800432c:	b29b      	uxth	r3, r3
 800432e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004332:	2b00      	cmp	r3, #0
 8004334:	f000 8159 	beq.w	80045ea <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004338:	1d3b      	adds	r3, r7, #4
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	637b      	str	r3, [r7, #52]	; 0x34
 800433e:	463b      	mov	r3, r7
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	785b      	ldrb	r3, [r3, #1]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d164      	bne.n	8004412 <USB_EPStartXfer+0x20e>
 8004348:	1d3b      	adds	r3, r7, #4
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800434e:	1d3b      	adds	r3, r7, #4
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004356:	b29b      	uxth	r3, r3
 8004358:	461a      	mov	r2, r3
 800435a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800435c:	4413      	add	r3, r2
 800435e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004360:	463b      	mov	r3, r7
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	781b      	ldrb	r3, [r3, #0]
 8004366:	011a      	lsls	r2, r3, #4
 8004368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800436a:	4413      	add	r3, r2
 800436c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004370:	62bb      	str	r3, [r7, #40]	; 0x28
 8004372:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004376:	2b00      	cmp	r3, #0
 8004378:	d112      	bne.n	80043a0 <USB_EPStartXfer+0x19c>
 800437a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800437c:	881b      	ldrh	r3, [r3, #0]
 800437e:	b29b      	uxth	r3, r3
 8004380:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004384:	b29a      	uxth	r2, r3
 8004386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004388:	801a      	strh	r2, [r3, #0]
 800438a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800438c:	881b      	ldrh	r3, [r3, #0]
 800438e:	b29b      	uxth	r3, r3
 8004390:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004394:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004398:	b29a      	uxth	r2, r3
 800439a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800439c:	801a      	strh	r2, [r3, #0]
 800439e:	e054      	b.n	800444a <USB_EPStartXfer+0x246>
 80043a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043a4:	2b3e      	cmp	r3, #62	; 0x3e
 80043a6:	d817      	bhi.n	80043d8 <USB_EPStartXfer+0x1d4>
 80043a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043ac:	085b      	lsrs	r3, r3, #1
 80043ae:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80043b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043b6:	f003 0301 	and.w	r3, r3, #1
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d004      	beq.n	80043c8 <USB_EPStartXfer+0x1c4>
 80043be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80043c2:	3301      	adds	r3, #1
 80043c4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80043c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	029b      	lsls	r3, r3, #10
 80043d0:	b29a      	uxth	r2, r3
 80043d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d4:	801a      	strh	r2, [r3, #0]
 80043d6:	e038      	b.n	800444a <USB_EPStartXfer+0x246>
 80043d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043dc:	095b      	lsrs	r3, r3, #5
 80043de:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80043e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043e6:	f003 031f 	and.w	r3, r3, #31
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d104      	bne.n	80043f8 <USB_EPStartXfer+0x1f4>
 80043ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80043f2:	3b01      	subs	r3, #1
 80043f4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80043f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	029b      	lsls	r3, r3, #10
 8004400:	b29b      	uxth	r3, r3
 8004402:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004406:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800440a:	b29a      	uxth	r2, r3
 800440c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800440e:	801a      	strh	r2, [r3, #0]
 8004410:	e01b      	b.n	800444a <USB_EPStartXfer+0x246>
 8004412:	463b      	mov	r3, r7
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	785b      	ldrb	r3, [r3, #1]
 8004418:	2b01      	cmp	r3, #1
 800441a:	d116      	bne.n	800444a <USB_EPStartXfer+0x246>
 800441c:	1d3b      	adds	r3, r7, #4
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004424:	b29b      	uxth	r3, r3
 8004426:	461a      	mov	r2, r3
 8004428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800442a:	4413      	add	r3, r2
 800442c:	637b      	str	r3, [r7, #52]	; 0x34
 800442e:	463b      	mov	r3, r7
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	781b      	ldrb	r3, [r3, #0]
 8004434:	011a      	lsls	r2, r3, #4
 8004436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004438:	4413      	add	r3, r2
 800443a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800443e:	633b      	str	r3, [r7, #48]	; 0x30
 8004440:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004444:	b29a      	uxth	r2, r3
 8004446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004448:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800444a:	463b      	mov	r3, r7
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	895b      	ldrh	r3, [r3, #10]
 8004450:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004454:	463b      	mov	r3, r7
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	6959      	ldr	r1, [r3, #20]
 800445a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800445e:	b29b      	uxth	r3, r3
 8004460:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004464:	1d38      	adds	r0, r7, #4
 8004466:	6800      	ldr	r0, [r0, #0]
 8004468:	f001 f92a 	bl	80056c0 <USB_WritePMA>
            ep->xfer_buff += len;
 800446c:	463b      	mov	r3, r7
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	695a      	ldr	r2, [r3, #20]
 8004472:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004476:	441a      	add	r2, r3
 8004478:	463b      	mov	r3, r7
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800447e:	463b      	mov	r3, r7
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	6a1a      	ldr	r2, [r3, #32]
 8004484:	463b      	mov	r3, r7
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	691b      	ldr	r3, [r3, #16]
 800448a:	429a      	cmp	r2, r3
 800448c:	d909      	bls.n	80044a2 <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 800448e:	463b      	mov	r3, r7
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	6a1a      	ldr	r2, [r3, #32]
 8004494:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004498:	1ad2      	subs	r2, r2, r3
 800449a:	463b      	mov	r3, r7
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	621a      	str	r2, [r3, #32]
 80044a0:	e008      	b.n	80044b4 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 80044a2:	463b      	mov	r3, r7
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	6a1b      	ldr	r3, [r3, #32]
 80044a8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 80044ac:	463b      	mov	r3, r7
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2200      	movs	r2, #0
 80044b2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80044b4:	463b      	mov	r3, r7
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	785b      	ldrb	r3, [r3, #1]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d164      	bne.n	8004588 <USB_EPStartXfer+0x384>
 80044be:	1d3b      	adds	r3, r7, #4
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	61fb      	str	r3, [r7, #28]
 80044c4:	1d3b      	adds	r3, r7, #4
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	461a      	mov	r2, r3
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	4413      	add	r3, r2
 80044d4:	61fb      	str	r3, [r7, #28]
 80044d6:	463b      	mov	r3, r7
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	011a      	lsls	r2, r3, #4
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	4413      	add	r3, r2
 80044e2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80044e6:	61bb      	str	r3, [r7, #24]
 80044e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d112      	bne.n	8004516 <USB_EPStartXfer+0x312>
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	881b      	ldrh	r3, [r3, #0]
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80044fa:	b29a      	uxth	r2, r3
 80044fc:	69bb      	ldr	r3, [r7, #24]
 80044fe:	801a      	strh	r2, [r3, #0]
 8004500:	69bb      	ldr	r3, [r7, #24]
 8004502:	881b      	ldrh	r3, [r3, #0]
 8004504:	b29b      	uxth	r3, r3
 8004506:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800450a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800450e:	b29a      	uxth	r2, r3
 8004510:	69bb      	ldr	r3, [r7, #24]
 8004512:	801a      	strh	r2, [r3, #0]
 8004514:	e057      	b.n	80045c6 <USB_EPStartXfer+0x3c2>
 8004516:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800451a:	2b3e      	cmp	r3, #62	; 0x3e
 800451c:	d817      	bhi.n	800454e <USB_EPStartXfer+0x34a>
 800451e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004522:	085b      	lsrs	r3, r3, #1
 8004524:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004528:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800452c:	f003 0301 	and.w	r3, r3, #1
 8004530:	2b00      	cmp	r3, #0
 8004532:	d004      	beq.n	800453e <USB_EPStartXfer+0x33a>
 8004534:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004538:	3301      	adds	r3, #1
 800453a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800453e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004542:	b29b      	uxth	r3, r3
 8004544:	029b      	lsls	r3, r3, #10
 8004546:	b29a      	uxth	r2, r3
 8004548:	69bb      	ldr	r3, [r7, #24]
 800454a:	801a      	strh	r2, [r3, #0]
 800454c:	e03b      	b.n	80045c6 <USB_EPStartXfer+0x3c2>
 800454e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004552:	095b      	lsrs	r3, r3, #5
 8004554:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004558:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800455c:	f003 031f 	and.w	r3, r3, #31
 8004560:	2b00      	cmp	r3, #0
 8004562:	d104      	bne.n	800456e <USB_EPStartXfer+0x36a>
 8004564:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004568:	3b01      	subs	r3, #1
 800456a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800456e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004572:	b29b      	uxth	r3, r3
 8004574:	029b      	lsls	r3, r3, #10
 8004576:	b29b      	uxth	r3, r3
 8004578:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800457c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004580:	b29a      	uxth	r2, r3
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	801a      	strh	r2, [r3, #0]
 8004586:	e01e      	b.n	80045c6 <USB_EPStartXfer+0x3c2>
 8004588:	463b      	mov	r3, r7
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	785b      	ldrb	r3, [r3, #1]
 800458e:	2b01      	cmp	r3, #1
 8004590:	d119      	bne.n	80045c6 <USB_EPStartXfer+0x3c2>
 8004592:	1d3b      	adds	r3, r7, #4
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	627b      	str	r3, [r7, #36]	; 0x24
 8004598:	1d3b      	adds	r3, r7, #4
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	461a      	mov	r2, r3
 80045a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a6:	4413      	add	r3, r2
 80045a8:	627b      	str	r3, [r7, #36]	; 0x24
 80045aa:	463b      	mov	r3, r7
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	011a      	lsls	r2, r3, #4
 80045b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b4:	4413      	add	r3, r2
 80045b6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80045ba:	623b      	str	r3, [r7, #32]
 80045bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045c0:	b29a      	uxth	r2, r3
 80045c2:	6a3b      	ldr	r3, [r7, #32]
 80045c4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80045c6:	463b      	mov	r3, r7
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	891b      	ldrh	r3, [r3, #8]
 80045cc:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80045d0:	463b      	mov	r3, r7
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	6959      	ldr	r1, [r3, #20]
 80045d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045da:	b29b      	uxth	r3, r3
 80045dc:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80045e0:	1d38      	adds	r0, r7, #4
 80045e2:	6800      	ldr	r0, [r0, #0]
 80045e4:	f001 f86c 	bl	80056c0 <USB_WritePMA>
 80045e8:	e33b      	b.n	8004c62 <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80045ea:	463b      	mov	r3, r7
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	785b      	ldrb	r3, [r3, #1]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d164      	bne.n	80046be <USB_EPStartXfer+0x4ba>
 80045f4:	1d3b      	adds	r3, r7, #4
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045fa:	1d3b      	adds	r3, r7, #4
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004602:	b29b      	uxth	r3, r3
 8004604:	461a      	mov	r2, r3
 8004606:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004608:	4413      	add	r3, r2
 800460a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800460c:	463b      	mov	r3, r7
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	011a      	lsls	r2, r3, #4
 8004614:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004616:	4413      	add	r3, r2
 8004618:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800461c:	64bb      	str	r3, [r7, #72]	; 0x48
 800461e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004622:	2b00      	cmp	r3, #0
 8004624:	d112      	bne.n	800464c <USB_EPStartXfer+0x448>
 8004626:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004628:	881b      	ldrh	r3, [r3, #0]
 800462a:	b29b      	uxth	r3, r3
 800462c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004630:	b29a      	uxth	r2, r3
 8004632:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004634:	801a      	strh	r2, [r3, #0]
 8004636:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004638:	881b      	ldrh	r3, [r3, #0]
 800463a:	b29b      	uxth	r3, r3
 800463c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004640:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004644:	b29a      	uxth	r2, r3
 8004646:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004648:	801a      	strh	r2, [r3, #0]
 800464a:	e057      	b.n	80046fc <USB_EPStartXfer+0x4f8>
 800464c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004650:	2b3e      	cmp	r3, #62	; 0x3e
 8004652:	d817      	bhi.n	8004684 <USB_EPStartXfer+0x480>
 8004654:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004658:	085b      	lsrs	r3, r3, #1
 800465a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800465e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004662:	f003 0301 	and.w	r3, r3, #1
 8004666:	2b00      	cmp	r3, #0
 8004668:	d004      	beq.n	8004674 <USB_EPStartXfer+0x470>
 800466a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800466e:	3301      	adds	r3, #1
 8004670:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004674:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004678:	b29b      	uxth	r3, r3
 800467a:	029b      	lsls	r3, r3, #10
 800467c:	b29a      	uxth	r2, r3
 800467e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004680:	801a      	strh	r2, [r3, #0]
 8004682:	e03b      	b.n	80046fc <USB_EPStartXfer+0x4f8>
 8004684:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004688:	095b      	lsrs	r3, r3, #5
 800468a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800468e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004692:	f003 031f 	and.w	r3, r3, #31
 8004696:	2b00      	cmp	r3, #0
 8004698:	d104      	bne.n	80046a4 <USB_EPStartXfer+0x4a0>
 800469a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800469e:	3b01      	subs	r3, #1
 80046a0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80046a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046a8:	b29b      	uxth	r3, r3
 80046aa:	029b      	lsls	r3, r3, #10
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046b6:	b29a      	uxth	r2, r3
 80046b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046ba:	801a      	strh	r2, [r3, #0]
 80046bc:	e01e      	b.n	80046fc <USB_EPStartXfer+0x4f8>
 80046be:	463b      	mov	r3, r7
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	785b      	ldrb	r3, [r3, #1]
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d119      	bne.n	80046fc <USB_EPStartXfer+0x4f8>
 80046c8:	1d3b      	adds	r3, r7, #4
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	657b      	str	r3, [r7, #84]	; 0x54
 80046ce:	1d3b      	adds	r3, r7, #4
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	461a      	mov	r2, r3
 80046da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046dc:	4413      	add	r3, r2
 80046de:	657b      	str	r3, [r7, #84]	; 0x54
 80046e0:	463b      	mov	r3, r7
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	011a      	lsls	r2, r3, #4
 80046e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046ea:	4413      	add	r3, r2
 80046ec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80046f0:	653b      	str	r3, [r7, #80]	; 0x50
 80046f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046f6:	b29a      	uxth	r2, r3
 80046f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046fa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80046fc:	463b      	mov	r3, r7
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	891b      	ldrh	r3, [r3, #8]
 8004702:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004706:	463b      	mov	r3, r7
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	6959      	ldr	r1, [r3, #20]
 800470c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004710:	b29b      	uxth	r3, r3
 8004712:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004716:	1d38      	adds	r0, r7, #4
 8004718:	6800      	ldr	r0, [r0, #0]
 800471a:	f000 ffd1 	bl	80056c0 <USB_WritePMA>
            ep->xfer_buff += len;
 800471e:	463b      	mov	r3, r7
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	695a      	ldr	r2, [r3, #20]
 8004724:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004728:	441a      	add	r2, r3
 800472a:	463b      	mov	r3, r7
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004730:	463b      	mov	r3, r7
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	6a1a      	ldr	r2, [r3, #32]
 8004736:	463b      	mov	r3, r7
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	691b      	ldr	r3, [r3, #16]
 800473c:	429a      	cmp	r2, r3
 800473e:	d909      	bls.n	8004754 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8004740:	463b      	mov	r3, r7
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	6a1a      	ldr	r2, [r3, #32]
 8004746:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800474a:	1ad2      	subs	r2, r2, r3
 800474c:	463b      	mov	r3, r7
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	621a      	str	r2, [r3, #32]
 8004752:	e008      	b.n	8004766 <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8004754:	463b      	mov	r3, r7
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	6a1b      	ldr	r3, [r3, #32]
 800475a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 800475e:	463b      	mov	r3, r7
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2200      	movs	r2, #0
 8004764:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004766:	1d3b      	adds	r3, r7, #4
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	647b      	str	r3, [r7, #68]	; 0x44
 800476c:	463b      	mov	r3, r7
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	785b      	ldrb	r3, [r3, #1]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d164      	bne.n	8004840 <USB_EPStartXfer+0x63c>
 8004776:	1d3b      	adds	r3, r7, #4
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800477c:	1d3b      	adds	r3, r7, #4
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004784:	b29b      	uxth	r3, r3
 8004786:	461a      	mov	r2, r3
 8004788:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800478a:	4413      	add	r3, r2
 800478c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800478e:	463b      	mov	r3, r7
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	011a      	lsls	r2, r3, #4
 8004796:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004798:	4413      	add	r3, r2
 800479a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800479e:	63bb      	str	r3, [r7, #56]	; 0x38
 80047a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d112      	bne.n	80047ce <USB_EPStartXfer+0x5ca>
 80047a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047aa:	881b      	ldrh	r3, [r3, #0]
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80047b2:	b29a      	uxth	r2, r3
 80047b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047b6:	801a      	strh	r2, [r3, #0]
 80047b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ba:	881b      	ldrh	r3, [r3, #0]
 80047bc:	b29b      	uxth	r3, r3
 80047be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047c6:	b29a      	uxth	r2, r3
 80047c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ca:	801a      	strh	r2, [r3, #0]
 80047cc:	e054      	b.n	8004878 <USB_EPStartXfer+0x674>
 80047ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047d2:	2b3e      	cmp	r3, #62	; 0x3e
 80047d4:	d817      	bhi.n	8004806 <USB_EPStartXfer+0x602>
 80047d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047da:	085b      	lsrs	r3, r3, #1
 80047dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80047e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047e4:	f003 0301 	and.w	r3, r3, #1
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d004      	beq.n	80047f6 <USB_EPStartXfer+0x5f2>
 80047ec:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80047f0:	3301      	adds	r3, #1
 80047f2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80047f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	029b      	lsls	r3, r3, #10
 80047fe:	b29a      	uxth	r2, r3
 8004800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004802:	801a      	strh	r2, [r3, #0]
 8004804:	e038      	b.n	8004878 <USB_EPStartXfer+0x674>
 8004806:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800480a:	095b      	lsrs	r3, r3, #5
 800480c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004810:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004814:	f003 031f 	and.w	r3, r3, #31
 8004818:	2b00      	cmp	r3, #0
 800481a:	d104      	bne.n	8004826 <USB_EPStartXfer+0x622>
 800481c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004820:	3b01      	subs	r3, #1
 8004822:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004826:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800482a:	b29b      	uxth	r3, r3
 800482c:	029b      	lsls	r3, r3, #10
 800482e:	b29b      	uxth	r3, r3
 8004830:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004834:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004838:	b29a      	uxth	r2, r3
 800483a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800483c:	801a      	strh	r2, [r3, #0]
 800483e:	e01b      	b.n	8004878 <USB_EPStartXfer+0x674>
 8004840:	463b      	mov	r3, r7
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	785b      	ldrb	r3, [r3, #1]
 8004846:	2b01      	cmp	r3, #1
 8004848:	d116      	bne.n	8004878 <USB_EPStartXfer+0x674>
 800484a:	1d3b      	adds	r3, r7, #4
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004852:	b29b      	uxth	r3, r3
 8004854:	461a      	mov	r2, r3
 8004856:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004858:	4413      	add	r3, r2
 800485a:	647b      	str	r3, [r7, #68]	; 0x44
 800485c:	463b      	mov	r3, r7
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	781b      	ldrb	r3, [r3, #0]
 8004862:	011a      	lsls	r2, r3, #4
 8004864:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004866:	4413      	add	r3, r2
 8004868:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800486c:	643b      	str	r3, [r7, #64]	; 0x40
 800486e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004872:	b29a      	uxth	r2, r3
 8004874:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004876:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004878:	463b      	mov	r3, r7
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	895b      	ldrh	r3, [r3, #10]
 800487e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004882:	463b      	mov	r3, r7
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	6959      	ldr	r1, [r3, #20]
 8004888:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800488c:	b29b      	uxth	r3, r3
 800488e:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004892:	1d38      	adds	r0, r7, #4
 8004894:	6800      	ldr	r0, [r0, #0]
 8004896:	f000 ff13 	bl	80056c0 <USB_WritePMA>
 800489a:	e1e2      	b.n	8004c62 <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800489c:	463b      	mov	r3, r7
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	6a1b      	ldr	r3, [r3, #32]
 80048a2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80048a6:	1d3b      	adds	r3, r7, #4
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	463b      	mov	r3, r7
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	009b      	lsls	r3, r3, #2
 80048b2:	4413      	add	r3, r2
 80048b4:	881b      	ldrh	r3, [r3, #0]
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80048bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048c0:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80048c4:	1d3b      	adds	r3, r7, #4
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	463b      	mov	r3, r7
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	441a      	add	r2, r3
 80048d2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80048d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80048ea:	1d3b      	adds	r3, r7, #4
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	663b      	str	r3, [r7, #96]	; 0x60
 80048f0:	1d3b      	adds	r3, r7, #4
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	461a      	mov	r2, r3
 80048fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048fe:	4413      	add	r3, r2
 8004900:	663b      	str	r3, [r7, #96]	; 0x60
 8004902:	463b      	mov	r3, r7
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	011a      	lsls	r2, r3, #4
 800490a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800490c:	4413      	add	r3, r2
 800490e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004912:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004914:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004918:	b29a      	uxth	r2, r3
 800491a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800491c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800491e:	463b      	mov	r3, r7
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	891b      	ldrh	r3, [r3, #8]
 8004924:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004928:	463b      	mov	r3, r7
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	6959      	ldr	r1, [r3, #20]
 800492e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004932:	b29b      	uxth	r3, r3
 8004934:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004938:	1d38      	adds	r0, r7, #4
 800493a:	6800      	ldr	r0, [r0, #0]
 800493c:	f000 fec0 	bl	80056c0 <USB_WritePMA>
 8004940:	e18f      	b.n	8004c62 <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004942:	1d3b      	adds	r3, r7, #4
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	463b      	mov	r3, r7
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	4413      	add	r3, r2
 8004950:	881b      	ldrh	r3, [r3, #0]
 8004952:	b29b      	uxth	r3, r3
 8004954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004958:	2b00      	cmp	r3, #0
 800495a:	f000 808f 	beq.w	8004a7c <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800495e:	1d3b      	adds	r3, r7, #4
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	67bb      	str	r3, [r7, #120]	; 0x78
 8004964:	463b      	mov	r3, r7
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	785b      	ldrb	r3, [r3, #1]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d164      	bne.n	8004a38 <USB_EPStartXfer+0x834>
 800496e:	1d3b      	adds	r3, r7, #4
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	673b      	str	r3, [r7, #112]	; 0x70
 8004974:	1d3b      	adds	r3, r7, #4
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800497c:	b29b      	uxth	r3, r3
 800497e:	461a      	mov	r2, r3
 8004980:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004982:	4413      	add	r3, r2
 8004984:	673b      	str	r3, [r7, #112]	; 0x70
 8004986:	463b      	mov	r3, r7
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	781b      	ldrb	r3, [r3, #0]
 800498c:	011a      	lsls	r2, r3, #4
 800498e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004990:	4413      	add	r3, r2
 8004992:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004996:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004998:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800499c:	2b00      	cmp	r3, #0
 800499e:	d112      	bne.n	80049c6 <USB_EPStartXfer+0x7c2>
 80049a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049a2:	881b      	ldrh	r3, [r3, #0]
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80049aa:	b29a      	uxth	r2, r3
 80049ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049ae:	801a      	strh	r2, [r3, #0]
 80049b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049b2:	881b      	ldrh	r3, [r3, #0]
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049be:	b29a      	uxth	r2, r3
 80049c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049c2:	801a      	strh	r2, [r3, #0]
 80049c4:	e054      	b.n	8004a70 <USB_EPStartXfer+0x86c>
 80049c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049ca:	2b3e      	cmp	r3, #62	; 0x3e
 80049cc:	d817      	bhi.n	80049fe <USB_EPStartXfer+0x7fa>
 80049ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049d2:	085b      	lsrs	r3, r3, #1
 80049d4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80049d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049dc:	f003 0301 	and.w	r3, r3, #1
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d004      	beq.n	80049ee <USB_EPStartXfer+0x7ea>
 80049e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049e8:	3301      	adds	r3, #1
 80049ea:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80049ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	029b      	lsls	r3, r3, #10
 80049f6:	b29a      	uxth	r2, r3
 80049f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049fa:	801a      	strh	r2, [r3, #0]
 80049fc:	e038      	b.n	8004a70 <USB_EPStartXfer+0x86c>
 80049fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a02:	095b      	lsrs	r3, r3, #5
 8004a04:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004a08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a0c:	f003 031f 	and.w	r3, r3, #31
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d104      	bne.n	8004a1e <USB_EPStartXfer+0x81a>
 8004a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a18:	3b01      	subs	r3, #1
 8004a1a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004a1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	029b      	lsls	r3, r3, #10
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a30:	b29a      	uxth	r2, r3
 8004a32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a34:	801a      	strh	r2, [r3, #0]
 8004a36:	e01b      	b.n	8004a70 <USB_EPStartXfer+0x86c>
 8004a38:	463b      	mov	r3, r7
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	785b      	ldrb	r3, [r3, #1]
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d116      	bne.n	8004a70 <USB_EPStartXfer+0x86c>
 8004a42:	1d3b      	adds	r3, r7, #4
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a50:	4413      	add	r3, r2
 8004a52:	67bb      	str	r3, [r7, #120]	; 0x78
 8004a54:	463b      	mov	r3, r7
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	781b      	ldrb	r3, [r3, #0]
 8004a5a:	011a      	lsls	r2, r3, #4
 8004a5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a5e:	4413      	add	r3, r2
 8004a60:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004a64:	677b      	str	r3, [r7, #116]	; 0x74
 8004a66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a6a:	b29a      	uxth	r2, r3
 8004a6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a6e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8004a70:	463b      	mov	r3, r7
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	895b      	ldrh	r3, [r3, #10]
 8004a76:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8004a7a:	e097      	b.n	8004bac <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004a7c:	463b      	mov	r3, r7
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	785b      	ldrb	r3, [r3, #1]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d168      	bne.n	8004b58 <USB_EPStartXfer+0x954>
 8004a86:	1d3b      	adds	r3, r7, #4
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004a8e:	1d3b      	adds	r3, r7, #4
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	461a      	mov	r2, r3
 8004a9a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004a9e:	4413      	add	r3, r2
 8004aa0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004aa4:	463b      	mov	r3, r7
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	011a      	lsls	r2, r3, #4
 8004aac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004ab0:	4413      	add	r3, r2
 8004ab2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004ab6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004ab8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d112      	bne.n	8004ae6 <USB_EPStartXfer+0x8e2>
 8004ac0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004ac2:	881b      	ldrh	r3, [r3, #0]
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004aca:	b29a      	uxth	r2, r3
 8004acc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004ace:	801a      	strh	r2, [r3, #0]
 8004ad0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004ad2:	881b      	ldrh	r3, [r3, #0]
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ada:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ade:	b29a      	uxth	r2, r3
 8004ae0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004ae2:	801a      	strh	r2, [r3, #0]
 8004ae4:	e05d      	b.n	8004ba2 <USB_EPStartXfer+0x99e>
 8004ae6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004aea:	2b3e      	cmp	r3, #62	; 0x3e
 8004aec:	d817      	bhi.n	8004b1e <USB_EPStartXfer+0x91a>
 8004aee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004af2:	085b      	lsrs	r3, r3, #1
 8004af4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004af8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004afc:	f003 0301 	and.w	r3, r3, #1
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d004      	beq.n	8004b0e <USB_EPStartXfer+0x90a>
 8004b04:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004b08:	3301      	adds	r3, #1
 8004b0a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004b0e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	029b      	lsls	r3, r3, #10
 8004b16:	b29a      	uxth	r2, r3
 8004b18:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004b1a:	801a      	strh	r2, [r3, #0]
 8004b1c:	e041      	b.n	8004ba2 <USB_EPStartXfer+0x99e>
 8004b1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b22:	095b      	lsrs	r3, r3, #5
 8004b24:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004b28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b2c:	f003 031f 	and.w	r3, r3, #31
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d104      	bne.n	8004b3e <USB_EPStartXfer+0x93a>
 8004b34:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004b38:	3b01      	subs	r3, #1
 8004b3a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004b3e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	029b      	lsls	r3, r3, #10
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b50:	b29a      	uxth	r2, r3
 8004b52:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004b54:	801a      	strh	r2, [r3, #0]
 8004b56:	e024      	b.n	8004ba2 <USB_EPStartXfer+0x99e>
 8004b58:	463b      	mov	r3, r7
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	785b      	ldrb	r3, [r3, #1]
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d11f      	bne.n	8004ba2 <USB_EPStartXfer+0x99e>
 8004b62:	1d3b      	adds	r3, r7, #4
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004b6a:	1d3b      	adds	r3, r7, #4
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	461a      	mov	r2, r3
 8004b76:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b7a:	4413      	add	r3, r2
 8004b7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004b80:	463b      	mov	r3, r7
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	781b      	ldrb	r3, [r3, #0]
 8004b86:	011a      	lsls	r2, r3, #4
 8004b88:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b8c:	4413      	add	r3, r2
 8004b8e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004b92:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004b96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b9a:	b29a      	uxth	r2, r3
 8004b9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ba0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004ba2:	463b      	mov	r3, r7
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	891b      	ldrh	r3, [r3, #8]
 8004ba8:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004bac:	463b      	mov	r3, r7
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	6959      	ldr	r1, [r3, #20]
 8004bb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004bbc:	1d38      	adds	r0, r7, #4
 8004bbe:	6800      	ldr	r0, [r0, #0]
 8004bc0:	f000 fd7e 	bl	80056c0 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8004bc4:	463b      	mov	r3, r7
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	785b      	ldrb	r3, [r3, #1]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d122      	bne.n	8004c14 <USB_EPStartXfer+0xa10>
 8004bce:	1d3b      	adds	r3, r7, #4
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	463b      	mov	r3, r7
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	781b      	ldrb	r3, [r3, #0]
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	4413      	add	r3, r2
 8004bdc:	881b      	ldrh	r3, [r3, #0]
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004be4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004be8:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8004bec:	1d3b      	adds	r3, r7, #4
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	463b      	mov	r3, r7
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	781b      	ldrb	r3, [r3, #0]
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	441a      	add	r2, r3
 8004bfa:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8004bfe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c0a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	8013      	strh	r3, [r2, #0]
 8004c12:	e026      	b.n	8004c62 <USB_EPStartXfer+0xa5e>
 8004c14:	463b      	mov	r3, r7
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	785b      	ldrb	r3, [r3, #1]
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d121      	bne.n	8004c62 <USB_EPStartXfer+0xa5e>
 8004c1e:	1d3b      	adds	r3, r7, #4
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	463b      	mov	r3, r7
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	781b      	ldrb	r3, [r3, #0]
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	4413      	add	r3, r2
 8004c2c:	881b      	ldrh	r3, [r3, #0]
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c38:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8004c3c:	1d3b      	adds	r3, r7, #4
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	463b      	mov	r3, r7
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	441a      	add	r2, r3
 8004c4a:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8004c4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c56:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004c62:	1d3b      	adds	r3, r7, #4
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	463b      	mov	r3, r7
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	4413      	add	r3, r2
 8004c70:	881b      	ldrh	r3, [r3, #0]
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	f107 020e 	add.w	r2, r7, #14
 8004c78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c80:	8013      	strh	r3, [r2, #0]
 8004c82:	f107 030e 	add.w	r3, r7, #14
 8004c86:	f107 020e 	add.w	r2, r7, #14
 8004c8a:	8812      	ldrh	r2, [r2, #0]
 8004c8c:	f082 0210 	eor.w	r2, r2, #16
 8004c90:	801a      	strh	r2, [r3, #0]
 8004c92:	f107 030e 	add.w	r3, r7, #14
 8004c96:	f107 020e 	add.w	r2, r7, #14
 8004c9a:	8812      	ldrh	r2, [r2, #0]
 8004c9c:	f082 0220 	eor.w	r2, r2, #32
 8004ca0:	801a      	strh	r2, [r3, #0]
 8004ca2:	1d3b      	adds	r3, r7, #4
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	463b      	mov	r3, r7
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	441a      	add	r2, r3
 8004cb0:	f107 030e 	add.w	r3, r7, #14
 8004cb4:	881b      	ldrh	r3, [r3, #0]
 8004cb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	8013      	strh	r3, [r2, #0]
 8004cca:	e3b5      	b.n	8005438 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8004ccc:	463b      	mov	r3, r7
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	7b1b      	ldrb	r3, [r3, #12]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	f040 8090 	bne.w	8004df8 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8004cd8:	463b      	mov	r3, r7
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	699a      	ldr	r2, [r3, #24]
 8004cde:	463b      	mov	r3, r7
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	691b      	ldr	r3, [r3, #16]
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d90e      	bls.n	8004d06 <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8004ce8:	463b      	mov	r3, r7
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 8004cf2:	463b      	mov	r3, r7
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	699a      	ldr	r2, [r3, #24]
 8004cf8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cfc:	1ad2      	subs	r2, r2, r3
 8004cfe:	463b      	mov	r3, r7
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	619a      	str	r2, [r3, #24]
 8004d04:	e008      	b.n	8004d18 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 8004d06:	463b      	mov	r3, r7
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	699b      	ldr	r3, [r3, #24]
 8004d0c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8004d10:	463b      	mov	r3, r7
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	2200      	movs	r2, #0
 8004d16:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004d18:	1d3b      	adds	r3, r7, #4
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004d20:	1d3b      	adds	r3, r7, #4
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004d30:	4413      	add	r3, r2
 8004d32:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004d36:	463b      	mov	r3, r7
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	011a      	lsls	r2, r3, #4
 8004d3e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004d42:	4413      	add	r3, r2
 8004d44:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004d48:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004d4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d116      	bne.n	8004d82 <USB_EPStartXfer+0xb7e>
 8004d54:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004d58:	881b      	ldrh	r3, [r3, #0]
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004d60:	b29a      	uxth	r2, r3
 8004d62:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004d66:	801a      	strh	r2, [r3, #0]
 8004d68:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004d6c:	881b      	ldrh	r3, [r3, #0]
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d78:	b29a      	uxth	r2, r3
 8004d7a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004d7e:	801a      	strh	r2, [r3, #0]
 8004d80:	e32c      	b.n	80053dc <USB_EPStartXfer+0x11d8>
 8004d82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d86:	2b3e      	cmp	r3, #62	; 0x3e
 8004d88:	d818      	bhi.n	8004dbc <USB_EPStartXfer+0xbb8>
 8004d8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d8e:	085b      	lsrs	r3, r3, #1
 8004d90:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004d94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d98:	f003 0301 	and.w	r3, r3, #1
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d004      	beq.n	8004daa <USB_EPStartXfer+0xba6>
 8004da0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004da4:	3301      	adds	r3, #1
 8004da6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004daa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	029b      	lsls	r3, r3, #10
 8004db2:	b29a      	uxth	r2, r3
 8004db4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004db8:	801a      	strh	r2, [r3, #0]
 8004dba:	e30f      	b.n	80053dc <USB_EPStartXfer+0x11d8>
 8004dbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dc0:	095b      	lsrs	r3, r3, #5
 8004dc2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004dc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dca:	f003 031f 	and.w	r3, r3, #31
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d104      	bne.n	8004ddc <USB_EPStartXfer+0xbd8>
 8004dd2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004dd6:	3b01      	subs	r3, #1
 8004dd8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004ddc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	029b      	lsls	r3, r3, #10
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dee:	b29a      	uxth	r2, r3
 8004df0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004df4:	801a      	strh	r2, [r3, #0]
 8004df6:	e2f1      	b.n	80053dc <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8004df8:	463b      	mov	r3, r7
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	78db      	ldrb	r3, [r3, #3]
 8004dfe:	2b02      	cmp	r3, #2
 8004e00:	f040 818f 	bne.w	8005122 <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004e04:	463b      	mov	r3, r7
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	785b      	ldrb	r3, [r3, #1]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d175      	bne.n	8004efa <USB_EPStartXfer+0xcf6>
 8004e0e:	1d3b      	adds	r3, r7, #4
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004e16:	1d3b      	adds	r3, r7, #4
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	461a      	mov	r2, r3
 8004e22:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004e26:	4413      	add	r3, r2
 8004e28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004e2c:	463b      	mov	r3, r7
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	011a      	lsls	r2, r3, #4
 8004e34:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004e38:	4413      	add	r3, r2
 8004e3a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004e3e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004e42:	463b      	mov	r3, r7
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	691b      	ldr	r3, [r3, #16]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d116      	bne.n	8004e7a <USB_EPStartXfer+0xc76>
 8004e4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004e50:	881b      	ldrh	r3, [r3, #0]
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004e58:	b29a      	uxth	r2, r3
 8004e5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004e5e:	801a      	strh	r2, [r3, #0]
 8004e60:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004e64:	881b      	ldrh	r3, [r3, #0]
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e70:	b29a      	uxth	r2, r3
 8004e72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004e76:	801a      	strh	r2, [r3, #0]
 8004e78:	e065      	b.n	8004f46 <USB_EPStartXfer+0xd42>
 8004e7a:	463b      	mov	r3, r7
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	691b      	ldr	r3, [r3, #16]
 8004e80:	2b3e      	cmp	r3, #62	; 0x3e
 8004e82:	d81a      	bhi.n	8004eba <USB_EPStartXfer+0xcb6>
 8004e84:	463b      	mov	r3, r7
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	691b      	ldr	r3, [r3, #16]
 8004e8a:	085b      	lsrs	r3, r3, #1
 8004e8c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004e90:	463b      	mov	r3, r7
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	f003 0301 	and.w	r3, r3, #1
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d004      	beq.n	8004ea8 <USB_EPStartXfer+0xca4>
 8004e9e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004ea8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	029b      	lsls	r3, r3, #10
 8004eb0:	b29a      	uxth	r2, r3
 8004eb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004eb6:	801a      	strh	r2, [r3, #0]
 8004eb8:	e045      	b.n	8004f46 <USB_EPStartXfer+0xd42>
 8004eba:	463b      	mov	r3, r7
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	691b      	ldr	r3, [r3, #16]
 8004ec0:	095b      	lsrs	r3, r3, #5
 8004ec2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004ec6:	463b      	mov	r3, r7
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	691b      	ldr	r3, [r3, #16]
 8004ecc:	f003 031f 	and.w	r3, r3, #31
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d104      	bne.n	8004ede <USB_EPStartXfer+0xcda>
 8004ed4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004ed8:	3b01      	subs	r3, #1
 8004eda:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004ede:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	029b      	lsls	r3, r3, #10
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004eec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ef0:	b29a      	uxth	r2, r3
 8004ef2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004ef6:	801a      	strh	r2, [r3, #0]
 8004ef8:	e025      	b.n	8004f46 <USB_EPStartXfer+0xd42>
 8004efa:	463b      	mov	r3, r7
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	785b      	ldrb	r3, [r3, #1]
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d120      	bne.n	8004f46 <USB_EPStartXfer+0xd42>
 8004f04:	1d3b      	adds	r3, r7, #4
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004f0c:	1d3b      	adds	r3, r7, #4
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	461a      	mov	r2, r3
 8004f18:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004f1c:	4413      	add	r3, r2
 8004f1e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004f22:	463b      	mov	r3, r7
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	011a      	lsls	r2, r3, #4
 8004f2a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004f2e:	4413      	add	r3, r2
 8004f30:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004f34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004f38:	463b      	mov	r3, r7
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	b29a      	uxth	r2, r3
 8004f40:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004f44:	801a      	strh	r2, [r3, #0]
 8004f46:	1d3b      	adds	r3, r7, #4
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004f4e:	463b      	mov	r3, r7
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	785b      	ldrb	r3, [r3, #1]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d175      	bne.n	8005044 <USB_EPStartXfer+0xe40>
 8004f58:	1d3b      	adds	r3, r7, #4
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004f60:	1d3b      	adds	r3, r7, #4
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004f70:	4413      	add	r3, r2
 8004f72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004f76:	463b      	mov	r3, r7
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	781b      	ldrb	r3, [r3, #0]
 8004f7c:	011a      	lsls	r2, r3, #4
 8004f7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004f82:	4413      	add	r3, r2
 8004f84:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004f88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004f8c:	463b      	mov	r3, r7
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	691b      	ldr	r3, [r3, #16]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d116      	bne.n	8004fc4 <USB_EPStartXfer+0xdc0>
 8004f96:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004f9a:	881b      	ldrh	r3, [r3, #0]
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004fa2:	b29a      	uxth	r2, r3
 8004fa4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004fa8:	801a      	strh	r2, [r3, #0]
 8004faa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004fae:	881b      	ldrh	r3, [r3, #0]
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fba:	b29a      	uxth	r2, r3
 8004fbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004fc0:	801a      	strh	r2, [r3, #0]
 8004fc2:	e061      	b.n	8005088 <USB_EPStartXfer+0xe84>
 8004fc4:	463b      	mov	r3, r7
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	2b3e      	cmp	r3, #62	; 0x3e
 8004fcc:	d81a      	bhi.n	8005004 <USB_EPStartXfer+0xe00>
 8004fce:	463b      	mov	r3, r7
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	691b      	ldr	r3, [r3, #16]
 8004fd4:	085b      	lsrs	r3, r3, #1
 8004fd6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004fda:	463b      	mov	r3, r7
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	691b      	ldr	r3, [r3, #16]
 8004fe0:	f003 0301 	and.w	r3, r3, #1
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d004      	beq.n	8004ff2 <USB_EPStartXfer+0xdee>
 8004fe8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fec:	3301      	adds	r3, #1
 8004fee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004ff2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	029b      	lsls	r3, r3, #10
 8004ffa:	b29a      	uxth	r2, r3
 8004ffc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005000:	801a      	strh	r2, [r3, #0]
 8005002:	e041      	b.n	8005088 <USB_EPStartXfer+0xe84>
 8005004:	463b      	mov	r3, r7
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	095b      	lsrs	r3, r3, #5
 800500c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005010:	463b      	mov	r3, r7
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	f003 031f 	and.w	r3, r3, #31
 800501a:	2b00      	cmp	r3, #0
 800501c:	d104      	bne.n	8005028 <USB_EPStartXfer+0xe24>
 800501e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005022:	3b01      	subs	r3, #1
 8005024:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005028:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800502c:	b29b      	uxth	r3, r3
 800502e:	029b      	lsls	r3, r3, #10
 8005030:	b29b      	uxth	r3, r3
 8005032:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005036:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800503a:	b29a      	uxth	r2, r3
 800503c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005040:	801a      	strh	r2, [r3, #0]
 8005042:	e021      	b.n	8005088 <USB_EPStartXfer+0xe84>
 8005044:	463b      	mov	r3, r7
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	785b      	ldrb	r3, [r3, #1]
 800504a:	2b01      	cmp	r3, #1
 800504c:	d11c      	bne.n	8005088 <USB_EPStartXfer+0xe84>
 800504e:	1d3b      	adds	r3, r7, #4
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005056:	b29b      	uxth	r3, r3
 8005058:	461a      	mov	r2, r3
 800505a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800505e:	4413      	add	r3, r2
 8005060:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005064:	463b      	mov	r3, r7
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	011a      	lsls	r2, r3, #4
 800506c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005070:	4413      	add	r3, r2
 8005072:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005076:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800507a:	463b      	mov	r3, r7
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	691b      	ldr	r3, [r3, #16]
 8005080:	b29a      	uxth	r2, r3
 8005082:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005086:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005088:	463b      	mov	r3, r7
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	69db      	ldr	r3, [r3, #28]
 800508e:	2b00      	cmp	r3, #0
 8005090:	f000 81a4 	beq.w	80053dc <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005094:	1d3b      	adds	r3, r7, #4
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	463b      	mov	r3, r7
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	4413      	add	r3, r2
 80050a2:	881b      	ldrh	r3, [r3, #0]
 80050a4:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80050a8:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80050ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d005      	beq.n	80050c0 <USB_EPStartXfer+0xebc>
 80050b4:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80050b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d10d      	bne.n	80050dc <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80050c0:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80050c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	f040 8187 	bne.w	80053dc <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80050ce:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80050d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	f040 8180 	bne.w	80053dc <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80050dc:	1d3b      	adds	r3, r7, #4
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	463b      	mov	r3, r7
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	4413      	add	r3, r2
 80050ea:	881b      	ldrh	r3, [r3, #0]
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050f6:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 80050fa:	1d3b      	adds	r3, r7, #4
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	463b      	mov	r3, r7
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	009b      	lsls	r3, r3, #2
 8005106:	441a      	add	r2, r3
 8005108:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800510c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005110:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005114:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005118:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800511c:	b29b      	uxth	r3, r3
 800511e:	8013      	strh	r3, [r2, #0]
 8005120:	e15c      	b.n	80053dc <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005122:	463b      	mov	r3, r7
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	78db      	ldrb	r3, [r3, #3]
 8005128:	2b01      	cmp	r3, #1
 800512a:	f040 8155 	bne.w	80053d8 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800512e:	463b      	mov	r3, r7
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	699a      	ldr	r2, [r3, #24]
 8005134:	463b      	mov	r3, r7
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	691b      	ldr	r3, [r3, #16]
 800513a:	429a      	cmp	r2, r3
 800513c:	d90e      	bls.n	800515c <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 800513e:	463b      	mov	r3, r7
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	691b      	ldr	r3, [r3, #16]
 8005144:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8005148:	463b      	mov	r3, r7
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	699a      	ldr	r2, [r3, #24]
 800514e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005152:	1ad2      	subs	r2, r2, r3
 8005154:	463b      	mov	r3, r7
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	619a      	str	r2, [r3, #24]
 800515a:	e008      	b.n	800516e <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 800515c:	463b      	mov	r3, r7
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	699b      	ldr	r3, [r3, #24]
 8005162:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 8005166:	463b      	mov	r3, r7
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	2200      	movs	r2, #0
 800516c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800516e:	463b      	mov	r3, r7
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	785b      	ldrb	r3, [r3, #1]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d16f      	bne.n	8005258 <USB_EPStartXfer+0x1054>
 8005178:	1d3b      	adds	r3, r7, #4
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005180:	1d3b      	adds	r3, r7, #4
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005188:	b29b      	uxth	r3, r3
 800518a:	461a      	mov	r2, r3
 800518c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005190:	4413      	add	r3, r2
 8005192:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005196:	463b      	mov	r3, r7
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	011a      	lsls	r2, r3, #4
 800519e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80051a2:	4413      	add	r3, r2
 80051a4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80051a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80051ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d116      	bne.n	80051e2 <USB_EPStartXfer+0xfde>
 80051b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80051b8:	881b      	ldrh	r3, [r3, #0]
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80051c0:	b29a      	uxth	r2, r3
 80051c2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80051c6:	801a      	strh	r2, [r3, #0]
 80051c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80051cc:	881b      	ldrh	r3, [r3, #0]
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051d8:	b29a      	uxth	r2, r3
 80051da:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80051de:	801a      	strh	r2, [r3, #0]
 80051e0:	e05f      	b.n	80052a2 <USB_EPStartXfer+0x109e>
 80051e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051e6:	2b3e      	cmp	r3, #62	; 0x3e
 80051e8:	d818      	bhi.n	800521c <USB_EPStartXfer+0x1018>
 80051ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051ee:	085b      	lsrs	r3, r3, #1
 80051f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80051f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051f8:	f003 0301 	and.w	r3, r3, #1
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d004      	beq.n	800520a <USB_EPStartXfer+0x1006>
 8005200:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005204:	3301      	adds	r3, #1
 8005206:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800520a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800520e:	b29b      	uxth	r3, r3
 8005210:	029b      	lsls	r3, r3, #10
 8005212:	b29a      	uxth	r2, r3
 8005214:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005218:	801a      	strh	r2, [r3, #0]
 800521a:	e042      	b.n	80052a2 <USB_EPStartXfer+0x109e>
 800521c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005220:	095b      	lsrs	r3, r3, #5
 8005222:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005226:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800522a:	f003 031f 	and.w	r3, r3, #31
 800522e:	2b00      	cmp	r3, #0
 8005230:	d104      	bne.n	800523c <USB_EPStartXfer+0x1038>
 8005232:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005236:	3b01      	subs	r3, #1
 8005238:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800523c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005240:	b29b      	uxth	r3, r3
 8005242:	029b      	lsls	r3, r3, #10
 8005244:	b29b      	uxth	r3, r3
 8005246:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800524a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800524e:	b29a      	uxth	r2, r3
 8005250:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005254:	801a      	strh	r2, [r3, #0]
 8005256:	e024      	b.n	80052a2 <USB_EPStartXfer+0x109e>
 8005258:	463b      	mov	r3, r7
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	785b      	ldrb	r3, [r3, #1]
 800525e:	2b01      	cmp	r3, #1
 8005260:	d11f      	bne.n	80052a2 <USB_EPStartXfer+0x109e>
 8005262:	1d3b      	adds	r3, r7, #4
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800526a:	1d3b      	adds	r3, r7, #4
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005272:	b29b      	uxth	r3, r3
 8005274:	461a      	mov	r2, r3
 8005276:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800527a:	4413      	add	r3, r2
 800527c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005280:	463b      	mov	r3, r7
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	011a      	lsls	r2, r3, #4
 8005288:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800528c:	4413      	add	r3, r2
 800528e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005292:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005296:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800529a:	b29a      	uxth	r2, r3
 800529c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80052a0:	801a      	strh	r2, [r3, #0]
 80052a2:	1d3b      	adds	r3, r7, #4
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80052aa:	463b      	mov	r3, r7
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	785b      	ldrb	r3, [r3, #1]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d16f      	bne.n	8005394 <USB_EPStartXfer+0x1190>
 80052b4:	1d3b      	adds	r3, r7, #4
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80052bc:	1d3b      	adds	r3, r7, #4
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	461a      	mov	r2, r3
 80052c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80052cc:	4413      	add	r3, r2
 80052ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80052d2:	463b      	mov	r3, r7
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	781b      	ldrb	r3, [r3, #0]
 80052d8:	011a      	lsls	r2, r3, #4
 80052da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80052de:	4413      	add	r3, r2
 80052e0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80052e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80052e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d116      	bne.n	800531e <USB_EPStartXfer+0x111a>
 80052f0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80052f4:	881b      	ldrh	r3, [r3, #0]
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80052fc:	b29a      	uxth	r2, r3
 80052fe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005302:	801a      	strh	r2, [r3, #0]
 8005304:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005308:	881b      	ldrh	r3, [r3, #0]
 800530a:	b29b      	uxth	r3, r3
 800530c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005310:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005314:	b29a      	uxth	r2, r3
 8005316:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800531a:	801a      	strh	r2, [r3, #0]
 800531c:	e05e      	b.n	80053dc <USB_EPStartXfer+0x11d8>
 800531e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005322:	2b3e      	cmp	r3, #62	; 0x3e
 8005324:	d818      	bhi.n	8005358 <USB_EPStartXfer+0x1154>
 8005326:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800532a:	085b      	lsrs	r3, r3, #1
 800532c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005330:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005334:	f003 0301 	and.w	r3, r3, #1
 8005338:	2b00      	cmp	r3, #0
 800533a:	d004      	beq.n	8005346 <USB_EPStartXfer+0x1142>
 800533c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005340:	3301      	adds	r3, #1
 8005342:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005346:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800534a:	b29b      	uxth	r3, r3
 800534c:	029b      	lsls	r3, r3, #10
 800534e:	b29a      	uxth	r2, r3
 8005350:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005354:	801a      	strh	r2, [r3, #0]
 8005356:	e041      	b.n	80053dc <USB_EPStartXfer+0x11d8>
 8005358:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800535c:	095b      	lsrs	r3, r3, #5
 800535e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005362:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005366:	f003 031f 	and.w	r3, r3, #31
 800536a:	2b00      	cmp	r3, #0
 800536c:	d104      	bne.n	8005378 <USB_EPStartXfer+0x1174>
 800536e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005372:	3b01      	subs	r3, #1
 8005374:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005378:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800537c:	b29b      	uxth	r3, r3
 800537e:	029b      	lsls	r3, r3, #10
 8005380:	b29b      	uxth	r3, r3
 8005382:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005386:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800538a:	b29a      	uxth	r2, r3
 800538c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005390:	801a      	strh	r2, [r3, #0]
 8005392:	e023      	b.n	80053dc <USB_EPStartXfer+0x11d8>
 8005394:	463b      	mov	r3, r7
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	785b      	ldrb	r3, [r3, #1]
 800539a:	2b01      	cmp	r3, #1
 800539c:	d11e      	bne.n	80053dc <USB_EPStartXfer+0x11d8>
 800539e:	1d3b      	adds	r3, r7, #4
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	461a      	mov	r2, r3
 80053aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80053ae:	4413      	add	r3, r2
 80053b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80053b4:	463b      	mov	r3, r7
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	011a      	lsls	r2, r3, #4
 80053bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80053c0:	4413      	add	r3, r2
 80053c2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80053c6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80053ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053ce:	b29a      	uxth	r2, r3
 80053d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80053d4:	801a      	strh	r2, [r3, #0]
 80053d6:	e001      	b.n	80053dc <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	e02e      	b.n	800543a <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80053dc:	1d3b      	adds	r3, r7, #4
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	463b      	mov	r3, r7
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	781b      	ldrb	r3, [r3, #0]
 80053e6:	009b      	lsls	r3, r3, #2
 80053e8:	4413      	add	r3, r2
 80053ea:	881b      	ldrh	r3, [r3, #0]
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053f6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80053fa:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80053fe:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005402:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005406:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800540a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800540e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005412:	1d3b      	adds	r3, r7, #4
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	463b      	mov	r3, r7
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	781b      	ldrb	r3, [r3, #0]
 800541c:	009b      	lsls	r3, r3, #2
 800541e:	441a      	add	r2, r3
 8005420:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005424:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005428:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800542c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005430:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005434:	b29b      	uxth	r3, r3
 8005436:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005438:	2300      	movs	r3, #0
}
 800543a:	4618      	mov	r0, r3
 800543c:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}

08005444 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005444:	b480      	push	{r7}
 8005446:	b085      	sub	sp, #20
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	785b      	ldrb	r3, [r3, #1]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d020      	beq.n	8005498 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	4413      	add	r3, r2
 8005460:	881b      	ldrh	r3, [r3, #0]
 8005462:	b29b      	uxth	r3, r3
 8005464:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005468:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800546c:	81bb      	strh	r3, [r7, #12]
 800546e:	89bb      	ldrh	r3, [r7, #12]
 8005470:	f083 0310 	eor.w	r3, r3, #16
 8005474:	81bb      	strh	r3, [r7, #12]
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	441a      	add	r2, r3
 8005480:	89bb      	ldrh	r3, [r7, #12]
 8005482:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005486:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800548a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800548e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005492:	b29b      	uxth	r3, r3
 8005494:	8013      	strh	r3, [r2, #0]
 8005496:	e01f      	b.n	80054d8 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	781b      	ldrb	r3, [r3, #0]
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	4413      	add	r3, r2
 80054a2:	881b      	ldrh	r3, [r3, #0]
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054ae:	81fb      	strh	r3, [r7, #14]
 80054b0:	89fb      	ldrh	r3, [r7, #14]
 80054b2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80054b6:	81fb      	strh	r3, [r7, #14]
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	781b      	ldrb	r3, [r3, #0]
 80054be:	009b      	lsls	r3, r3, #2
 80054c0:	441a      	add	r2, r3
 80054c2:	89fb      	ldrh	r3, [r7, #14]
 80054c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80054d8:	2300      	movs	r3, #0
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3714      	adds	r7, #20
 80054de:	46bd      	mov	sp, r7
 80054e0:	bc80      	pop	{r7}
 80054e2:	4770      	bx	lr

080054e4 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b087      	sub	sp, #28
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	7b1b      	ldrb	r3, [r3, #12]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	f040 809d 	bne.w	8005632 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	785b      	ldrb	r3, [r3, #1]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d04c      	beq.n	800559a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	009b      	lsls	r3, r3, #2
 8005508:	4413      	add	r3, r2
 800550a:	881b      	ldrh	r3, [r3, #0]
 800550c:	823b      	strh	r3, [r7, #16]
 800550e:	8a3b      	ldrh	r3, [r7, #16]
 8005510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005514:	2b00      	cmp	r3, #0
 8005516:	d01b      	beq.n	8005550 <USB_EPClearStall+0x6c>
 8005518:	687a      	ldr	r2, [r7, #4]
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	781b      	ldrb	r3, [r3, #0]
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	4413      	add	r3, r2
 8005522:	881b      	ldrh	r3, [r3, #0]
 8005524:	b29b      	uxth	r3, r3
 8005526:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800552a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800552e:	81fb      	strh	r3, [r7, #14]
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	441a      	add	r2, r3
 800553a:	89fb      	ldrh	r3, [r7, #14]
 800553c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005540:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005544:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005548:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800554c:	b29b      	uxth	r3, r3
 800554e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	78db      	ldrb	r3, [r3, #3]
 8005554:	2b01      	cmp	r3, #1
 8005556:	d06c      	beq.n	8005632 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	4413      	add	r3, r2
 8005562:	881b      	ldrh	r3, [r3, #0]
 8005564:	b29b      	uxth	r3, r3
 8005566:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800556a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800556e:	81bb      	strh	r3, [r7, #12]
 8005570:	89bb      	ldrh	r3, [r7, #12]
 8005572:	f083 0320 	eor.w	r3, r3, #32
 8005576:	81bb      	strh	r3, [r7, #12]
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	781b      	ldrb	r3, [r3, #0]
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	441a      	add	r2, r3
 8005582:	89bb      	ldrh	r3, [r7, #12]
 8005584:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005588:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800558c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005590:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005594:	b29b      	uxth	r3, r3
 8005596:	8013      	strh	r3, [r2, #0]
 8005598:	e04b      	b.n	8005632 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	4413      	add	r3, r2
 80055a4:	881b      	ldrh	r3, [r3, #0]
 80055a6:	82fb      	strh	r3, [r7, #22]
 80055a8:	8afb      	ldrh	r3, [r7, #22]
 80055aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d01b      	beq.n	80055ea <USB_EPClearStall+0x106>
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	4413      	add	r3, r2
 80055bc:	881b      	ldrh	r3, [r3, #0]
 80055be:	b29b      	uxth	r3, r3
 80055c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055c8:	82bb      	strh	r3, [r7, #20]
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	441a      	add	r2, r3
 80055d4:	8abb      	ldrh	r3, [r7, #20]
 80055d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80055e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	009b      	lsls	r3, r3, #2
 80055f2:	4413      	add	r3, r2
 80055f4:	881b      	ldrh	r3, [r3, #0]
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005600:	827b      	strh	r3, [r7, #18]
 8005602:	8a7b      	ldrh	r3, [r7, #18]
 8005604:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005608:	827b      	strh	r3, [r7, #18]
 800560a:	8a7b      	ldrh	r3, [r7, #18]
 800560c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005610:	827b      	strh	r3, [r7, #18]
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	009b      	lsls	r3, r3, #2
 800561a:	441a      	add	r2, r3
 800561c:	8a7b      	ldrh	r3, [r7, #18]
 800561e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005622:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005626:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800562a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800562e:	b29b      	uxth	r3, r3
 8005630:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005632:	2300      	movs	r3, #0
}
 8005634:	4618      	mov	r0, r3
 8005636:	371c      	adds	r7, #28
 8005638:	46bd      	mov	sp, r7
 800563a:	bc80      	pop	{r7}
 800563c:	4770      	bx	lr

0800563e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800563e:	b480      	push	{r7}
 8005640:	b083      	sub	sp, #12
 8005642:	af00      	add	r7, sp, #0
 8005644:	6078      	str	r0, [r7, #4]
 8005646:	460b      	mov	r3, r1
 8005648:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800564a:	78fb      	ldrb	r3, [r7, #3]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d103      	bne.n	8005658 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2280      	movs	r2, #128	; 0x80
 8005654:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005658:	2300      	movs	r3, #0
}
 800565a:	4618      	mov	r0, r3
 800565c:	370c      	adds	r7, #12
 800565e:	46bd      	mov	sp, r7
 8005660:	bc80      	pop	{r7}
 8005662:	4770      	bx	lr

08005664 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005664:	b480      	push	{r7}
 8005666:	b083      	sub	sp, #12
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800566c:	2300      	movs	r3, #0
}
 800566e:	4618      	mov	r0, r3
 8005670:	370c      	adds	r7, #12
 8005672:	46bd      	mov	sp, r7
 8005674:	bc80      	pop	{r7}
 8005676:	4770      	bx	lr

08005678 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8005678:	b480      	push	{r7}
 800567a:	b083      	sub	sp, #12
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005680:	2300      	movs	r3, #0
}
 8005682:	4618      	mov	r0, r3
 8005684:	370c      	adds	r7, #12
 8005686:	46bd      	mov	sp, r7
 8005688:	bc80      	pop	{r7}
 800568a:	4770      	bx	lr

0800568c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800568c:	b480      	push	{r7}
 800568e:	b085      	sub	sp, #20
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800569a:	b29b      	uxth	r3, r3
 800569c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800569e:	68fb      	ldr	r3, [r7, #12]
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3714      	adds	r7, #20
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bc80      	pop	{r7}
 80056a8:	4770      	bx	lr

080056aa <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80056aa:	b480      	push	{r7}
 80056ac:	b083      	sub	sp, #12
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	6078      	str	r0, [r7, #4]
 80056b2:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80056b4:	2300      	movs	r3, #0
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	370c      	adds	r7, #12
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bc80      	pop	{r7}
 80056be:	4770      	bx	lr

080056c0 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b08d      	sub	sp, #52	; 0x34
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	60f8      	str	r0, [r7, #12]
 80056c8:	60b9      	str	r1, [r7, #8]
 80056ca:	4611      	mov	r1, r2
 80056cc:	461a      	mov	r2, r3
 80056ce:	460b      	mov	r3, r1
 80056d0:	80fb      	strh	r3, [r7, #6]
 80056d2:	4613      	mov	r3, r2
 80056d4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80056d6:	88bb      	ldrh	r3, [r7, #4]
 80056d8:	3301      	adds	r3, #1
 80056da:	085b      	lsrs	r3, r3, #1
 80056dc:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80056e6:	88fb      	ldrh	r3, [r7, #6]
 80056e8:	005a      	lsls	r2, r3, #1
 80056ea:	69fb      	ldr	r3, [r7, #28]
 80056ec:	4413      	add	r3, r2
 80056ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056f2:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80056f4:	6a3b      	ldr	r3, [r7, #32]
 80056f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056f8:	e01e      	b.n	8005738 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80056fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8005700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005702:	3301      	adds	r3, #1
 8005704:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8005706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005708:	781b      	ldrb	r3, [r3, #0]
 800570a:	b29b      	uxth	r3, r3
 800570c:	021b      	lsls	r3, r3, #8
 800570e:	b29b      	uxth	r3, r3
 8005710:	461a      	mov	r2, r3
 8005712:	69bb      	ldr	r3, [r7, #24]
 8005714:	4313      	orrs	r3, r2
 8005716:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	b29a      	uxth	r2, r3
 800571c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800571e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005722:	3302      	adds	r3, #2
 8005724:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8005726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005728:	3302      	adds	r3, #2
 800572a:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800572c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572e:	3301      	adds	r3, #1
 8005730:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8005732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005734:	3b01      	subs	r3, #1
 8005736:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800573a:	2b00      	cmp	r3, #0
 800573c:	d1dd      	bne.n	80056fa <USB_WritePMA+0x3a>
  }
}
 800573e:	bf00      	nop
 8005740:	3734      	adds	r7, #52	; 0x34
 8005742:	46bd      	mov	sp, r7
 8005744:	bc80      	pop	{r7}
 8005746:	4770      	bx	lr

08005748 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005748:	b480      	push	{r7}
 800574a:	b08b      	sub	sp, #44	; 0x2c
 800574c:	af00      	add	r7, sp, #0
 800574e:	60f8      	str	r0, [r7, #12]
 8005750:	60b9      	str	r1, [r7, #8]
 8005752:	4611      	mov	r1, r2
 8005754:	461a      	mov	r2, r3
 8005756:	460b      	mov	r3, r1
 8005758:	80fb      	strh	r3, [r7, #6]
 800575a:	4613      	mov	r3, r2
 800575c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800575e:	88bb      	ldrh	r3, [r7, #4]
 8005760:	085b      	lsrs	r3, r3, #1
 8005762:	b29b      	uxth	r3, r3
 8005764:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800576e:	88fb      	ldrh	r3, [r7, #6]
 8005770:	005a      	lsls	r2, r3, #1
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	4413      	add	r3, r2
 8005776:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800577a:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800577c:	69bb      	ldr	r3, [r7, #24]
 800577e:	627b      	str	r3, [r7, #36]	; 0x24
 8005780:	e01b      	b.n	80057ba <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8005782:	6a3b      	ldr	r3, [r7, #32]
 8005784:	881b      	ldrh	r3, [r3, #0]
 8005786:	b29b      	uxth	r3, r3
 8005788:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800578a:	6a3b      	ldr	r3, [r7, #32]
 800578c:	3302      	adds	r3, #2
 800578e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	b2da      	uxtb	r2, r3
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005798:	69fb      	ldr	r3, [r7, #28]
 800579a:	3301      	adds	r3, #1
 800579c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	0a1b      	lsrs	r3, r3, #8
 80057a2:	b2da      	uxtb	r2, r3
 80057a4:	69fb      	ldr	r3, [r7, #28]
 80057a6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80057a8:	69fb      	ldr	r3, [r7, #28]
 80057aa:	3301      	adds	r3, #1
 80057ac:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80057ae:	6a3b      	ldr	r3, [r7, #32]
 80057b0:	3302      	adds	r3, #2
 80057b2:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80057b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b6:	3b01      	subs	r3, #1
 80057b8:	627b      	str	r3, [r7, #36]	; 0x24
 80057ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d1e0      	bne.n	8005782 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80057c0:	88bb      	ldrh	r3, [r7, #4]
 80057c2:	f003 0301 	and.w	r3, r3, #1
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d007      	beq.n	80057dc <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80057cc:	6a3b      	ldr	r3, [r7, #32]
 80057ce:	881b      	ldrh	r3, [r3, #0]
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	b2da      	uxtb	r2, r3
 80057d8:	69fb      	ldr	r3, [r7, #28]
 80057da:	701a      	strb	r2, [r3, #0]
  }
}
 80057dc:	bf00      	nop
 80057de:	372c      	adds	r7, #44	; 0x2c
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bc80      	pop	{r7}
 80057e4:	4770      	bx	lr

080057e6 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80057e6:	b580      	push	{r7, lr}
 80057e8:	b084      	sub	sp, #16
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	6078      	str	r0, [r7, #4]
 80057ee:	460b      	mov	r3, r1
 80057f0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80057f2:	2300      	movs	r3, #0
 80057f4:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	7c1b      	ldrb	r3, [r3, #16]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d115      	bne.n	800582a <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80057fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005802:	2202      	movs	r2, #2
 8005804:	2181      	movs	r1, #129	; 0x81
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f001 fe83 	bl	8007512 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2201      	movs	r2, #1
 8005810:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005812:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005816:	2202      	movs	r2, #2
 8005818:	2101      	movs	r1, #1
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f001 fe79 	bl	8007512 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2201      	movs	r2, #1
 8005824:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8005828:	e012      	b.n	8005850 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800582a:	2340      	movs	r3, #64	; 0x40
 800582c:	2202      	movs	r2, #2
 800582e:	2181      	movs	r1, #129	; 0x81
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f001 fe6e 	bl	8007512 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2201      	movs	r2, #1
 800583a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800583c:	2340      	movs	r3, #64	; 0x40
 800583e:	2202      	movs	r2, #2
 8005840:	2101      	movs	r1, #1
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f001 fe65 	bl	8007512 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2201      	movs	r2, #1
 800584c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005850:	2308      	movs	r3, #8
 8005852:	2203      	movs	r2, #3
 8005854:	2182      	movs	r1, #130	; 0x82
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f001 fe5b 	bl	8007512 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005862:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005866:	f001 ff7b 	bl	8007760 <USBD_static_malloc>
 800586a:	4602      	mov	r2, r0
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005878:	2b00      	cmp	r3, #0
 800587a:	d102      	bne.n	8005882 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800587c:	2301      	movs	r3, #1
 800587e:	73fb      	strb	r3, [r7, #15]
 8005880:	e026      	b.n	80058d0 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005888:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	2200      	movs	r2, #0
 8005898:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	2200      	movs	r2, #0
 80058a0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	7c1b      	ldrb	r3, [r3, #16]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d109      	bne.n	80058c0 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80058b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80058b6:	2101      	movs	r1, #1
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f001 ff1b 	bl	80076f4 <USBD_LL_PrepareReceive>
 80058be:	e007      	b.n	80058d0 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80058c6:	2340      	movs	r3, #64	; 0x40
 80058c8:	2101      	movs	r1, #1
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f001 ff12 	bl	80076f4 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80058d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3710      	adds	r7, #16
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}

080058da <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80058da:	b580      	push	{r7, lr}
 80058dc:	b084      	sub	sp, #16
 80058de:	af00      	add	r7, sp, #0
 80058e0:	6078      	str	r0, [r7, #4]
 80058e2:	460b      	mov	r3, r1
 80058e4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80058e6:	2300      	movs	r3, #0
 80058e8:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80058ea:	2181      	movs	r1, #129	; 0x81
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f001 fe36 	bl	800755e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2200      	movs	r2, #0
 80058f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80058f8:	2101      	movs	r1, #1
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f001 fe2f 	bl	800755e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005908:	2182      	movs	r1, #130	; 0x82
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f001 fe27 	bl	800755e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2200      	movs	r2, #0
 8005914:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800591c:	2b00      	cmp	r3, #0
 800591e:	d00e      	beq.n	800593e <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005930:	4618      	mov	r0, r3
 8005932:	f001 ff21 	bl	8007778 <USBD_static_free>
    pdev->pClassData = NULL;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800593e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005940:	4618      	mov	r0, r3
 8005942:	3710      	adds	r7, #16
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}

08005948 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b086      	sub	sp, #24
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005958:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800595a:	2300      	movs	r3, #0
 800595c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800595e:	2300      	movs	r3, #0
 8005960:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8005962:	2300      	movs	r3, #0
 8005964:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800596e:	2b00      	cmp	r3, #0
 8005970:	d039      	beq.n	80059e6 <USBD_CDC_Setup+0x9e>
 8005972:	2b20      	cmp	r3, #32
 8005974:	d17c      	bne.n	8005a70 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	88db      	ldrh	r3, [r3, #6]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d029      	beq.n	80059d2 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	781b      	ldrb	r3, [r3, #0]
 8005982:	b25b      	sxtb	r3, r3
 8005984:	2b00      	cmp	r3, #0
 8005986:	da11      	bge.n	80059ac <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	683a      	ldr	r2, [r7, #0]
 8005992:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8005994:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005996:	683a      	ldr	r2, [r7, #0]
 8005998:	88d2      	ldrh	r2, [r2, #6]
 800599a:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800599c:	6939      	ldr	r1, [r7, #16]
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	88db      	ldrh	r3, [r3, #6]
 80059a2:	461a      	mov	r2, r3
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f001 f9f9 	bl	8006d9c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80059aa:	e068      	b.n	8005a7e <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	785a      	ldrb	r2, [r3, #1]
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	88db      	ldrh	r3, [r3, #6]
 80059ba:	b2da      	uxtb	r2, r3
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80059c2:	6939      	ldr	r1, [r7, #16]
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	88db      	ldrh	r3, [r3, #6]
 80059c8:	461a      	mov	r2, r3
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f001 fa14 	bl	8006df8 <USBD_CtlPrepareRx>
      break;
 80059d0:	e055      	b.n	8005a7e <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	683a      	ldr	r2, [r7, #0]
 80059dc:	7850      	ldrb	r0, [r2, #1]
 80059de:	2200      	movs	r2, #0
 80059e0:	6839      	ldr	r1, [r7, #0]
 80059e2:	4798      	blx	r3
      break;
 80059e4:	e04b      	b.n	8005a7e <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	785b      	ldrb	r3, [r3, #1]
 80059ea:	2b0a      	cmp	r3, #10
 80059ec:	d017      	beq.n	8005a1e <USBD_CDC_Setup+0xd6>
 80059ee:	2b0b      	cmp	r3, #11
 80059f0:	d029      	beq.n	8005a46 <USBD_CDC_Setup+0xfe>
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d133      	bne.n	8005a5e <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059fc:	2b03      	cmp	r3, #3
 80059fe:	d107      	bne.n	8005a10 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8005a00:	f107 030c 	add.w	r3, r7, #12
 8005a04:	2202      	movs	r2, #2
 8005a06:	4619      	mov	r1, r3
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f001 f9c7 	bl	8006d9c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005a0e:	e02e      	b.n	8005a6e <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8005a10:	6839      	ldr	r1, [r7, #0]
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f001 f958 	bl	8006cc8 <USBD_CtlError>
            ret = USBD_FAIL;
 8005a18:	2302      	movs	r3, #2
 8005a1a:	75fb      	strb	r3, [r7, #23]
          break;
 8005a1c:	e027      	b.n	8005a6e <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a24:	2b03      	cmp	r3, #3
 8005a26:	d107      	bne.n	8005a38 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8005a28:	f107 030f 	add.w	r3, r7, #15
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	4619      	mov	r1, r3
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f001 f9b3 	bl	8006d9c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005a36:	e01a      	b.n	8005a6e <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8005a38:	6839      	ldr	r1, [r7, #0]
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f001 f944 	bl	8006cc8 <USBD_CtlError>
            ret = USBD_FAIL;
 8005a40:	2302      	movs	r3, #2
 8005a42:	75fb      	strb	r3, [r7, #23]
          break;
 8005a44:	e013      	b.n	8005a6e <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a4c:	2b03      	cmp	r3, #3
 8005a4e:	d00d      	beq.n	8005a6c <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8005a50:	6839      	ldr	r1, [r7, #0]
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f001 f938 	bl	8006cc8 <USBD_CtlError>
            ret = USBD_FAIL;
 8005a58:	2302      	movs	r3, #2
 8005a5a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005a5c:	e006      	b.n	8005a6c <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8005a5e:	6839      	ldr	r1, [r7, #0]
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f001 f931 	bl	8006cc8 <USBD_CtlError>
          ret = USBD_FAIL;
 8005a66:	2302      	movs	r3, #2
 8005a68:	75fb      	strb	r3, [r7, #23]
          break;
 8005a6a:	e000      	b.n	8005a6e <USBD_CDC_Setup+0x126>
          break;
 8005a6c:	bf00      	nop
      }
      break;
 8005a6e:	e006      	b.n	8005a7e <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8005a70:	6839      	ldr	r1, [r7, #0]
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f001 f928 	bl	8006cc8 <USBD_CtlError>
      ret = USBD_FAIL;
 8005a78:	2302      	movs	r3, #2
 8005a7a:	75fb      	strb	r3, [r7, #23]
      break;
 8005a7c:	bf00      	nop
  }

  return ret;
 8005a7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3718      	adds	r7, #24
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}

08005a88 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b084      	sub	sp, #16
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	460b      	mov	r3, r1
 8005a92:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a9a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005aa2:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d03a      	beq.n	8005b24 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005aae:	78fa      	ldrb	r2, [r7, #3]
 8005ab0:	6879      	ldr	r1, [r7, #4]
 8005ab2:	4613      	mov	r3, r2
 8005ab4:	009b      	lsls	r3, r3, #2
 8005ab6:	4413      	add	r3, r2
 8005ab8:	009b      	lsls	r3, r3, #2
 8005aba:	440b      	add	r3, r1
 8005abc:	331c      	adds	r3, #28
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d029      	beq.n	8005b18 <USBD_CDC_DataIn+0x90>
 8005ac4:	78fa      	ldrb	r2, [r7, #3]
 8005ac6:	6879      	ldr	r1, [r7, #4]
 8005ac8:	4613      	mov	r3, r2
 8005aca:	009b      	lsls	r3, r3, #2
 8005acc:	4413      	add	r3, r2
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	440b      	add	r3, r1
 8005ad2:	331c      	adds	r3, #28
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	78f9      	ldrb	r1, [r7, #3]
 8005ad8:	68b8      	ldr	r0, [r7, #8]
 8005ada:	460b      	mov	r3, r1
 8005adc:	009b      	lsls	r3, r3, #2
 8005ade:	440b      	add	r3, r1
 8005ae0:	00db      	lsls	r3, r3, #3
 8005ae2:	4403      	add	r3, r0
 8005ae4:	3338      	adds	r3, #56	; 0x38
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	fbb2 f1f3 	udiv	r1, r2, r3
 8005aec:	fb03 f301 	mul.w	r3, r3, r1
 8005af0:	1ad3      	subs	r3, r2, r3
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d110      	bne.n	8005b18 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8005af6:	78fa      	ldrb	r2, [r7, #3]
 8005af8:	6879      	ldr	r1, [r7, #4]
 8005afa:	4613      	mov	r3, r2
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	4413      	add	r3, r2
 8005b00:	009b      	lsls	r3, r3, #2
 8005b02:	440b      	add	r3, r1
 8005b04:	331c      	adds	r3, #28
 8005b06:	2200      	movs	r2, #0
 8005b08:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005b0a:	78f9      	ldrb	r1, [r7, #3]
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	2200      	movs	r2, #0
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f001 fdcc 	bl	80076ae <USBD_LL_Transmit>
 8005b16:	e003      	b.n	8005b20 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8005b20:	2300      	movs	r3, #0
 8005b22:	e000      	b.n	8005b26 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8005b24:	2302      	movs	r3, #2
  }
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3710      	adds	r7, #16
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}

08005b2e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005b2e:	b580      	push	{r7, lr}
 8005b30:	b084      	sub	sp, #16
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	6078      	str	r0, [r7, #4]
 8005b36:	460b      	mov	r3, r1
 8005b38:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b40:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005b42:	78fb      	ldrb	r3, [r7, #3]
 8005b44:	4619      	mov	r1, r3
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f001 fdf7 	bl	800773a <USBD_LL_GetRxDataSize>
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d00d      	beq.n	8005b7a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	68fa      	ldr	r2, [r7, #12]
 8005b68:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005b6c:	68fa      	ldr	r2, [r7, #12]
 8005b6e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005b72:	4611      	mov	r1, r2
 8005b74:	4798      	blx	r3

    return USBD_OK;
 8005b76:	2300      	movs	r3, #0
 8005b78:	e000      	b.n	8005b7c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8005b7a:	2302      	movs	r3, #2
  }
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3710      	adds	r7, #16
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b084      	sub	sp, #16
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b92:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d015      	beq.n	8005bca <USBD_CDC_EP0_RxReady+0x46>
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005ba4:	2bff      	cmp	r3, #255	; 0xff
 8005ba6:	d010      	beq.n	8005bca <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	68fa      	ldr	r2, [r7, #12]
 8005bb2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8005bb6:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005bb8:	68fa      	ldr	r2, [r7, #12]
 8005bba:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005bbe:	b292      	uxth	r2, r2
 8005bc0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	22ff      	movs	r2, #255	; 0xff
 8005bc6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8005bca:	2300      	movs	r3, #0
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3710      	adds	r7, #16
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}

08005bd4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b083      	sub	sp, #12
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2243      	movs	r2, #67	; 0x43
 8005be0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8005be2:	4b03      	ldr	r3, [pc, #12]	; (8005bf0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	370c      	adds	r7, #12
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bc80      	pop	{r7}
 8005bec:	4770      	bx	lr
 8005bee:	bf00      	nop
 8005bf0:	20000094 	.word	0x20000094

08005bf4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b083      	sub	sp, #12
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2243      	movs	r2, #67	; 0x43
 8005c00:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8005c02:	4b03      	ldr	r3, [pc, #12]	; (8005c10 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	370c      	adds	r7, #12
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bc80      	pop	{r7}
 8005c0c:	4770      	bx	lr
 8005c0e:	bf00      	nop
 8005c10:	20000050 	.word	0x20000050

08005c14 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b083      	sub	sp, #12
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2243      	movs	r2, #67	; 0x43
 8005c20:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8005c22:	4b03      	ldr	r3, [pc, #12]	; (8005c30 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	370c      	adds	r7, #12
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bc80      	pop	{r7}
 8005c2c:	4770      	bx	lr
 8005c2e:	bf00      	nop
 8005c30:	200000d8 	.word	0x200000d8

08005c34 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b083      	sub	sp, #12
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	220a      	movs	r2, #10
 8005c40:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8005c42:	4b03      	ldr	r3, [pc, #12]	; (8005c50 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	370c      	adds	r7, #12
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bc80      	pop	{r7}
 8005c4c:	4770      	bx	lr
 8005c4e:	bf00      	nop
 8005c50:	2000000c 	.word	0x2000000c

08005c54 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b085      	sub	sp, #20
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
 8005c5c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8005c5e:	2302      	movs	r3, #2
 8005c60:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d005      	beq.n	8005c74 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	683a      	ldr	r2, [r7, #0]
 8005c6c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8005c70:	2300      	movs	r3, #0
 8005c72:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3714      	adds	r7, #20
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bc80      	pop	{r7}
 8005c7e:	4770      	bx	lr

08005c80 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b087      	sub	sp, #28
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	60b9      	str	r1, [r7, #8]
 8005c8a:	4613      	mov	r3, r2
 8005c8c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c94:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	68ba      	ldr	r2, [r7, #8]
 8005c9a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005c9e:	88fa      	ldrh	r2, [r7, #6]
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8005ca6:	2300      	movs	r3, #0
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	371c      	adds	r7, #28
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bc80      	pop	{r7}
 8005cb0:	4770      	bx	lr

08005cb2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8005cb2:	b480      	push	{r7}
 8005cb4:	b085      	sub	sp, #20
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	6078      	str	r0, [r7, #4]
 8005cba:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cc2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	683a      	ldr	r2, [r7, #0]
 8005cc8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8005ccc:	2300      	movs	r3, #0
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3714      	adds	r7, #20
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bc80      	pop	{r7}
 8005cd6:	4770      	bx	lr

08005cd8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b084      	sub	sp, #16
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ce6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d01c      	beq.n	8005d2c <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d115      	bne.n	8005d28 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	2181      	movs	r1, #129	; 0x81
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f001 fcc5 	bl	80076ae <USBD_LL_Transmit>

      return USBD_OK;
 8005d24:	2300      	movs	r3, #0
 8005d26:	e002      	b.n	8005d2e <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e000      	b.n	8005d2e <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8005d2c:	2302      	movs	r3, #2
  }
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3710      	adds	r7, #16
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}

08005d36 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005d36:	b580      	push	{r7, lr}
 8005d38:	b084      	sub	sp, #16
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d44:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d017      	beq.n	8005d80 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	7c1b      	ldrb	r3, [r3, #16]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d109      	bne.n	8005d6c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005d5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d62:	2101      	movs	r1, #1
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	f001 fcc5 	bl	80076f4 <USBD_LL_PrepareReceive>
 8005d6a:	e007      	b.n	8005d7c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005d72:	2340      	movs	r3, #64	; 0x40
 8005d74:	2101      	movs	r1, #1
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f001 fcbc 	bl	80076f4 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	e000      	b.n	8005d82 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8005d80:	2302      	movs	r3, #2
  }
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3710      	adds	r7, #16
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}

08005d8a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005d8a:	b580      	push	{r7, lr}
 8005d8c:	b084      	sub	sp, #16
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	60f8      	str	r0, [r7, #12]
 8005d92:	60b9      	str	r1, [r7, #8]
 8005d94:	4613      	mov	r3, r2
 8005d96:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d101      	bne.n	8005da2 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005d9e:	2302      	movs	r3, #2
 8005da0:	e01a      	b.n	8005dd8 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d003      	beq.n	8005db4 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2200      	movs	r2, #0
 8005db0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d003      	beq.n	8005dc2 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	68ba      	ldr	r2, [r7, #8]
 8005dbe:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	79fa      	ldrb	r2, [r7, #7]
 8005dce:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005dd0:	68f8      	ldr	r0, [r7, #12]
 8005dd2:	f001 fb29 	bl	8007428 <USBD_LL_Init>

  return USBD_OK;
 8005dd6:	2300      	movs	r3, #0
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3710      	adds	r7, #16
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}

08005de0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b085      	sub	sp, #20
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8005dea:	2300      	movs	r3, #0
 8005dec:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d006      	beq.n	8005e02 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	683a      	ldr	r2, [r7, #0]
 8005df8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	73fb      	strb	r3, [r7, #15]
 8005e00:	e001      	b.n	8005e06 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005e02:	2302      	movs	r3, #2
 8005e04:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005e06:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3714      	adds	r7, #20
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bc80      	pop	{r7}
 8005e10:	4770      	bx	lr

08005e12 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005e12:	b580      	push	{r7, lr}
 8005e14:	b082      	sub	sp, #8
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f001 fb5e 	bl	80074dc <USBD_LL_Start>

  return USBD_OK;
 8005e20:	2300      	movs	r3, #0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3708      	adds	r7, #8
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}

08005e2a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005e2a:	b480      	push	{r7}
 8005e2c:	b083      	sub	sp, #12
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005e32:	2300      	movs	r3, #0
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	370c      	adds	r7, #12
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bc80      	pop	{r7}
 8005e3c:	4770      	bx	lr

08005e3e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005e3e:	b580      	push	{r7, lr}
 8005e40:	b084      	sub	sp, #16
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	6078      	str	r0, [r7, #4]
 8005e46:	460b      	mov	r3, r1
 8005e48:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005e4a:	2302      	movs	r3, #2
 8005e4c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d00c      	beq.n	8005e72 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	78fa      	ldrb	r2, [r7, #3]
 8005e62:	4611      	mov	r1, r2
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	4798      	blx	r3
 8005e68:	4603      	mov	r3, r0
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d101      	bne.n	8005e72 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8005e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3710      	adds	r7, #16
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}

08005e7c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b082      	sub	sp, #8
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	460b      	mov	r3, r1
 8005e86:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	78fa      	ldrb	r2, [r7, #3]
 8005e92:	4611      	mov	r1, r2
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	4798      	blx	r3

  return USBD_OK;
 8005e98:	2300      	movs	r3, #0
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3708      	adds	r7, #8
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}

08005ea2 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005ea2:	b580      	push	{r7, lr}
 8005ea4:	b082      	sub	sp, #8
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	6078      	str	r0, [r7, #4]
 8005eaa:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005eb2:	6839      	ldr	r1, [r7, #0]
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f000 fecb 	bl	8006c50 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005ec8:	461a      	mov	r2, r3
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005ed6:	f003 031f 	and.w	r3, r3, #31
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d00c      	beq.n	8005ef8 <USBD_LL_SetupStage+0x56>
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	d302      	bcc.n	8005ee8 <USBD_LL_SetupStage+0x46>
 8005ee2:	2b02      	cmp	r3, #2
 8005ee4:	d010      	beq.n	8005f08 <USBD_LL_SetupStage+0x66>
 8005ee6:	e017      	b.n	8005f18 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005eee:	4619      	mov	r1, r3
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f000 f9cb 	bl	800628c <USBD_StdDevReq>
      break;
 8005ef6:	e01a      	b.n	8005f2e <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005efe:	4619      	mov	r1, r3
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f000 fa2d 	bl	8006360 <USBD_StdItfReq>
      break;
 8005f06:	e012      	b.n	8005f2e <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005f0e:	4619      	mov	r1, r3
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f000 fa6b 	bl	80063ec <USBD_StdEPReq>
      break;
 8005f16:	e00a      	b.n	8005f2e <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005f1e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005f22:	b2db      	uxtb	r3, r3
 8005f24:	4619      	mov	r1, r3
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f001 fb38 	bl	800759c <USBD_LL_StallEP>
      break;
 8005f2c:	bf00      	nop
  }

  return USBD_OK;
 8005f2e:	2300      	movs	r3, #0
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3708      	adds	r7, #8
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}

08005f38 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b086      	sub	sp, #24
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	60f8      	str	r0, [r7, #12]
 8005f40:	460b      	mov	r3, r1
 8005f42:	607a      	str	r2, [r7, #4]
 8005f44:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005f46:	7afb      	ldrb	r3, [r7, #11]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d14b      	bne.n	8005fe4 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005f52:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005f5a:	2b03      	cmp	r3, #3
 8005f5c:	d134      	bne.n	8005fc8 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	68da      	ldr	r2, [r3, #12]
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	691b      	ldr	r3, [r3, #16]
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d919      	bls.n	8005f9e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	68da      	ldr	r2, [r3, #12]
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	691b      	ldr	r3, [r3, #16]
 8005f72:	1ad2      	subs	r2, r2, r3
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	68da      	ldr	r2, [r3, #12]
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005f80:	429a      	cmp	r2, r3
 8005f82:	d203      	bcs.n	8005f8c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	e002      	b.n	8005f92 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	461a      	mov	r2, r3
 8005f94:	6879      	ldr	r1, [r7, #4]
 8005f96:	68f8      	ldr	r0, [r7, #12]
 8005f98:	f000 ff4c 	bl	8006e34 <USBD_CtlContinueRx>
 8005f9c:	e038      	b.n	8006010 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fa4:	691b      	ldr	r3, [r3, #16]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d00a      	beq.n	8005fc0 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005fb0:	2b03      	cmp	r3, #3
 8005fb2:	d105      	bne.n	8005fc0 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fba:	691b      	ldr	r3, [r3, #16]
 8005fbc:	68f8      	ldr	r0, [r7, #12]
 8005fbe:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005fc0:	68f8      	ldr	r0, [r7, #12]
 8005fc2:	f000 ff49 	bl	8006e58 <USBD_CtlSendStatus>
 8005fc6:	e023      	b.n	8006010 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005fce:	2b05      	cmp	r3, #5
 8005fd0:	d11e      	bne.n	8006010 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8005fda:	2100      	movs	r1, #0
 8005fdc:	68f8      	ldr	r0, [r7, #12]
 8005fde:	f001 fadd 	bl	800759c <USBD_LL_StallEP>
 8005fe2:	e015      	b.n	8006010 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fea:	699b      	ldr	r3, [r3, #24]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d00d      	beq.n	800600c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005ff6:	2b03      	cmp	r3, #3
 8005ff8:	d108      	bne.n	800600c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006000:	699b      	ldr	r3, [r3, #24]
 8006002:	7afa      	ldrb	r2, [r7, #11]
 8006004:	4611      	mov	r1, r2
 8006006:	68f8      	ldr	r0, [r7, #12]
 8006008:	4798      	blx	r3
 800600a:	e001      	b.n	8006010 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800600c:	2302      	movs	r3, #2
 800600e:	e000      	b.n	8006012 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006010:	2300      	movs	r3, #0
}
 8006012:	4618      	mov	r0, r3
 8006014:	3718      	adds	r7, #24
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}

0800601a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800601a:	b580      	push	{r7, lr}
 800601c:	b086      	sub	sp, #24
 800601e:	af00      	add	r7, sp, #0
 8006020:	60f8      	str	r0, [r7, #12]
 8006022:	460b      	mov	r3, r1
 8006024:	607a      	str	r2, [r7, #4]
 8006026:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006028:	7afb      	ldrb	r3, [r7, #11]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d17f      	bne.n	800612e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	3314      	adds	r3, #20
 8006032:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800603a:	2b02      	cmp	r3, #2
 800603c:	d15c      	bne.n	80060f8 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	68da      	ldr	r2, [r3, #12]
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	691b      	ldr	r3, [r3, #16]
 8006046:	429a      	cmp	r2, r3
 8006048:	d915      	bls.n	8006076 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	68da      	ldr	r2, [r3, #12]
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	691b      	ldr	r3, [r3, #16]
 8006052:	1ad2      	subs	r2, r2, r3
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	68db      	ldr	r3, [r3, #12]
 800605c:	b29b      	uxth	r3, r3
 800605e:	461a      	mov	r2, r3
 8006060:	6879      	ldr	r1, [r7, #4]
 8006062:	68f8      	ldr	r0, [r7, #12]
 8006064:	f000 feb6 	bl	8006dd4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006068:	2300      	movs	r3, #0
 800606a:	2200      	movs	r2, #0
 800606c:	2100      	movs	r1, #0
 800606e:	68f8      	ldr	r0, [r7, #12]
 8006070:	f001 fb40 	bl	80076f4 <USBD_LL_PrepareReceive>
 8006074:	e04e      	b.n	8006114 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	689b      	ldr	r3, [r3, #8]
 800607a:	697a      	ldr	r2, [r7, #20]
 800607c:	6912      	ldr	r2, [r2, #16]
 800607e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006082:	fb02 f201 	mul.w	r2, r2, r1
 8006086:	1a9b      	subs	r3, r3, r2
 8006088:	2b00      	cmp	r3, #0
 800608a:	d11c      	bne.n	80060c6 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	689a      	ldr	r2, [r3, #8]
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006094:	429a      	cmp	r2, r3
 8006096:	d316      	bcc.n	80060c6 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	689a      	ldr	r2, [r3, #8]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d20f      	bcs.n	80060c6 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80060a6:	2200      	movs	r2, #0
 80060a8:	2100      	movs	r1, #0
 80060aa:	68f8      	ldr	r0, [r7, #12]
 80060ac:	f000 fe92 	bl	8006dd4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2200      	movs	r2, #0
 80060b4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80060b8:	2300      	movs	r3, #0
 80060ba:	2200      	movs	r2, #0
 80060bc:	2100      	movs	r1, #0
 80060be:	68f8      	ldr	r0, [r7, #12]
 80060c0:	f001 fb18 	bl	80076f4 <USBD_LL_PrepareReceive>
 80060c4:	e026      	b.n	8006114 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060cc:	68db      	ldr	r3, [r3, #12]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d00a      	beq.n	80060e8 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80060d8:	2b03      	cmp	r3, #3
 80060da:	d105      	bne.n	80060e8 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060e2:	68db      	ldr	r3, [r3, #12]
 80060e4:	68f8      	ldr	r0, [r7, #12]
 80060e6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80060e8:	2180      	movs	r1, #128	; 0x80
 80060ea:	68f8      	ldr	r0, [r7, #12]
 80060ec:	f001 fa56 	bl	800759c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80060f0:	68f8      	ldr	r0, [r7, #12]
 80060f2:	f000 fec4 	bl	8006e7e <USBD_CtlReceiveStatus>
 80060f6:	e00d      	b.n	8006114 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80060fe:	2b04      	cmp	r3, #4
 8006100:	d004      	beq.n	800610c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006108:	2b00      	cmp	r3, #0
 800610a:	d103      	bne.n	8006114 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800610c:	2180      	movs	r1, #128	; 0x80
 800610e:	68f8      	ldr	r0, [r7, #12]
 8006110:	f001 fa44 	bl	800759c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800611a:	2b01      	cmp	r3, #1
 800611c:	d11d      	bne.n	800615a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800611e:	68f8      	ldr	r0, [r7, #12]
 8006120:	f7ff fe83 	bl	8005e2a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2200      	movs	r2, #0
 8006128:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800612c:	e015      	b.n	800615a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006134:	695b      	ldr	r3, [r3, #20]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d00d      	beq.n	8006156 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006140:	2b03      	cmp	r3, #3
 8006142:	d108      	bne.n	8006156 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800614a:	695b      	ldr	r3, [r3, #20]
 800614c:	7afa      	ldrb	r2, [r7, #11]
 800614e:	4611      	mov	r1, r2
 8006150:	68f8      	ldr	r0, [r7, #12]
 8006152:	4798      	blx	r3
 8006154:	e001      	b.n	800615a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006156:	2302      	movs	r3, #2
 8006158:	e000      	b.n	800615c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800615a:	2300      	movs	r3, #0
}
 800615c:	4618      	mov	r0, r3
 800615e:	3718      	adds	r7, #24
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}

08006164 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b082      	sub	sp, #8
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800616c:	2340      	movs	r3, #64	; 0x40
 800616e:	2200      	movs	r2, #0
 8006170:	2100      	movs	r1, #0
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f001 f9cd 	bl	8007512 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2201      	movs	r2, #1
 800617c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2240      	movs	r2, #64	; 0x40
 8006184:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006188:	2340      	movs	r3, #64	; 0x40
 800618a:	2200      	movs	r2, #0
 800618c:	2180      	movs	r1, #128	; 0x80
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f001 f9bf 	bl	8007512 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2201      	movs	r2, #1
 8006198:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2240      	movs	r2, #64	; 0x40
 800619e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2201      	movs	r2, #1
 80061a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2200      	movs	r2, #0
 80061ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2200      	movs	r2, #0
 80061b4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2200      	movs	r2, #0
 80061ba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d009      	beq.n	80061dc <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	687a      	ldr	r2, [r7, #4]
 80061d2:	6852      	ldr	r2, [r2, #4]
 80061d4:	b2d2      	uxtb	r2, r2
 80061d6:	4611      	mov	r1, r2
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	4798      	blx	r3
  }

  return USBD_OK;
 80061dc:	2300      	movs	r3, #0
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3708      	adds	r7, #8
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}

080061e6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80061e6:	b480      	push	{r7}
 80061e8:	b083      	sub	sp, #12
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	6078      	str	r0, [r7, #4]
 80061ee:	460b      	mov	r3, r1
 80061f0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	78fa      	ldrb	r2, [r7, #3]
 80061f6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80061f8:	2300      	movs	r3, #0
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	370c      	adds	r7, #12
 80061fe:	46bd      	mov	sp, r7
 8006200:	bc80      	pop	{r7}
 8006202:	4770      	bx	lr

08006204 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006204:	b480      	push	{r7}
 8006206:	b083      	sub	sp, #12
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2204      	movs	r2, #4
 800621c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006220:	2300      	movs	r3, #0
}
 8006222:	4618      	mov	r0, r3
 8006224:	370c      	adds	r7, #12
 8006226:	46bd      	mov	sp, r7
 8006228:	bc80      	pop	{r7}
 800622a:	4770      	bx	lr

0800622c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800622c:	b480      	push	{r7}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800623a:	2b04      	cmp	r3, #4
 800623c:	d105      	bne.n	800624a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800624a:	2300      	movs	r3, #0
}
 800624c:	4618      	mov	r0, r3
 800624e:	370c      	adds	r7, #12
 8006250:	46bd      	mov	sp, r7
 8006252:	bc80      	pop	{r7}
 8006254:	4770      	bx	lr

08006256 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006256:	b580      	push	{r7, lr}
 8006258:	b082      	sub	sp, #8
 800625a:	af00      	add	r7, sp, #0
 800625c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006264:	2b03      	cmp	r3, #3
 8006266:	d10b      	bne.n	8006280 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800626e:	69db      	ldr	r3, [r3, #28]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d005      	beq.n	8006280 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800627a:	69db      	ldr	r3, [r3, #28]
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006280:	2300      	movs	r3, #0
}
 8006282:	4618      	mov	r0, r3
 8006284:	3708      	adds	r7, #8
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}
	...

0800628c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b084      	sub	sp, #16
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006296:	2300      	movs	r3, #0
 8006298:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	781b      	ldrb	r3, [r3, #0]
 800629e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80062a2:	2b20      	cmp	r3, #32
 80062a4:	d004      	beq.n	80062b0 <USBD_StdDevReq+0x24>
 80062a6:	2b40      	cmp	r3, #64	; 0x40
 80062a8:	d002      	beq.n	80062b0 <USBD_StdDevReq+0x24>
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d008      	beq.n	80062c0 <USBD_StdDevReq+0x34>
 80062ae:	e04c      	b.n	800634a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	6839      	ldr	r1, [r7, #0]
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	4798      	blx	r3
      break;
 80062be:	e049      	b.n	8006354 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	785b      	ldrb	r3, [r3, #1]
 80062c4:	2b09      	cmp	r3, #9
 80062c6:	d83a      	bhi.n	800633e <USBD_StdDevReq+0xb2>
 80062c8:	a201      	add	r2, pc, #4	; (adr r2, 80062d0 <USBD_StdDevReq+0x44>)
 80062ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ce:	bf00      	nop
 80062d0:	08006321 	.word	0x08006321
 80062d4:	08006335 	.word	0x08006335
 80062d8:	0800633f 	.word	0x0800633f
 80062dc:	0800632b 	.word	0x0800632b
 80062e0:	0800633f 	.word	0x0800633f
 80062e4:	08006303 	.word	0x08006303
 80062e8:	080062f9 	.word	0x080062f9
 80062ec:	0800633f 	.word	0x0800633f
 80062f0:	08006317 	.word	0x08006317
 80062f4:	0800630d 	.word	0x0800630d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80062f8:	6839      	ldr	r1, [r7, #0]
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f000 f9d4 	bl	80066a8 <USBD_GetDescriptor>
          break;
 8006300:	e022      	b.n	8006348 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006302:	6839      	ldr	r1, [r7, #0]
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f000 fb37 	bl	8006978 <USBD_SetAddress>
          break;
 800630a:	e01d      	b.n	8006348 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800630c:	6839      	ldr	r1, [r7, #0]
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f000 fb74 	bl	80069fc <USBD_SetConfig>
          break;
 8006314:	e018      	b.n	8006348 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006316:	6839      	ldr	r1, [r7, #0]
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f000 fbfd 	bl	8006b18 <USBD_GetConfig>
          break;
 800631e:	e013      	b.n	8006348 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006320:	6839      	ldr	r1, [r7, #0]
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f000 fc2c 	bl	8006b80 <USBD_GetStatus>
          break;
 8006328:	e00e      	b.n	8006348 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800632a:	6839      	ldr	r1, [r7, #0]
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f000 fc5a 	bl	8006be6 <USBD_SetFeature>
          break;
 8006332:	e009      	b.n	8006348 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006334:	6839      	ldr	r1, [r7, #0]
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f000 fc69 	bl	8006c0e <USBD_ClrFeature>
          break;
 800633c:	e004      	b.n	8006348 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800633e:	6839      	ldr	r1, [r7, #0]
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f000 fcc1 	bl	8006cc8 <USBD_CtlError>
          break;
 8006346:	bf00      	nop
      }
      break;
 8006348:	e004      	b.n	8006354 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800634a:	6839      	ldr	r1, [r7, #0]
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f000 fcbb 	bl	8006cc8 <USBD_CtlError>
      break;
 8006352:	bf00      	nop
  }

  return ret;
 8006354:	7bfb      	ldrb	r3, [r7, #15]
}
 8006356:	4618      	mov	r0, r3
 8006358:	3710      	adds	r7, #16
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}
 800635e:	bf00      	nop

08006360 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b084      	sub	sp, #16
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800636a:	2300      	movs	r3, #0
 800636c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	781b      	ldrb	r3, [r3, #0]
 8006372:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006376:	2b20      	cmp	r3, #32
 8006378:	d003      	beq.n	8006382 <USBD_StdItfReq+0x22>
 800637a:	2b40      	cmp	r3, #64	; 0x40
 800637c:	d001      	beq.n	8006382 <USBD_StdItfReq+0x22>
 800637e:	2b00      	cmp	r3, #0
 8006380:	d12a      	bne.n	80063d8 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006388:	3b01      	subs	r3, #1
 800638a:	2b02      	cmp	r3, #2
 800638c:	d81d      	bhi.n	80063ca <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	889b      	ldrh	r3, [r3, #4]
 8006392:	b2db      	uxtb	r3, r3
 8006394:	2b01      	cmp	r3, #1
 8006396:	d813      	bhi.n	80063c0 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	6839      	ldr	r1, [r7, #0]
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	4798      	blx	r3
 80063a6:	4603      	mov	r3, r0
 80063a8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	88db      	ldrh	r3, [r3, #6]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d110      	bne.n	80063d4 <USBD_StdItfReq+0x74>
 80063b2:	7bfb      	ldrb	r3, [r7, #15]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d10d      	bne.n	80063d4 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f000 fd4d 	bl	8006e58 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80063be:	e009      	b.n	80063d4 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 80063c0:	6839      	ldr	r1, [r7, #0]
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f000 fc80 	bl	8006cc8 <USBD_CtlError>
          break;
 80063c8:	e004      	b.n	80063d4 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 80063ca:	6839      	ldr	r1, [r7, #0]
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f000 fc7b 	bl	8006cc8 <USBD_CtlError>
          break;
 80063d2:	e000      	b.n	80063d6 <USBD_StdItfReq+0x76>
          break;
 80063d4:	bf00      	nop
      }
      break;
 80063d6:	e004      	b.n	80063e2 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 80063d8:	6839      	ldr	r1, [r7, #0]
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f000 fc74 	bl	8006cc8 <USBD_CtlError>
      break;
 80063e0:	bf00      	nop
  }

  return USBD_OK;
 80063e2:	2300      	movs	r3, #0
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3710      	adds	r7, #16
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}

080063ec <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b084      	sub	sp, #16
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80063f6:	2300      	movs	r3, #0
 80063f8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	889b      	ldrh	r3, [r3, #4]
 80063fe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	781b      	ldrb	r3, [r3, #0]
 8006404:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006408:	2b20      	cmp	r3, #32
 800640a:	d004      	beq.n	8006416 <USBD_StdEPReq+0x2a>
 800640c:	2b40      	cmp	r3, #64	; 0x40
 800640e:	d002      	beq.n	8006416 <USBD_StdEPReq+0x2a>
 8006410:	2b00      	cmp	r3, #0
 8006412:	d008      	beq.n	8006426 <USBD_StdEPReq+0x3a>
 8006414:	e13d      	b.n	8006692 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	6839      	ldr	r1, [r7, #0]
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	4798      	blx	r3
      break;
 8006424:	e13a      	b.n	800669c <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	781b      	ldrb	r3, [r3, #0]
 800642a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800642e:	2b20      	cmp	r3, #32
 8006430:	d10a      	bne.n	8006448 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006438:	689b      	ldr	r3, [r3, #8]
 800643a:	6839      	ldr	r1, [r7, #0]
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	4798      	blx	r3
 8006440:	4603      	mov	r3, r0
 8006442:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006444:	7bfb      	ldrb	r3, [r7, #15]
 8006446:	e12a      	b.n	800669e <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	785b      	ldrb	r3, [r3, #1]
 800644c:	2b01      	cmp	r3, #1
 800644e:	d03e      	beq.n	80064ce <USBD_StdEPReq+0xe2>
 8006450:	2b03      	cmp	r3, #3
 8006452:	d002      	beq.n	800645a <USBD_StdEPReq+0x6e>
 8006454:	2b00      	cmp	r3, #0
 8006456:	d070      	beq.n	800653a <USBD_StdEPReq+0x14e>
 8006458:	e115      	b.n	8006686 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006460:	2b02      	cmp	r3, #2
 8006462:	d002      	beq.n	800646a <USBD_StdEPReq+0x7e>
 8006464:	2b03      	cmp	r3, #3
 8006466:	d015      	beq.n	8006494 <USBD_StdEPReq+0xa8>
 8006468:	e02b      	b.n	80064c2 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800646a:	7bbb      	ldrb	r3, [r7, #14]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d00c      	beq.n	800648a <USBD_StdEPReq+0x9e>
 8006470:	7bbb      	ldrb	r3, [r7, #14]
 8006472:	2b80      	cmp	r3, #128	; 0x80
 8006474:	d009      	beq.n	800648a <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006476:	7bbb      	ldrb	r3, [r7, #14]
 8006478:	4619      	mov	r1, r3
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f001 f88e 	bl	800759c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006480:	2180      	movs	r1, #128	; 0x80
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f001 f88a 	bl	800759c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006488:	e020      	b.n	80064cc <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 800648a:	6839      	ldr	r1, [r7, #0]
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f000 fc1b 	bl	8006cc8 <USBD_CtlError>
              break;
 8006492:	e01b      	b.n	80064cc <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	885b      	ldrh	r3, [r3, #2]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d10e      	bne.n	80064ba <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 800649c:	7bbb      	ldrb	r3, [r7, #14]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d00b      	beq.n	80064ba <USBD_StdEPReq+0xce>
 80064a2:	7bbb      	ldrb	r3, [r7, #14]
 80064a4:	2b80      	cmp	r3, #128	; 0x80
 80064a6:	d008      	beq.n	80064ba <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	88db      	ldrh	r3, [r3, #6]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d104      	bne.n	80064ba <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80064b0:	7bbb      	ldrb	r3, [r7, #14]
 80064b2:	4619      	mov	r1, r3
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f001 f871 	bl	800759c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f000 fccc 	bl	8006e58 <USBD_CtlSendStatus>

              break;
 80064c0:	e004      	b.n	80064cc <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 80064c2:	6839      	ldr	r1, [r7, #0]
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f000 fbff 	bl	8006cc8 <USBD_CtlError>
              break;
 80064ca:	bf00      	nop
          }
          break;
 80064cc:	e0e0      	b.n	8006690 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064d4:	2b02      	cmp	r3, #2
 80064d6:	d002      	beq.n	80064de <USBD_StdEPReq+0xf2>
 80064d8:	2b03      	cmp	r3, #3
 80064da:	d015      	beq.n	8006508 <USBD_StdEPReq+0x11c>
 80064dc:	e026      	b.n	800652c <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80064de:	7bbb      	ldrb	r3, [r7, #14]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d00c      	beq.n	80064fe <USBD_StdEPReq+0x112>
 80064e4:	7bbb      	ldrb	r3, [r7, #14]
 80064e6:	2b80      	cmp	r3, #128	; 0x80
 80064e8:	d009      	beq.n	80064fe <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80064ea:	7bbb      	ldrb	r3, [r7, #14]
 80064ec:	4619      	mov	r1, r3
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f001 f854 	bl	800759c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80064f4:	2180      	movs	r1, #128	; 0x80
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f001 f850 	bl	800759c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80064fc:	e01c      	b.n	8006538 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 80064fe:	6839      	ldr	r1, [r7, #0]
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f000 fbe1 	bl	8006cc8 <USBD_CtlError>
              break;
 8006506:	e017      	b.n	8006538 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	885b      	ldrh	r3, [r3, #2]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d112      	bne.n	8006536 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006510:	7bbb      	ldrb	r3, [r7, #14]
 8006512:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006516:	2b00      	cmp	r3, #0
 8006518:	d004      	beq.n	8006524 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800651a:	7bbb      	ldrb	r3, [r7, #14]
 800651c:	4619      	mov	r1, r3
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f001 f85b 	bl	80075da <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f000 fc97 	bl	8006e58 <USBD_CtlSendStatus>
              }
              break;
 800652a:	e004      	b.n	8006536 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 800652c:	6839      	ldr	r1, [r7, #0]
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f000 fbca 	bl	8006cc8 <USBD_CtlError>
              break;
 8006534:	e000      	b.n	8006538 <USBD_StdEPReq+0x14c>
              break;
 8006536:	bf00      	nop
          }
          break;
 8006538:	e0aa      	b.n	8006690 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006540:	2b02      	cmp	r3, #2
 8006542:	d002      	beq.n	800654a <USBD_StdEPReq+0x15e>
 8006544:	2b03      	cmp	r3, #3
 8006546:	d032      	beq.n	80065ae <USBD_StdEPReq+0x1c2>
 8006548:	e097      	b.n	800667a <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800654a:	7bbb      	ldrb	r3, [r7, #14]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d007      	beq.n	8006560 <USBD_StdEPReq+0x174>
 8006550:	7bbb      	ldrb	r3, [r7, #14]
 8006552:	2b80      	cmp	r3, #128	; 0x80
 8006554:	d004      	beq.n	8006560 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8006556:	6839      	ldr	r1, [r7, #0]
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f000 fbb5 	bl	8006cc8 <USBD_CtlError>
                break;
 800655e:	e091      	b.n	8006684 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006560:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006564:	2b00      	cmp	r3, #0
 8006566:	da0b      	bge.n	8006580 <USBD_StdEPReq+0x194>
 8006568:	7bbb      	ldrb	r3, [r7, #14]
 800656a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800656e:	4613      	mov	r3, r2
 8006570:	009b      	lsls	r3, r3, #2
 8006572:	4413      	add	r3, r2
 8006574:	009b      	lsls	r3, r3, #2
 8006576:	3310      	adds	r3, #16
 8006578:	687a      	ldr	r2, [r7, #4]
 800657a:	4413      	add	r3, r2
 800657c:	3304      	adds	r3, #4
 800657e:	e00b      	b.n	8006598 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006580:	7bbb      	ldrb	r3, [r7, #14]
 8006582:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006586:	4613      	mov	r3, r2
 8006588:	009b      	lsls	r3, r3, #2
 800658a:	4413      	add	r3, r2
 800658c:	009b      	lsls	r3, r3, #2
 800658e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006592:	687a      	ldr	r2, [r7, #4]
 8006594:	4413      	add	r3, r2
 8006596:	3304      	adds	r3, #4
 8006598:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	2200      	movs	r2, #0
 800659e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	2202      	movs	r2, #2
 80065a4:	4619      	mov	r1, r3
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f000 fbf8 	bl	8006d9c <USBD_CtlSendData>
              break;
 80065ac:	e06a      	b.n	8006684 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80065ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	da11      	bge.n	80065da <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80065b6:	7bbb      	ldrb	r3, [r7, #14]
 80065b8:	f003 020f 	and.w	r2, r3, #15
 80065bc:	6879      	ldr	r1, [r7, #4]
 80065be:	4613      	mov	r3, r2
 80065c0:	009b      	lsls	r3, r3, #2
 80065c2:	4413      	add	r3, r2
 80065c4:	009b      	lsls	r3, r3, #2
 80065c6:	440b      	add	r3, r1
 80065c8:	3318      	adds	r3, #24
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d117      	bne.n	8006600 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80065d0:	6839      	ldr	r1, [r7, #0]
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f000 fb78 	bl	8006cc8 <USBD_CtlError>
                  break;
 80065d8:	e054      	b.n	8006684 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80065da:	7bbb      	ldrb	r3, [r7, #14]
 80065dc:	f003 020f 	and.w	r2, r3, #15
 80065e0:	6879      	ldr	r1, [r7, #4]
 80065e2:	4613      	mov	r3, r2
 80065e4:	009b      	lsls	r3, r3, #2
 80065e6:	4413      	add	r3, r2
 80065e8:	009b      	lsls	r3, r3, #2
 80065ea:	440b      	add	r3, r1
 80065ec:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d104      	bne.n	8006600 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80065f6:	6839      	ldr	r1, [r7, #0]
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f000 fb65 	bl	8006cc8 <USBD_CtlError>
                  break;
 80065fe:	e041      	b.n	8006684 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006600:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006604:	2b00      	cmp	r3, #0
 8006606:	da0b      	bge.n	8006620 <USBD_StdEPReq+0x234>
 8006608:	7bbb      	ldrb	r3, [r7, #14]
 800660a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800660e:	4613      	mov	r3, r2
 8006610:	009b      	lsls	r3, r3, #2
 8006612:	4413      	add	r3, r2
 8006614:	009b      	lsls	r3, r3, #2
 8006616:	3310      	adds	r3, #16
 8006618:	687a      	ldr	r2, [r7, #4]
 800661a:	4413      	add	r3, r2
 800661c:	3304      	adds	r3, #4
 800661e:	e00b      	b.n	8006638 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006620:	7bbb      	ldrb	r3, [r7, #14]
 8006622:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006626:	4613      	mov	r3, r2
 8006628:	009b      	lsls	r3, r3, #2
 800662a:	4413      	add	r3, r2
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006632:	687a      	ldr	r2, [r7, #4]
 8006634:	4413      	add	r3, r2
 8006636:	3304      	adds	r3, #4
 8006638:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800663a:	7bbb      	ldrb	r3, [r7, #14]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d002      	beq.n	8006646 <USBD_StdEPReq+0x25a>
 8006640:	7bbb      	ldrb	r3, [r7, #14]
 8006642:	2b80      	cmp	r3, #128	; 0x80
 8006644:	d103      	bne.n	800664e <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	2200      	movs	r2, #0
 800664a:	601a      	str	r2, [r3, #0]
 800664c:	e00e      	b.n	800666c <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800664e:	7bbb      	ldrb	r3, [r7, #14]
 8006650:	4619      	mov	r1, r3
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 ffe0 	bl	8007618 <USBD_LL_IsStallEP>
 8006658:	4603      	mov	r3, r0
 800665a:	2b00      	cmp	r3, #0
 800665c:	d003      	beq.n	8006666 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	2201      	movs	r2, #1
 8006662:	601a      	str	r2, [r3, #0]
 8006664:	e002      	b.n	800666c <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	2200      	movs	r2, #0
 800666a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	2202      	movs	r2, #2
 8006670:	4619      	mov	r1, r3
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f000 fb92 	bl	8006d9c <USBD_CtlSendData>
              break;
 8006678:	e004      	b.n	8006684 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 800667a:	6839      	ldr	r1, [r7, #0]
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f000 fb23 	bl	8006cc8 <USBD_CtlError>
              break;
 8006682:	bf00      	nop
          }
          break;
 8006684:	e004      	b.n	8006690 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8006686:	6839      	ldr	r1, [r7, #0]
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f000 fb1d 	bl	8006cc8 <USBD_CtlError>
          break;
 800668e:	bf00      	nop
      }
      break;
 8006690:	e004      	b.n	800669c <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8006692:	6839      	ldr	r1, [r7, #0]
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f000 fb17 	bl	8006cc8 <USBD_CtlError>
      break;
 800669a:	bf00      	nop
  }

  return ret;
 800669c:	7bfb      	ldrb	r3, [r7, #15]
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3710      	adds	r7, #16
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}
	...

080066a8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b084      	sub	sp, #16
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80066b2:	2300      	movs	r3, #0
 80066b4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80066b6:	2300      	movs	r3, #0
 80066b8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80066ba:	2300      	movs	r3, #0
 80066bc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	885b      	ldrh	r3, [r3, #2]
 80066c2:	0a1b      	lsrs	r3, r3, #8
 80066c4:	b29b      	uxth	r3, r3
 80066c6:	3b01      	subs	r3, #1
 80066c8:	2b06      	cmp	r3, #6
 80066ca:	f200 8128 	bhi.w	800691e <USBD_GetDescriptor+0x276>
 80066ce:	a201      	add	r2, pc, #4	; (adr r2, 80066d4 <USBD_GetDescriptor+0x2c>)
 80066d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066d4:	080066f1 	.word	0x080066f1
 80066d8:	08006709 	.word	0x08006709
 80066dc:	08006749 	.word	0x08006749
 80066e0:	0800691f 	.word	0x0800691f
 80066e4:	0800691f 	.word	0x0800691f
 80066e8:	080068bf 	.word	0x080068bf
 80066ec:	080068eb 	.word	0x080068eb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	687a      	ldr	r2, [r7, #4]
 80066fa:	7c12      	ldrb	r2, [r2, #16]
 80066fc:	f107 0108 	add.w	r1, r7, #8
 8006700:	4610      	mov	r0, r2
 8006702:	4798      	blx	r3
 8006704:	60f8      	str	r0, [r7, #12]
      break;
 8006706:	e112      	b.n	800692e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	7c1b      	ldrb	r3, [r3, #16]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d10d      	bne.n	800672c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006718:	f107 0208 	add.w	r2, r7, #8
 800671c:	4610      	mov	r0, r2
 800671e:	4798      	blx	r3
 8006720:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	3301      	adds	r3, #1
 8006726:	2202      	movs	r2, #2
 8006728:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800672a:	e100      	b.n	800692e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006734:	f107 0208 	add.w	r2, r7, #8
 8006738:	4610      	mov	r0, r2
 800673a:	4798      	blx	r3
 800673c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	3301      	adds	r3, #1
 8006742:	2202      	movs	r2, #2
 8006744:	701a      	strb	r2, [r3, #0]
      break;
 8006746:	e0f2      	b.n	800692e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	885b      	ldrh	r3, [r3, #2]
 800674c:	b2db      	uxtb	r3, r3
 800674e:	2b05      	cmp	r3, #5
 8006750:	f200 80ac 	bhi.w	80068ac <USBD_GetDescriptor+0x204>
 8006754:	a201      	add	r2, pc, #4	; (adr r2, 800675c <USBD_GetDescriptor+0xb4>)
 8006756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800675a:	bf00      	nop
 800675c:	08006775 	.word	0x08006775
 8006760:	080067a9 	.word	0x080067a9
 8006764:	080067dd 	.word	0x080067dd
 8006768:	08006811 	.word	0x08006811
 800676c:	08006845 	.word	0x08006845
 8006770:	08006879 	.word	0x08006879
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d00b      	beq.n	8006798 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	687a      	ldr	r2, [r7, #4]
 800678a:	7c12      	ldrb	r2, [r2, #16]
 800678c:	f107 0108 	add.w	r1, r7, #8
 8006790:	4610      	mov	r0, r2
 8006792:	4798      	blx	r3
 8006794:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006796:	e091      	b.n	80068bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006798:	6839      	ldr	r1, [r7, #0]
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f000 fa94 	bl	8006cc8 <USBD_CtlError>
            err++;
 80067a0:	7afb      	ldrb	r3, [r7, #11]
 80067a2:	3301      	adds	r3, #1
 80067a4:	72fb      	strb	r3, [r7, #11]
          break;
 80067a6:	e089      	b.n	80068bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80067ae:	689b      	ldr	r3, [r3, #8]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d00b      	beq.n	80067cc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	7c12      	ldrb	r2, [r2, #16]
 80067c0:	f107 0108 	add.w	r1, r7, #8
 80067c4:	4610      	mov	r0, r2
 80067c6:	4798      	blx	r3
 80067c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80067ca:	e077      	b.n	80068bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80067cc:	6839      	ldr	r1, [r7, #0]
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f000 fa7a 	bl	8006cc8 <USBD_CtlError>
            err++;
 80067d4:	7afb      	ldrb	r3, [r7, #11]
 80067d6:	3301      	adds	r3, #1
 80067d8:	72fb      	strb	r3, [r7, #11]
          break;
 80067da:	e06f      	b.n	80068bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80067e2:	68db      	ldr	r3, [r3, #12]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d00b      	beq.n	8006800 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80067ee:	68db      	ldr	r3, [r3, #12]
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	7c12      	ldrb	r2, [r2, #16]
 80067f4:	f107 0108 	add.w	r1, r7, #8
 80067f8:	4610      	mov	r0, r2
 80067fa:	4798      	blx	r3
 80067fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80067fe:	e05d      	b.n	80068bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006800:	6839      	ldr	r1, [r7, #0]
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f000 fa60 	bl	8006cc8 <USBD_CtlError>
            err++;
 8006808:	7afb      	ldrb	r3, [r7, #11]
 800680a:	3301      	adds	r3, #1
 800680c:	72fb      	strb	r3, [r7, #11]
          break;
 800680e:	e055      	b.n	80068bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006816:	691b      	ldr	r3, [r3, #16]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d00b      	beq.n	8006834 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006822:	691b      	ldr	r3, [r3, #16]
 8006824:	687a      	ldr	r2, [r7, #4]
 8006826:	7c12      	ldrb	r2, [r2, #16]
 8006828:	f107 0108 	add.w	r1, r7, #8
 800682c:	4610      	mov	r0, r2
 800682e:	4798      	blx	r3
 8006830:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006832:	e043      	b.n	80068bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006834:	6839      	ldr	r1, [r7, #0]
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f000 fa46 	bl	8006cc8 <USBD_CtlError>
            err++;
 800683c:	7afb      	ldrb	r3, [r7, #11]
 800683e:	3301      	adds	r3, #1
 8006840:	72fb      	strb	r3, [r7, #11]
          break;
 8006842:	e03b      	b.n	80068bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800684a:	695b      	ldr	r3, [r3, #20]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d00b      	beq.n	8006868 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006856:	695b      	ldr	r3, [r3, #20]
 8006858:	687a      	ldr	r2, [r7, #4]
 800685a:	7c12      	ldrb	r2, [r2, #16]
 800685c:	f107 0108 	add.w	r1, r7, #8
 8006860:	4610      	mov	r0, r2
 8006862:	4798      	blx	r3
 8006864:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006866:	e029      	b.n	80068bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006868:	6839      	ldr	r1, [r7, #0]
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f000 fa2c 	bl	8006cc8 <USBD_CtlError>
            err++;
 8006870:	7afb      	ldrb	r3, [r7, #11]
 8006872:	3301      	adds	r3, #1
 8006874:	72fb      	strb	r3, [r7, #11]
          break;
 8006876:	e021      	b.n	80068bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800687e:	699b      	ldr	r3, [r3, #24]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d00b      	beq.n	800689c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800688a:	699b      	ldr	r3, [r3, #24]
 800688c:	687a      	ldr	r2, [r7, #4]
 800688e:	7c12      	ldrb	r2, [r2, #16]
 8006890:	f107 0108 	add.w	r1, r7, #8
 8006894:	4610      	mov	r0, r2
 8006896:	4798      	blx	r3
 8006898:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800689a:	e00f      	b.n	80068bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800689c:	6839      	ldr	r1, [r7, #0]
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f000 fa12 	bl	8006cc8 <USBD_CtlError>
            err++;
 80068a4:	7afb      	ldrb	r3, [r7, #11]
 80068a6:	3301      	adds	r3, #1
 80068a8:	72fb      	strb	r3, [r7, #11]
          break;
 80068aa:	e007      	b.n	80068bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80068ac:	6839      	ldr	r1, [r7, #0]
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f000 fa0a 	bl	8006cc8 <USBD_CtlError>
          err++;
 80068b4:	7afb      	ldrb	r3, [r7, #11]
 80068b6:	3301      	adds	r3, #1
 80068b8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80068ba:	e038      	b.n	800692e <USBD_GetDescriptor+0x286>
 80068bc:	e037      	b.n	800692e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	7c1b      	ldrb	r3, [r3, #16]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d109      	bne.n	80068da <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068ce:	f107 0208 	add.w	r2, r7, #8
 80068d2:	4610      	mov	r0, r2
 80068d4:	4798      	blx	r3
 80068d6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80068d8:	e029      	b.n	800692e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80068da:	6839      	ldr	r1, [r7, #0]
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f000 f9f3 	bl	8006cc8 <USBD_CtlError>
        err++;
 80068e2:	7afb      	ldrb	r3, [r7, #11]
 80068e4:	3301      	adds	r3, #1
 80068e6:	72fb      	strb	r3, [r7, #11]
      break;
 80068e8:	e021      	b.n	800692e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	7c1b      	ldrb	r3, [r3, #16]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d10d      	bne.n	800690e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068fa:	f107 0208 	add.w	r2, r7, #8
 80068fe:	4610      	mov	r0, r2
 8006900:	4798      	blx	r3
 8006902:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	3301      	adds	r3, #1
 8006908:	2207      	movs	r2, #7
 800690a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800690c:	e00f      	b.n	800692e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800690e:	6839      	ldr	r1, [r7, #0]
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f000 f9d9 	bl	8006cc8 <USBD_CtlError>
        err++;
 8006916:	7afb      	ldrb	r3, [r7, #11]
 8006918:	3301      	adds	r3, #1
 800691a:	72fb      	strb	r3, [r7, #11]
      break;
 800691c:	e007      	b.n	800692e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800691e:	6839      	ldr	r1, [r7, #0]
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f000 f9d1 	bl	8006cc8 <USBD_CtlError>
      err++;
 8006926:	7afb      	ldrb	r3, [r7, #11]
 8006928:	3301      	adds	r3, #1
 800692a:	72fb      	strb	r3, [r7, #11]
      break;
 800692c:	bf00      	nop
  }

  if (err != 0U)
 800692e:	7afb      	ldrb	r3, [r7, #11]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d11c      	bne.n	800696e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006934:	893b      	ldrh	r3, [r7, #8]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d011      	beq.n	800695e <USBD_GetDescriptor+0x2b6>
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	88db      	ldrh	r3, [r3, #6]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d00d      	beq.n	800695e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	88da      	ldrh	r2, [r3, #6]
 8006946:	893b      	ldrh	r3, [r7, #8]
 8006948:	4293      	cmp	r3, r2
 800694a:	bf28      	it	cs
 800694c:	4613      	movcs	r3, r2
 800694e:	b29b      	uxth	r3, r3
 8006950:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006952:	893b      	ldrh	r3, [r7, #8]
 8006954:	461a      	mov	r2, r3
 8006956:	68f9      	ldr	r1, [r7, #12]
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f000 fa1f 	bl	8006d9c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	88db      	ldrh	r3, [r3, #6]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d104      	bne.n	8006970 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 fa76 	bl	8006e58 <USBD_CtlSendStatus>
 800696c:	e000      	b.n	8006970 <USBD_GetDescriptor+0x2c8>
    return;
 800696e:	bf00      	nop
    }
  }
}
 8006970:	3710      	adds	r7, #16
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}
 8006976:	bf00      	nop

08006978 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b084      	sub	sp, #16
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	889b      	ldrh	r3, [r3, #4]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d130      	bne.n	80069ec <USBD_SetAddress+0x74>
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	88db      	ldrh	r3, [r3, #6]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d12c      	bne.n	80069ec <USBD_SetAddress+0x74>
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	885b      	ldrh	r3, [r3, #2]
 8006996:	2b7f      	cmp	r3, #127	; 0x7f
 8006998:	d828      	bhi.n	80069ec <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	885b      	ldrh	r3, [r3, #2]
 800699e:	b2db      	uxtb	r3, r3
 80069a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069a4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069ac:	2b03      	cmp	r3, #3
 80069ae:	d104      	bne.n	80069ba <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80069b0:	6839      	ldr	r1, [r7, #0]
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 f988 	bl	8006cc8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069b8:	e01c      	b.n	80069f4 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	7bfa      	ldrb	r2, [r7, #15]
 80069be:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80069c2:	7bfb      	ldrb	r3, [r7, #15]
 80069c4:	4619      	mov	r1, r3
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f000 fe52 	bl	8007670 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f000 fa43 	bl	8006e58 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80069d2:	7bfb      	ldrb	r3, [r7, #15]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d004      	beq.n	80069e2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2202      	movs	r2, #2
 80069dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069e0:	e008      	b.n	80069f4 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2201      	movs	r2, #1
 80069e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069ea:	e003      	b.n	80069f4 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80069ec:	6839      	ldr	r1, [r7, #0]
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f000 f96a 	bl	8006cc8 <USBD_CtlError>
  }
}
 80069f4:	bf00      	nop
 80069f6:	3710      	adds	r7, #16
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}

080069fc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b082      	sub	sp, #8
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
 8006a04:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	885b      	ldrh	r3, [r3, #2]
 8006a0a:	b2da      	uxtb	r2, r3
 8006a0c:	4b41      	ldr	r3, [pc, #260]	; (8006b14 <USBD_SetConfig+0x118>)
 8006a0e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006a10:	4b40      	ldr	r3, [pc, #256]	; (8006b14 <USBD_SetConfig+0x118>)
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d904      	bls.n	8006a22 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8006a18:	6839      	ldr	r1, [r7, #0]
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f000 f954 	bl	8006cc8 <USBD_CtlError>
 8006a20:	e075      	b.n	8006b0e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a28:	2b02      	cmp	r3, #2
 8006a2a:	d002      	beq.n	8006a32 <USBD_SetConfig+0x36>
 8006a2c:	2b03      	cmp	r3, #3
 8006a2e:	d023      	beq.n	8006a78 <USBD_SetConfig+0x7c>
 8006a30:	e062      	b.n	8006af8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8006a32:	4b38      	ldr	r3, [pc, #224]	; (8006b14 <USBD_SetConfig+0x118>)
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d01a      	beq.n	8006a70 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8006a3a:	4b36      	ldr	r3, [pc, #216]	; (8006b14 <USBD_SetConfig+0x118>)
 8006a3c:	781b      	ldrb	r3, [r3, #0]
 8006a3e:	461a      	mov	r2, r3
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2203      	movs	r2, #3
 8006a48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006a4c:	4b31      	ldr	r3, [pc, #196]	; (8006b14 <USBD_SetConfig+0x118>)
 8006a4e:	781b      	ldrb	r3, [r3, #0]
 8006a50:	4619      	mov	r1, r3
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f7ff f9f3 	bl	8005e3e <USBD_SetClassConfig>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	2b02      	cmp	r3, #2
 8006a5c:	d104      	bne.n	8006a68 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8006a5e:	6839      	ldr	r1, [r7, #0]
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f000 f931 	bl	8006cc8 <USBD_CtlError>
            return;
 8006a66:	e052      	b.n	8006b0e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f000 f9f5 	bl	8006e58 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006a6e:	e04e      	b.n	8006b0e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f000 f9f1 	bl	8006e58 <USBD_CtlSendStatus>
        break;
 8006a76:	e04a      	b.n	8006b0e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006a78:	4b26      	ldr	r3, [pc, #152]	; (8006b14 <USBD_SetConfig+0x118>)
 8006a7a:	781b      	ldrb	r3, [r3, #0]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d112      	bne.n	8006aa6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2202      	movs	r2, #2
 8006a84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8006a88:	4b22      	ldr	r3, [pc, #136]	; (8006b14 <USBD_SetConfig+0x118>)
 8006a8a:	781b      	ldrb	r3, [r3, #0]
 8006a8c:	461a      	mov	r2, r3
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006a92:	4b20      	ldr	r3, [pc, #128]	; (8006b14 <USBD_SetConfig+0x118>)
 8006a94:	781b      	ldrb	r3, [r3, #0]
 8006a96:	4619      	mov	r1, r3
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f7ff f9ef 	bl	8005e7c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f000 f9da 	bl	8006e58 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006aa4:	e033      	b.n	8006b0e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8006aa6:	4b1b      	ldr	r3, [pc, #108]	; (8006b14 <USBD_SetConfig+0x118>)
 8006aa8:	781b      	ldrb	r3, [r3, #0]
 8006aaa:	461a      	mov	r2, r3
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d01d      	beq.n	8006af0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	b2db      	uxtb	r3, r3
 8006aba:	4619      	mov	r1, r3
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f7ff f9dd 	bl	8005e7c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8006ac2:	4b14      	ldr	r3, [pc, #80]	; (8006b14 <USBD_SetConfig+0x118>)
 8006ac4:	781b      	ldrb	r3, [r3, #0]
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006acc:	4b11      	ldr	r3, [pc, #68]	; (8006b14 <USBD_SetConfig+0x118>)
 8006ace:	781b      	ldrb	r3, [r3, #0]
 8006ad0:	4619      	mov	r1, r3
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f7ff f9b3 	bl	8005e3e <USBD_SetClassConfig>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	2b02      	cmp	r3, #2
 8006adc:	d104      	bne.n	8006ae8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8006ade:	6839      	ldr	r1, [r7, #0]
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f000 f8f1 	bl	8006cc8 <USBD_CtlError>
            return;
 8006ae6:	e012      	b.n	8006b0e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f000 f9b5 	bl	8006e58 <USBD_CtlSendStatus>
        break;
 8006aee:	e00e      	b.n	8006b0e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f000 f9b1 	bl	8006e58 <USBD_CtlSendStatus>
        break;
 8006af6:	e00a      	b.n	8006b0e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8006af8:	6839      	ldr	r1, [r7, #0]
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f000 f8e4 	bl	8006cc8 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006b00:	4b04      	ldr	r3, [pc, #16]	; (8006b14 <USBD_SetConfig+0x118>)
 8006b02:	781b      	ldrb	r3, [r3, #0]
 8006b04:	4619      	mov	r1, r3
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f7ff f9b8 	bl	8005e7c <USBD_ClrClassConfig>
        break;
 8006b0c:	bf00      	nop
    }
  }
}
 8006b0e:	3708      	adds	r7, #8
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}
 8006b14:	20000200 	.word	0x20000200

08006b18 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b082      	sub	sp, #8
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
 8006b20:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	88db      	ldrh	r3, [r3, #6]
 8006b26:	2b01      	cmp	r3, #1
 8006b28:	d004      	beq.n	8006b34 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006b2a:	6839      	ldr	r1, [r7, #0]
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f000 f8cb 	bl	8006cc8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006b32:	e021      	b.n	8006b78 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b3a:	2b01      	cmp	r3, #1
 8006b3c:	db17      	blt.n	8006b6e <USBD_GetConfig+0x56>
 8006b3e:	2b02      	cmp	r3, #2
 8006b40:	dd02      	ble.n	8006b48 <USBD_GetConfig+0x30>
 8006b42:	2b03      	cmp	r3, #3
 8006b44:	d00b      	beq.n	8006b5e <USBD_GetConfig+0x46>
 8006b46:	e012      	b.n	8006b6e <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	3308      	adds	r3, #8
 8006b52:	2201      	movs	r2, #1
 8006b54:	4619      	mov	r1, r3
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f000 f920 	bl	8006d9c <USBD_CtlSendData>
        break;
 8006b5c:	e00c      	b.n	8006b78 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	3304      	adds	r3, #4
 8006b62:	2201      	movs	r2, #1
 8006b64:	4619      	mov	r1, r3
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f000 f918 	bl	8006d9c <USBD_CtlSendData>
        break;
 8006b6c:	e004      	b.n	8006b78 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8006b6e:	6839      	ldr	r1, [r7, #0]
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f000 f8a9 	bl	8006cc8 <USBD_CtlError>
        break;
 8006b76:	bf00      	nop
}
 8006b78:	bf00      	nop
 8006b7a:	3708      	adds	r7, #8
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}

08006b80 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b082      	sub	sp, #8
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
 8006b88:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b90:	3b01      	subs	r3, #1
 8006b92:	2b02      	cmp	r3, #2
 8006b94:	d81e      	bhi.n	8006bd4 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	88db      	ldrh	r3, [r3, #6]
 8006b9a:	2b02      	cmp	r3, #2
 8006b9c:	d004      	beq.n	8006ba8 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8006b9e:	6839      	ldr	r1, [r7, #0]
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f000 f891 	bl	8006cc8 <USBD_CtlError>
        break;
 8006ba6:	e01a      	b.n	8006bde <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2201      	movs	r2, #1
 8006bac:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d005      	beq.n	8006bc4 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	68db      	ldr	r3, [r3, #12]
 8006bbc:	f043 0202 	orr.w	r2, r3, #2
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	330c      	adds	r3, #12
 8006bc8:	2202      	movs	r2, #2
 8006bca:	4619      	mov	r1, r3
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f000 f8e5 	bl	8006d9c <USBD_CtlSendData>
      break;
 8006bd2:	e004      	b.n	8006bde <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8006bd4:	6839      	ldr	r1, [r7, #0]
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f000 f876 	bl	8006cc8 <USBD_CtlError>
      break;
 8006bdc:	bf00      	nop
  }
}
 8006bde:	bf00      	nop
 8006be0:	3708      	adds	r7, #8
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}

08006be6 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006be6:	b580      	push	{r7, lr}
 8006be8:	b082      	sub	sp, #8
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	6078      	str	r0, [r7, #4]
 8006bee:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	885b      	ldrh	r3, [r3, #2]
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	d106      	bne.n	8006c06 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f000 f929 	bl	8006e58 <USBD_CtlSendStatus>
  }
}
 8006c06:	bf00      	nop
 8006c08:	3708      	adds	r7, #8
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}

08006c0e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006c0e:	b580      	push	{r7, lr}
 8006c10:	b082      	sub	sp, #8
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	6078      	str	r0, [r7, #4]
 8006c16:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c1e:	3b01      	subs	r3, #1
 8006c20:	2b02      	cmp	r3, #2
 8006c22:	d80b      	bhi.n	8006c3c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	885b      	ldrh	r3, [r3, #2]
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	d10c      	bne.n	8006c46 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f000 f90f 	bl	8006e58 <USBD_CtlSendStatus>
      }
      break;
 8006c3a:	e004      	b.n	8006c46 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006c3c:	6839      	ldr	r1, [r7, #0]
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f000 f842 	bl	8006cc8 <USBD_CtlError>
      break;
 8006c44:	e000      	b.n	8006c48 <USBD_ClrFeature+0x3a>
      break;
 8006c46:	bf00      	nop
  }
}
 8006c48:	bf00      	nop
 8006c4a:	3708      	adds	r7, #8
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}

08006c50 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b083      	sub	sp, #12
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	781a      	ldrb	r2, [r3, #0]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	785a      	ldrb	r2, [r3, #1]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	3302      	adds	r3, #2
 8006c6e:	781b      	ldrb	r3, [r3, #0]
 8006c70:	b29a      	uxth	r2, r3
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	3303      	adds	r3, #3
 8006c76:	781b      	ldrb	r3, [r3, #0]
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	021b      	lsls	r3, r3, #8
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	4413      	add	r3, r2
 8006c80:	b29a      	uxth	r2, r3
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	3304      	adds	r3, #4
 8006c8a:	781b      	ldrb	r3, [r3, #0]
 8006c8c:	b29a      	uxth	r2, r3
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	3305      	adds	r3, #5
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	021b      	lsls	r3, r3, #8
 8006c98:	b29b      	uxth	r3, r3
 8006c9a:	4413      	add	r3, r2
 8006c9c:	b29a      	uxth	r2, r3
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	3306      	adds	r3, #6
 8006ca6:	781b      	ldrb	r3, [r3, #0]
 8006ca8:	b29a      	uxth	r2, r3
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	3307      	adds	r3, #7
 8006cae:	781b      	ldrb	r3, [r3, #0]
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	021b      	lsls	r3, r3, #8
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	4413      	add	r3, r2
 8006cb8:	b29a      	uxth	r2, r3
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	80da      	strh	r2, [r3, #6]

}
 8006cbe:	bf00      	nop
 8006cc0:	370c      	adds	r7, #12
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bc80      	pop	{r7}
 8006cc6:	4770      	bx	lr

08006cc8 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b082      	sub	sp, #8
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8006cd2:	2180      	movs	r1, #128	; 0x80
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f000 fc61 	bl	800759c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006cda:	2100      	movs	r1, #0
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f000 fc5d 	bl	800759c <USBD_LL_StallEP>
}
 8006ce2:	bf00      	nop
 8006ce4:	3708      	adds	r7, #8
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}

08006cea <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006cea:	b580      	push	{r7, lr}
 8006cec:	b086      	sub	sp, #24
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	60f8      	str	r0, [r7, #12]
 8006cf2:	60b9      	str	r1, [r7, #8]
 8006cf4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d032      	beq.n	8006d66 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006d00:	68f8      	ldr	r0, [r7, #12]
 8006d02:	f000 f834 	bl	8006d6e <USBD_GetLen>
 8006d06:	4603      	mov	r3, r0
 8006d08:	3301      	adds	r3, #1
 8006d0a:	b29b      	uxth	r3, r3
 8006d0c:	005b      	lsls	r3, r3, #1
 8006d0e:	b29a      	uxth	r2, r3
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006d14:	7dfb      	ldrb	r3, [r7, #23]
 8006d16:	1c5a      	adds	r2, r3, #1
 8006d18:	75fa      	strb	r2, [r7, #23]
 8006d1a:	461a      	mov	r2, r3
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	4413      	add	r3, r2
 8006d20:	687a      	ldr	r2, [r7, #4]
 8006d22:	7812      	ldrb	r2, [r2, #0]
 8006d24:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006d26:	7dfb      	ldrb	r3, [r7, #23]
 8006d28:	1c5a      	adds	r2, r3, #1
 8006d2a:	75fa      	strb	r2, [r7, #23]
 8006d2c:	461a      	mov	r2, r3
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	4413      	add	r3, r2
 8006d32:	2203      	movs	r2, #3
 8006d34:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006d36:	e012      	b.n	8006d5e <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	1c5a      	adds	r2, r3, #1
 8006d3c:	60fa      	str	r2, [r7, #12]
 8006d3e:	7dfa      	ldrb	r2, [r7, #23]
 8006d40:	1c51      	adds	r1, r2, #1
 8006d42:	75f9      	strb	r1, [r7, #23]
 8006d44:	4611      	mov	r1, r2
 8006d46:	68ba      	ldr	r2, [r7, #8]
 8006d48:	440a      	add	r2, r1
 8006d4a:	781b      	ldrb	r3, [r3, #0]
 8006d4c:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006d4e:	7dfb      	ldrb	r3, [r7, #23]
 8006d50:	1c5a      	adds	r2, r3, #1
 8006d52:	75fa      	strb	r2, [r7, #23]
 8006d54:	461a      	mov	r2, r3
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	4413      	add	r3, r2
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	781b      	ldrb	r3, [r3, #0]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d1e8      	bne.n	8006d38 <USBD_GetString+0x4e>
    }
  }
}
 8006d66:	bf00      	nop
 8006d68:	3718      	adds	r7, #24
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}

08006d6e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006d6e:	b480      	push	{r7}
 8006d70:	b085      	sub	sp, #20
 8006d72:	af00      	add	r7, sp, #0
 8006d74:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006d76:	2300      	movs	r3, #0
 8006d78:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8006d7a:	e005      	b.n	8006d88 <USBD_GetLen+0x1a>
  {
    len++;
 8006d7c:	7bfb      	ldrb	r3, [r7, #15]
 8006d7e:	3301      	adds	r3, #1
 8006d80:	73fb      	strb	r3, [r7, #15]
    buf++;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	3301      	adds	r3, #1
 8006d86:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	781b      	ldrb	r3, [r3, #0]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d1f5      	bne.n	8006d7c <USBD_GetLen+0xe>
  }

  return len;
 8006d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3714      	adds	r7, #20
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bc80      	pop	{r7}
 8006d9a:	4770      	bx	lr

08006d9c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b084      	sub	sp, #16
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	60f8      	str	r0, [r7, #12]
 8006da4:	60b9      	str	r1, [r7, #8]
 8006da6:	4613      	mov	r3, r2
 8006da8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2202      	movs	r2, #2
 8006dae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006db2:	88fa      	ldrh	r2, [r7, #6]
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006db8:	88fa      	ldrh	r2, [r7, #6]
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006dbe:	88fb      	ldrh	r3, [r7, #6]
 8006dc0:	68ba      	ldr	r2, [r7, #8]
 8006dc2:	2100      	movs	r1, #0
 8006dc4:	68f8      	ldr	r0, [r7, #12]
 8006dc6:	f000 fc72 	bl	80076ae <USBD_LL_Transmit>

  return USBD_OK;
 8006dca:	2300      	movs	r3, #0
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3710      	adds	r7, #16
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}

08006dd4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b084      	sub	sp, #16
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	60f8      	str	r0, [r7, #12]
 8006ddc:	60b9      	str	r1, [r7, #8]
 8006dde:	4613      	mov	r3, r2
 8006de0:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006de2:	88fb      	ldrh	r3, [r7, #6]
 8006de4:	68ba      	ldr	r2, [r7, #8]
 8006de6:	2100      	movs	r1, #0
 8006de8:	68f8      	ldr	r0, [r7, #12]
 8006dea:	f000 fc60 	bl	80076ae <USBD_LL_Transmit>

  return USBD_OK;
 8006dee:	2300      	movs	r3, #0
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3710      	adds	r7, #16
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}

08006df8 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b084      	sub	sp, #16
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	60f8      	str	r0, [r7, #12]
 8006e00:	60b9      	str	r1, [r7, #8]
 8006e02:	4613      	mov	r3, r2
 8006e04:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2203      	movs	r2, #3
 8006e0a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006e0e:	88fa      	ldrh	r2, [r7, #6]
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8006e16:	88fa      	ldrh	r2, [r7, #6]
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006e1e:	88fb      	ldrh	r3, [r7, #6]
 8006e20:	68ba      	ldr	r2, [r7, #8]
 8006e22:	2100      	movs	r1, #0
 8006e24:	68f8      	ldr	r0, [r7, #12]
 8006e26:	f000 fc65 	bl	80076f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006e2a:	2300      	movs	r3, #0
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3710      	adds	r7, #16
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}

08006e34 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b084      	sub	sp, #16
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	60f8      	str	r0, [r7, #12]
 8006e3c:	60b9      	str	r1, [r7, #8]
 8006e3e:	4613      	mov	r3, r2
 8006e40:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006e42:	88fb      	ldrh	r3, [r7, #6]
 8006e44:	68ba      	ldr	r2, [r7, #8]
 8006e46:	2100      	movs	r1, #0
 8006e48:	68f8      	ldr	r0, [r7, #12]
 8006e4a:	f000 fc53 	bl	80076f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006e4e:	2300      	movs	r3, #0
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	3710      	adds	r7, #16
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}

08006e58 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b082      	sub	sp, #8
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2204      	movs	r2, #4
 8006e64:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006e68:	2300      	movs	r3, #0
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	2100      	movs	r1, #0
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f000 fc1d 	bl	80076ae <USBD_LL_Transmit>

  return USBD_OK;
 8006e74:	2300      	movs	r3, #0
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3708      	adds	r7, #8
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}

08006e7e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006e7e:	b580      	push	{r7, lr}
 8006e80:	b082      	sub	sp, #8
 8006e82:	af00      	add	r7, sp, #0
 8006e84:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2205      	movs	r2, #5
 8006e8a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006e8e:	2300      	movs	r3, #0
 8006e90:	2200      	movs	r2, #0
 8006e92:	2100      	movs	r1, #0
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f000 fc2d 	bl	80076f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006e9a:	2300      	movs	r3, #0
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3708      	adds	r7, #8
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}

08006ea4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	4912      	ldr	r1, [pc, #72]	; (8006ef4 <MX_USB_DEVICE_Init+0x50>)
 8006eac:	4812      	ldr	r0, [pc, #72]	; (8006ef8 <MX_USB_DEVICE_Init+0x54>)
 8006eae:	f7fe ff6c 	bl	8005d8a <USBD_Init>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d001      	beq.n	8006ebc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006eb8:	f7f9 faec 	bl	8000494 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006ebc:	490f      	ldr	r1, [pc, #60]	; (8006efc <MX_USB_DEVICE_Init+0x58>)
 8006ebe:	480e      	ldr	r0, [pc, #56]	; (8006ef8 <MX_USB_DEVICE_Init+0x54>)
 8006ec0:	f7fe ff8e 	bl	8005de0 <USBD_RegisterClass>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d001      	beq.n	8006ece <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006eca:	f7f9 fae3 	bl	8000494 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006ece:	490c      	ldr	r1, [pc, #48]	; (8006f00 <MX_USB_DEVICE_Init+0x5c>)
 8006ed0:	4809      	ldr	r0, [pc, #36]	; (8006ef8 <MX_USB_DEVICE_Init+0x54>)
 8006ed2:	f7fe febf 	bl	8005c54 <USBD_CDC_RegisterInterface>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d001      	beq.n	8006ee0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006edc:	f7f9 fada 	bl	8000494 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006ee0:	4805      	ldr	r0, [pc, #20]	; (8006ef8 <MX_USB_DEVICE_Init+0x54>)
 8006ee2:	f7fe ff96 	bl	8005e12 <USBD_Start>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d001      	beq.n	8006ef0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006eec:	f7f9 fad2 	bl	8000494 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006ef0:	bf00      	nop
 8006ef2:	bd80      	pop	{r7, pc}
 8006ef4:	2000012c 	.word	0x2000012c
 8006ef8:	20000560 	.word	0x20000560
 8006efc:	20000018 	.word	0x20000018
 8006f00:	2000011c 	.word	0x2000011c

08006f04 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006f08:	2200      	movs	r2, #0
 8006f0a:	4905      	ldr	r1, [pc, #20]	; (8006f20 <CDC_Init_FS+0x1c>)
 8006f0c:	4805      	ldr	r0, [pc, #20]	; (8006f24 <CDC_Init_FS+0x20>)
 8006f0e:	f7fe feb7 	bl	8005c80 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006f12:	4905      	ldr	r1, [pc, #20]	; (8006f28 <CDC_Init_FS+0x24>)
 8006f14:	4803      	ldr	r0, [pc, #12]	; (8006f24 <CDC_Init_FS+0x20>)
 8006f16:	f7fe fecc 	bl	8005cb2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006f1a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	bd80      	pop	{r7, pc}
 8006f20:	20000c0c 	.word	0x20000c0c
 8006f24:	20000560 	.word	0x20000560
 8006f28:	20000824 	.word	0x20000824

08006f2c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006f30:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bc80      	pop	{r7}
 8006f38:	4770      	bx	lr
	...

08006f3c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b083      	sub	sp, #12
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	4603      	mov	r3, r0
 8006f44:	6039      	str	r1, [r7, #0]
 8006f46:	71fb      	strb	r3, [r7, #7]
 8006f48:	4613      	mov	r3, r2
 8006f4a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006f4c:	79fb      	ldrb	r3, [r7, #7]
 8006f4e:	2b23      	cmp	r3, #35	; 0x23
 8006f50:	d84a      	bhi.n	8006fe8 <CDC_Control_FS+0xac>
 8006f52:	a201      	add	r2, pc, #4	; (adr r2, 8006f58 <CDC_Control_FS+0x1c>)
 8006f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f58:	08006fe9 	.word	0x08006fe9
 8006f5c:	08006fe9 	.word	0x08006fe9
 8006f60:	08006fe9 	.word	0x08006fe9
 8006f64:	08006fe9 	.word	0x08006fe9
 8006f68:	08006fe9 	.word	0x08006fe9
 8006f6c:	08006fe9 	.word	0x08006fe9
 8006f70:	08006fe9 	.word	0x08006fe9
 8006f74:	08006fe9 	.word	0x08006fe9
 8006f78:	08006fe9 	.word	0x08006fe9
 8006f7c:	08006fe9 	.word	0x08006fe9
 8006f80:	08006fe9 	.word	0x08006fe9
 8006f84:	08006fe9 	.word	0x08006fe9
 8006f88:	08006fe9 	.word	0x08006fe9
 8006f8c:	08006fe9 	.word	0x08006fe9
 8006f90:	08006fe9 	.word	0x08006fe9
 8006f94:	08006fe9 	.word	0x08006fe9
 8006f98:	08006fe9 	.word	0x08006fe9
 8006f9c:	08006fe9 	.word	0x08006fe9
 8006fa0:	08006fe9 	.word	0x08006fe9
 8006fa4:	08006fe9 	.word	0x08006fe9
 8006fa8:	08006fe9 	.word	0x08006fe9
 8006fac:	08006fe9 	.word	0x08006fe9
 8006fb0:	08006fe9 	.word	0x08006fe9
 8006fb4:	08006fe9 	.word	0x08006fe9
 8006fb8:	08006fe9 	.word	0x08006fe9
 8006fbc:	08006fe9 	.word	0x08006fe9
 8006fc0:	08006fe9 	.word	0x08006fe9
 8006fc4:	08006fe9 	.word	0x08006fe9
 8006fc8:	08006fe9 	.word	0x08006fe9
 8006fcc:	08006fe9 	.word	0x08006fe9
 8006fd0:	08006fe9 	.word	0x08006fe9
 8006fd4:	08006fe9 	.word	0x08006fe9
 8006fd8:	08006fe9 	.word	0x08006fe9
 8006fdc:	08006fe9 	.word	0x08006fe9
 8006fe0:	08006fe9 	.word	0x08006fe9
 8006fe4:	08006fe9 	.word	0x08006fe9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006fe8:	bf00      	nop
  }

  return (USBD_OK);
 8006fea:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	370c      	adds	r7, #12
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bc80      	pop	{r7}
 8006ff4:	4770      	bx	lr
 8006ff6:	bf00      	nop

08006ff8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b082      	sub	sp, #8
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007002:	6879      	ldr	r1, [r7, #4]
 8007004:	480b      	ldr	r0, [pc, #44]	; (8007034 <CDC_Receive_FS+0x3c>)
 8007006:	f7fe fe54 	bl	8005cb2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800700a:	480a      	ldr	r0, [pc, #40]	; (8007034 <CDC_Receive_FS+0x3c>)
 800700c:	f7fe fe93 	bl	8005d36 <USBD_CDC_ReceivePacket>
  memset(gUSBRxBuffer,0,255);
 8007010:	22ff      	movs	r2, #255	; 0xff
 8007012:	2100      	movs	r1, #0
 8007014:	4808      	ldr	r0, [pc, #32]	; (8007038 <CDC_Receive_FS+0x40>)
 8007016:	f000 fc24 	bl	8007862 <memset>
  memcpy(gUSBRxBuffer,Buf,*Len);
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	461a      	mov	r2, r3
 8007020:	6879      	ldr	r1, [r7, #4]
 8007022:	4805      	ldr	r0, [pc, #20]	; (8007038 <CDC_Receive_FS+0x40>)
 8007024:	f000 fc12 	bl	800784c <memcpy>
  return (USBD_OK);
 8007028:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800702a:	4618      	mov	r0, r3
 800702c:	3708      	adds	r7, #8
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}
 8007032:	bf00      	nop
 8007034:	20000560 	.word	0x20000560
 8007038:	2000045c 	.word	0x2000045c

0800703c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b084      	sub	sp, #16
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
 8007044:	460b      	mov	r3, r1
 8007046:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007048:	2300      	movs	r3, #0
 800704a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800704c:	4b0d      	ldr	r3, [pc, #52]	; (8007084 <CDC_Transmit_FS+0x48>)
 800704e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007052:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800705a:	2b00      	cmp	r3, #0
 800705c:	d001      	beq.n	8007062 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800705e:	2301      	movs	r3, #1
 8007060:	e00b      	b.n	800707a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007062:	887b      	ldrh	r3, [r7, #2]
 8007064:	461a      	mov	r2, r3
 8007066:	6879      	ldr	r1, [r7, #4]
 8007068:	4806      	ldr	r0, [pc, #24]	; (8007084 <CDC_Transmit_FS+0x48>)
 800706a:	f7fe fe09 	bl	8005c80 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800706e:	4805      	ldr	r0, [pc, #20]	; (8007084 <CDC_Transmit_FS+0x48>)
 8007070:	f7fe fe32 	bl	8005cd8 <USBD_CDC_TransmitPacket>
 8007074:	4603      	mov	r3, r0
 8007076:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007078:	7bfb      	ldrb	r3, [r7, #15]
}
 800707a:	4618      	mov	r0, r3
 800707c:	3710      	adds	r7, #16
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}
 8007082:	bf00      	nop
 8007084:	20000560 	.word	0x20000560

08007088 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007088:	b480      	push	{r7}
 800708a:	b083      	sub	sp, #12
 800708c:	af00      	add	r7, sp, #0
 800708e:	4603      	mov	r3, r0
 8007090:	6039      	str	r1, [r7, #0]
 8007092:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	2212      	movs	r2, #18
 8007098:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800709a:	4b03      	ldr	r3, [pc, #12]	; (80070a8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800709c:	4618      	mov	r0, r3
 800709e:	370c      	adds	r7, #12
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bc80      	pop	{r7}
 80070a4:	4770      	bx	lr
 80070a6:	bf00      	nop
 80070a8:	20000148 	.word	0x20000148

080070ac <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b083      	sub	sp, #12
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	4603      	mov	r3, r0
 80070b4:	6039      	str	r1, [r7, #0]
 80070b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	2204      	movs	r2, #4
 80070bc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80070be:	4b03      	ldr	r3, [pc, #12]	; (80070cc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	370c      	adds	r7, #12
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bc80      	pop	{r7}
 80070c8:	4770      	bx	lr
 80070ca:	bf00      	nop
 80070cc:	2000015c 	.word	0x2000015c

080070d0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b082      	sub	sp, #8
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	4603      	mov	r3, r0
 80070d8:	6039      	str	r1, [r7, #0]
 80070da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80070dc:	79fb      	ldrb	r3, [r7, #7]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d105      	bne.n	80070ee <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80070e2:	683a      	ldr	r2, [r7, #0]
 80070e4:	4907      	ldr	r1, [pc, #28]	; (8007104 <USBD_FS_ProductStrDescriptor+0x34>)
 80070e6:	4808      	ldr	r0, [pc, #32]	; (8007108 <USBD_FS_ProductStrDescriptor+0x38>)
 80070e8:	f7ff fdff 	bl	8006cea <USBD_GetString>
 80070ec:	e004      	b.n	80070f8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80070ee:	683a      	ldr	r2, [r7, #0]
 80070f0:	4904      	ldr	r1, [pc, #16]	; (8007104 <USBD_FS_ProductStrDescriptor+0x34>)
 80070f2:	4805      	ldr	r0, [pc, #20]	; (8007108 <USBD_FS_ProductStrDescriptor+0x38>)
 80070f4:	f7ff fdf9 	bl	8006cea <USBD_GetString>
  }
  return USBD_StrDesc;
 80070f8:	4b02      	ldr	r3, [pc, #8]	; (8007104 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3708      	adds	r7, #8
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}
 8007102:	bf00      	nop
 8007104:	20000ff4 	.word	0x20000ff4
 8007108:	08008114 	.word	0x08008114

0800710c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b082      	sub	sp, #8
 8007110:	af00      	add	r7, sp, #0
 8007112:	4603      	mov	r3, r0
 8007114:	6039      	str	r1, [r7, #0]
 8007116:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007118:	683a      	ldr	r2, [r7, #0]
 800711a:	4904      	ldr	r1, [pc, #16]	; (800712c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800711c:	4804      	ldr	r0, [pc, #16]	; (8007130 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800711e:	f7ff fde4 	bl	8006cea <USBD_GetString>
  return USBD_StrDesc;
 8007122:	4b02      	ldr	r3, [pc, #8]	; (800712c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007124:	4618      	mov	r0, r3
 8007126:	3708      	adds	r7, #8
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}
 800712c:	20000ff4 	.word	0x20000ff4
 8007130:	0800812c 	.word	0x0800812c

08007134 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b082      	sub	sp, #8
 8007138:	af00      	add	r7, sp, #0
 800713a:	4603      	mov	r3, r0
 800713c:	6039      	str	r1, [r7, #0]
 800713e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	221a      	movs	r2, #26
 8007144:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007146:	f000 f843 	bl	80071d0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800714a:	4b02      	ldr	r3, [pc, #8]	; (8007154 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800714c:	4618      	mov	r0, r3
 800714e:	3708      	adds	r7, #8
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}
 8007154:	20000160 	.word	0x20000160

08007158 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b082      	sub	sp, #8
 800715c:	af00      	add	r7, sp, #0
 800715e:	4603      	mov	r3, r0
 8007160:	6039      	str	r1, [r7, #0]
 8007162:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007164:	79fb      	ldrb	r3, [r7, #7]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d105      	bne.n	8007176 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800716a:	683a      	ldr	r2, [r7, #0]
 800716c:	4907      	ldr	r1, [pc, #28]	; (800718c <USBD_FS_ConfigStrDescriptor+0x34>)
 800716e:	4808      	ldr	r0, [pc, #32]	; (8007190 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007170:	f7ff fdbb 	bl	8006cea <USBD_GetString>
 8007174:	e004      	b.n	8007180 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007176:	683a      	ldr	r2, [r7, #0]
 8007178:	4904      	ldr	r1, [pc, #16]	; (800718c <USBD_FS_ConfigStrDescriptor+0x34>)
 800717a:	4805      	ldr	r0, [pc, #20]	; (8007190 <USBD_FS_ConfigStrDescriptor+0x38>)
 800717c:	f7ff fdb5 	bl	8006cea <USBD_GetString>
  }
  return USBD_StrDesc;
 8007180:	4b02      	ldr	r3, [pc, #8]	; (800718c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007182:	4618      	mov	r0, r3
 8007184:	3708      	adds	r7, #8
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}
 800718a:	bf00      	nop
 800718c:	20000ff4 	.word	0x20000ff4
 8007190:	08008140 	.word	0x08008140

08007194 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b082      	sub	sp, #8
 8007198:	af00      	add	r7, sp, #0
 800719a:	4603      	mov	r3, r0
 800719c:	6039      	str	r1, [r7, #0]
 800719e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80071a0:	79fb      	ldrb	r3, [r7, #7]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d105      	bne.n	80071b2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80071a6:	683a      	ldr	r2, [r7, #0]
 80071a8:	4907      	ldr	r1, [pc, #28]	; (80071c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80071aa:	4808      	ldr	r0, [pc, #32]	; (80071cc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80071ac:	f7ff fd9d 	bl	8006cea <USBD_GetString>
 80071b0:	e004      	b.n	80071bc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80071b2:	683a      	ldr	r2, [r7, #0]
 80071b4:	4904      	ldr	r1, [pc, #16]	; (80071c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80071b6:	4805      	ldr	r0, [pc, #20]	; (80071cc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80071b8:	f7ff fd97 	bl	8006cea <USBD_GetString>
  }
  return USBD_StrDesc;
 80071bc:	4b02      	ldr	r3, [pc, #8]	; (80071c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3708      	adds	r7, #8
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}
 80071c6:	bf00      	nop
 80071c8:	20000ff4 	.word	0x20000ff4
 80071cc:	0800814c 	.word	0x0800814c

080071d0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b084      	sub	sp, #16
 80071d4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80071d6:	4b0f      	ldr	r3, [pc, #60]	; (8007214 <Get_SerialNum+0x44>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80071dc:	4b0e      	ldr	r3, [pc, #56]	; (8007218 <Get_SerialNum+0x48>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80071e2:	4b0e      	ldr	r3, [pc, #56]	; (800721c <Get_SerialNum+0x4c>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80071e8:	68fa      	ldr	r2, [r7, #12]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	4413      	add	r3, r2
 80071ee:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d009      	beq.n	800720a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80071f6:	2208      	movs	r2, #8
 80071f8:	4909      	ldr	r1, [pc, #36]	; (8007220 <Get_SerialNum+0x50>)
 80071fa:	68f8      	ldr	r0, [r7, #12]
 80071fc:	f000 f814 	bl	8007228 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007200:	2204      	movs	r2, #4
 8007202:	4908      	ldr	r1, [pc, #32]	; (8007224 <Get_SerialNum+0x54>)
 8007204:	68b8      	ldr	r0, [r7, #8]
 8007206:	f000 f80f 	bl	8007228 <IntToUnicode>
  }
}
 800720a:	bf00      	nop
 800720c:	3710      	adds	r7, #16
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}
 8007212:	bf00      	nop
 8007214:	1ffff7e8 	.word	0x1ffff7e8
 8007218:	1ffff7ec 	.word	0x1ffff7ec
 800721c:	1ffff7f0 	.word	0x1ffff7f0
 8007220:	20000162 	.word	0x20000162
 8007224:	20000172 	.word	0x20000172

08007228 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007228:	b480      	push	{r7}
 800722a:	b087      	sub	sp, #28
 800722c:	af00      	add	r7, sp, #0
 800722e:	60f8      	str	r0, [r7, #12]
 8007230:	60b9      	str	r1, [r7, #8]
 8007232:	4613      	mov	r3, r2
 8007234:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007236:	2300      	movs	r3, #0
 8007238:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800723a:	2300      	movs	r3, #0
 800723c:	75fb      	strb	r3, [r7, #23]
 800723e:	e027      	b.n	8007290 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	0f1b      	lsrs	r3, r3, #28
 8007244:	2b09      	cmp	r3, #9
 8007246:	d80b      	bhi.n	8007260 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	0f1b      	lsrs	r3, r3, #28
 800724c:	b2da      	uxtb	r2, r3
 800724e:	7dfb      	ldrb	r3, [r7, #23]
 8007250:	005b      	lsls	r3, r3, #1
 8007252:	4619      	mov	r1, r3
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	440b      	add	r3, r1
 8007258:	3230      	adds	r2, #48	; 0x30
 800725a:	b2d2      	uxtb	r2, r2
 800725c:	701a      	strb	r2, [r3, #0]
 800725e:	e00a      	b.n	8007276 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	0f1b      	lsrs	r3, r3, #28
 8007264:	b2da      	uxtb	r2, r3
 8007266:	7dfb      	ldrb	r3, [r7, #23]
 8007268:	005b      	lsls	r3, r3, #1
 800726a:	4619      	mov	r1, r3
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	440b      	add	r3, r1
 8007270:	3237      	adds	r2, #55	; 0x37
 8007272:	b2d2      	uxtb	r2, r2
 8007274:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	011b      	lsls	r3, r3, #4
 800727a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800727c:	7dfb      	ldrb	r3, [r7, #23]
 800727e:	005b      	lsls	r3, r3, #1
 8007280:	3301      	adds	r3, #1
 8007282:	68ba      	ldr	r2, [r7, #8]
 8007284:	4413      	add	r3, r2
 8007286:	2200      	movs	r2, #0
 8007288:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800728a:	7dfb      	ldrb	r3, [r7, #23]
 800728c:	3301      	adds	r3, #1
 800728e:	75fb      	strb	r3, [r7, #23]
 8007290:	7dfa      	ldrb	r2, [r7, #23]
 8007292:	79fb      	ldrb	r3, [r7, #7]
 8007294:	429a      	cmp	r2, r3
 8007296:	d3d3      	bcc.n	8007240 <IntToUnicode+0x18>
  }
}
 8007298:	bf00      	nop
 800729a:	371c      	adds	r7, #28
 800729c:	46bd      	mov	sp, r7
 800729e:	bc80      	pop	{r7}
 80072a0:	4770      	bx	lr
	...

080072a4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b084      	sub	sp, #16
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a0d      	ldr	r2, [pc, #52]	; (80072e8 <HAL_PCD_MspInit+0x44>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d113      	bne.n	80072de <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80072b6:	4b0d      	ldr	r3, [pc, #52]	; (80072ec <HAL_PCD_MspInit+0x48>)
 80072b8:	69db      	ldr	r3, [r3, #28]
 80072ba:	4a0c      	ldr	r2, [pc, #48]	; (80072ec <HAL_PCD_MspInit+0x48>)
 80072bc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80072c0:	61d3      	str	r3, [r2, #28]
 80072c2:	4b0a      	ldr	r3, [pc, #40]	; (80072ec <HAL_PCD_MspInit+0x48>)
 80072c4:	69db      	ldr	r3, [r3, #28]
 80072c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80072ca:	60fb      	str	r3, [r7, #12]
 80072cc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80072ce:	2200      	movs	r2, #0
 80072d0:	2100      	movs	r1, #0
 80072d2:	2014      	movs	r0, #20
 80072d4:	f7f9 ff2d 	bl	8001132 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80072d8:	2014      	movs	r0, #20
 80072da:	f7f9 ff46 	bl	800116a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80072de:	bf00      	nop
 80072e0:	3710      	adds	r7, #16
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}
 80072e6:	bf00      	nop
 80072e8:	40005c00 	.word	0x40005c00
 80072ec:	40021000 	.word	0x40021000

080072f0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b082      	sub	sp, #8
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8007304:	4619      	mov	r1, r3
 8007306:	4610      	mov	r0, r2
 8007308:	f7fe fdcb 	bl	8005ea2 <USBD_LL_SetupStage>
}
 800730c:	bf00      	nop
 800730e:	3708      	adds	r7, #8
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}

08007314 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b082      	sub	sp, #8
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	460b      	mov	r3, r1
 800731e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007326:	78fa      	ldrb	r2, [r7, #3]
 8007328:	6879      	ldr	r1, [r7, #4]
 800732a:	4613      	mov	r3, r2
 800732c:	009b      	lsls	r3, r3, #2
 800732e:	4413      	add	r3, r2
 8007330:	00db      	lsls	r3, r3, #3
 8007332:	440b      	add	r3, r1
 8007334:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007338:	681a      	ldr	r2, [r3, #0]
 800733a:	78fb      	ldrb	r3, [r7, #3]
 800733c:	4619      	mov	r1, r3
 800733e:	f7fe fdfb 	bl	8005f38 <USBD_LL_DataOutStage>
}
 8007342:	bf00      	nop
 8007344:	3708      	adds	r7, #8
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}

0800734a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800734a:	b580      	push	{r7, lr}
 800734c:	b082      	sub	sp, #8
 800734e:	af00      	add	r7, sp, #0
 8007350:	6078      	str	r0, [r7, #4]
 8007352:	460b      	mov	r3, r1
 8007354:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800735c:	78fa      	ldrb	r2, [r7, #3]
 800735e:	6879      	ldr	r1, [r7, #4]
 8007360:	4613      	mov	r3, r2
 8007362:	009b      	lsls	r3, r3, #2
 8007364:	4413      	add	r3, r2
 8007366:	00db      	lsls	r3, r3, #3
 8007368:	440b      	add	r3, r1
 800736a:	333c      	adds	r3, #60	; 0x3c
 800736c:	681a      	ldr	r2, [r3, #0]
 800736e:	78fb      	ldrb	r3, [r7, #3]
 8007370:	4619      	mov	r1, r3
 8007372:	f7fe fe52 	bl	800601a <USBD_LL_DataInStage>
}
 8007376:	bf00      	nop
 8007378:	3708      	adds	r7, #8
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}

0800737e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800737e:	b580      	push	{r7, lr}
 8007380:	b082      	sub	sp, #8
 8007382:	af00      	add	r7, sp, #0
 8007384:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800738c:	4618      	mov	r0, r3
 800738e:	f7fe ff62 	bl	8006256 <USBD_LL_SOF>
}
 8007392:	bf00      	nop
 8007394:	3708      	adds	r7, #8
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}

0800739a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800739a:	b580      	push	{r7, lr}
 800739c:	b084      	sub	sp, #16
 800739e:	af00      	add	r7, sp, #0
 80073a0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80073a2:	2301      	movs	r3, #1
 80073a4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	689b      	ldr	r3, [r3, #8]
 80073aa:	2b02      	cmp	r3, #2
 80073ac:	d001      	beq.n	80073b2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80073ae:	f7f9 f871 	bl	8000494 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80073b8:	7bfa      	ldrb	r2, [r7, #15]
 80073ba:	4611      	mov	r1, r2
 80073bc:	4618      	mov	r0, r3
 80073be:	f7fe ff12 	bl	80061e6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80073c8:	4618      	mov	r0, r3
 80073ca:	f7fe fecb 	bl	8006164 <USBD_LL_Reset>
}
 80073ce:	bf00      	nop
 80073d0:	3710      	adds	r7, #16
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}
	...

080073d8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b082      	sub	sp, #8
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80073e6:	4618      	mov	r0, r3
 80073e8:	f7fe ff0c 	bl	8006204 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	699b      	ldr	r3, [r3, #24]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d005      	beq.n	8007400 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80073f4:	4b04      	ldr	r3, [pc, #16]	; (8007408 <HAL_PCD_SuspendCallback+0x30>)
 80073f6:	691b      	ldr	r3, [r3, #16]
 80073f8:	4a03      	ldr	r2, [pc, #12]	; (8007408 <HAL_PCD_SuspendCallback+0x30>)
 80073fa:	f043 0306 	orr.w	r3, r3, #6
 80073fe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007400:	bf00      	nop
 8007402:	3708      	adds	r7, #8
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}
 8007408:	e000ed00 	.word	0xe000ed00

0800740c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b082      	sub	sp, #8
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800741a:	4618      	mov	r0, r3
 800741c:	f7fe ff06 	bl	800622c <USBD_LL_Resume>
}
 8007420:	bf00      	nop
 8007422:	3708      	adds	r7, #8
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}

08007428 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b082      	sub	sp, #8
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007430:	4a28      	ldr	r2, [pc, #160]	; (80074d4 <USBD_LL_Init+0xac>)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	4a26      	ldr	r2, [pc, #152]	; (80074d4 <USBD_LL_Init+0xac>)
 800743c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007440:	4b24      	ldr	r3, [pc, #144]	; (80074d4 <USBD_LL_Init+0xac>)
 8007442:	4a25      	ldr	r2, [pc, #148]	; (80074d8 <USBD_LL_Init+0xb0>)
 8007444:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007446:	4b23      	ldr	r3, [pc, #140]	; (80074d4 <USBD_LL_Init+0xac>)
 8007448:	2208      	movs	r2, #8
 800744a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800744c:	4b21      	ldr	r3, [pc, #132]	; (80074d4 <USBD_LL_Init+0xac>)
 800744e:	2202      	movs	r2, #2
 8007450:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007452:	4b20      	ldr	r3, [pc, #128]	; (80074d4 <USBD_LL_Init+0xac>)
 8007454:	2200      	movs	r2, #0
 8007456:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007458:	4b1e      	ldr	r3, [pc, #120]	; (80074d4 <USBD_LL_Init+0xac>)
 800745a:	2200      	movs	r2, #0
 800745c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800745e:	4b1d      	ldr	r3, [pc, #116]	; (80074d4 <USBD_LL_Init+0xac>)
 8007460:	2200      	movs	r2, #0
 8007462:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007464:	481b      	ldr	r0, [pc, #108]	; (80074d4 <USBD_LL_Init+0xac>)
 8007466:	f7fa f80d 	bl	8001484 <HAL_PCD_Init>
 800746a:	4603      	mov	r3, r0
 800746c:	2b00      	cmp	r3, #0
 800746e:	d001      	beq.n	8007474 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007470:	f7f9 f810 	bl	8000494 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800747a:	2318      	movs	r3, #24
 800747c:	2200      	movs	r2, #0
 800747e:	2100      	movs	r1, #0
 8007480:	f7fb fb41 	bl	8002b06 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800748a:	2358      	movs	r3, #88	; 0x58
 800748c:	2200      	movs	r2, #0
 800748e:	2180      	movs	r1, #128	; 0x80
 8007490:	f7fb fb39 	bl	8002b06 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800749a:	23c0      	movs	r3, #192	; 0xc0
 800749c:	2200      	movs	r2, #0
 800749e:	2181      	movs	r1, #129	; 0x81
 80074a0:	f7fb fb31 	bl	8002b06 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80074aa:	f44f 7388 	mov.w	r3, #272	; 0x110
 80074ae:	2200      	movs	r2, #0
 80074b0:	2101      	movs	r1, #1
 80074b2:	f7fb fb28 	bl	8002b06 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80074bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80074c0:	2200      	movs	r2, #0
 80074c2:	2182      	movs	r1, #130	; 0x82
 80074c4:	f7fb fb1f 	bl	8002b06 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80074c8:	2300      	movs	r3, #0
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3708      	adds	r7, #8
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}
 80074d2:	bf00      	nop
 80074d4:	200011f4 	.word	0x200011f4
 80074d8:	40005c00 	.word	0x40005c00

080074dc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b084      	sub	sp, #16
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074e4:	2300      	movs	r3, #0
 80074e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074e8:	2300      	movs	r3, #0
 80074ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80074f2:	4618      	mov	r0, r3
 80074f4:	f7fa f8d1 	bl	800169a <HAL_PCD_Start>
 80074f8:	4603      	mov	r3, r0
 80074fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80074fc:	7bfb      	ldrb	r3, [r7, #15]
 80074fe:	4618      	mov	r0, r3
 8007500:	f000 f94e 	bl	80077a0 <USBD_Get_USB_Status>
 8007504:	4603      	mov	r3, r0
 8007506:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007508:	7bbb      	ldrb	r3, [r7, #14]
}
 800750a:	4618      	mov	r0, r3
 800750c:	3710      	adds	r7, #16
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}

08007512 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007512:	b580      	push	{r7, lr}
 8007514:	b084      	sub	sp, #16
 8007516:	af00      	add	r7, sp, #0
 8007518:	6078      	str	r0, [r7, #4]
 800751a:	4608      	mov	r0, r1
 800751c:	4611      	mov	r1, r2
 800751e:	461a      	mov	r2, r3
 8007520:	4603      	mov	r3, r0
 8007522:	70fb      	strb	r3, [r7, #3]
 8007524:	460b      	mov	r3, r1
 8007526:	70bb      	strb	r3, [r7, #2]
 8007528:	4613      	mov	r3, r2
 800752a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800752c:	2300      	movs	r3, #0
 800752e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007530:	2300      	movs	r3, #0
 8007532:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800753a:	78bb      	ldrb	r3, [r7, #2]
 800753c:	883a      	ldrh	r2, [r7, #0]
 800753e:	78f9      	ldrb	r1, [r7, #3]
 8007540:	f7fa fa4b 	bl	80019da <HAL_PCD_EP_Open>
 8007544:	4603      	mov	r3, r0
 8007546:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007548:	7bfb      	ldrb	r3, [r7, #15]
 800754a:	4618      	mov	r0, r3
 800754c:	f000 f928 	bl	80077a0 <USBD_Get_USB_Status>
 8007550:	4603      	mov	r3, r0
 8007552:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007554:	7bbb      	ldrb	r3, [r7, #14]
}
 8007556:	4618      	mov	r0, r3
 8007558:	3710      	adds	r7, #16
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}

0800755e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800755e:	b580      	push	{r7, lr}
 8007560:	b084      	sub	sp, #16
 8007562:	af00      	add	r7, sp, #0
 8007564:	6078      	str	r0, [r7, #4]
 8007566:	460b      	mov	r3, r1
 8007568:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800756a:	2300      	movs	r3, #0
 800756c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800756e:	2300      	movs	r3, #0
 8007570:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007578:	78fa      	ldrb	r2, [r7, #3]
 800757a:	4611      	mov	r1, r2
 800757c:	4618      	mov	r0, r3
 800757e:	f7fa fa92 	bl	8001aa6 <HAL_PCD_EP_Close>
 8007582:	4603      	mov	r3, r0
 8007584:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007586:	7bfb      	ldrb	r3, [r7, #15]
 8007588:	4618      	mov	r0, r3
 800758a:	f000 f909 	bl	80077a0 <USBD_Get_USB_Status>
 800758e:	4603      	mov	r3, r0
 8007590:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007592:	7bbb      	ldrb	r3, [r7, #14]
}
 8007594:	4618      	mov	r0, r3
 8007596:	3710      	adds	r7, #16
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}

0800759c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b084      	sub	sp, #16
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
 80075a4:	460b      	mov	r3, r1
 80075a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075a8:	2300      	movs	r3, #0
 80075aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075ac:	2300      	movs	r3, #0
 80075ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80075b6:	78fa      	ldrb	r2, [r7, #3]
 80075b8:	4611      	mov	r1, r2
 80075ba:	4618      	mov	r0, r3
 80075bc:	f7fa fb52 	bl	8001c64 <HAL_PCD_EP_SetStall>
 80075c0:	4603      	mov	r3, r0
 80075c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075c4:	7bfb      	ldrb	r3, [r7, #15]
 80075c6:	4618      	mov	r0, r3
 80075c8:	f000 f8ea 	bl	80077a0 <USBD_Get_USB_Status>
 80075cc:	4603      	mov	r3, r0
 80075ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80075d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3710      	adds	r7, #16
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}

080075da <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80075da:	b580      	push	{r7, lr}
 80075dc:	b084      	sub	sp, #16
 80075de:	af00      	add	r7, sp, #0
 80075e0:	6078      	str	r0, [r7, #4]
 80075e2:	460b      	mov	r3, r1
 80075e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075e6:	2300      	movs	r3, #0
 80075e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075ea:	2300      	movs	r3, #0
 80075ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80075f4:	78fa      	ldrb	r2, [r7, #3]
 80075f6:	4611      	mov	r1, r2
 80075f8:	4618      	mov	r0, r3
 80075fa:	f7fa fb93 	bl	8001d24 <HAL_PCD_EP_ClrStall>
 80075fe:	4603      	mov	r3, r0
 8007600:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007602:	7bfb      	ldrb	r3, [r7, #15]
 8007604:	4618      	mov	r0, r3
 8007606:	f000 f8cb 	bl	80077a0 <USBD_Get_USB_Status>
 800760a:	4603      	mov	r3, r0
 800760c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800760e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007610:	4618      	mov	r0, r3
 8007612:	3710      	adds	r7, #16
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}

08007618 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007618:	b480      	push	{r7}
 800761a:	b085      	sub	sp, #20
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
 8007620:	460b      	mov	r3, r1
 8007622:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800762a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800762c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007630:	2b00      	cmp	r3, #0
 8007632:	da0c      	bge.n	800764e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007634:	78fb      	ldrb	r3, [r7, #3]
 8007636:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800763a:	68f9      	ldr	r1, [r7, #12]
 800763c:	1c5a      	adds	r2, r3, #1
 800763e:	4613      	mov	r3, r2
 8007640:	009b      	lsls	r3, r3, #2
 8007642:	4413      	add	r3, r2
 8007644:	00db      	lsls	r3, r3, #3
 8007646:	440b      	add	r3, r1
 8007648:	3302      	adds	r3, #2
 800764a:	781b      	ldrb	r3, [r3, #0]
 800764c:	e00b      	b.n	8007666 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800764e:	78fb      	ldrb	r3, [r7, #3]
 8007650:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007654:	68f9      	ldr	r1, [r7, #12]
 8007656:	4613      	mov	r3, r2
 8007658:	009b      	lsls	r3, r3, #2
 800765a:	4413      	add	r3, r2
 800765c:	00db      	lsls	r3, r3, #3
 800765e:	440b      	add	r3, r1
 8007660:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8007664:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007666:	4618      	mov	r0, r3
 8007668:	3714      	adds	r7, #20
 800766a:	46bd      	mov	sp, r7
 800766c:	bc80      	pop	{r7}
 800766e:	4770      	bx	lr

08007670 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b084      	sub	sp, #16
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
 8007678:	460b      	mov	r3, r1
 800767a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800767c:	2300      	movs	r3, #0
 800767e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007680:	2300      	movs	r3, #0
 8007682:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800768a:	78fa      	ldrb	r2, [r7, #3]
 800768c:	4611      	mov	r1, r2
 800768e:	4618      	mov	r0, r3
 8007690:	f7fa f97e 	bl	8001990 <HAL_PCD_SetAddress>
 8007694:	4603      	mov	r3, r0
 8007696:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007698:	7bfb      	ldrb	r3, [r7, #15]
 800769a:	4618      	mov	r0, r3
 800769c:	f000 f880 	bl	80077a0 <USBD_Get_USB_Status>
 80076a0:	4603      	mov	r3, r0
 80076a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80076a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	3710      	adds	r7, #16
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}

080076ae <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80076ae:	b580      	push	{r7, lr}
 80076b0:	b086      	sub	sp, #24
 80076b2:	af00      	add	r7, sp, #0
 80076b4:	60f8      	str	r0, [r7, #12]
 80076b6:	607a      	str	r2, [r7, #4]
 80076b8:	461a      	mov	r2, r3
 80076ba:	460b      	mov	r3, r1
 80076bc:	72fb      	strb	r3, [r7, #11]
 80076be:	4613      	mov	r3, r2
 80076c0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076c2:	2300      	movs	r3, #0
 80076c4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076c6:	2300      	movs	r3, #0
 80076c8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80076d0:	893b      	ldrh	r3, [r7, #8]
 80076d2:	7af9      	ldrb	r1, [r7, #11]
 80076d4:	687a      	ldr	r2, [r7, #4]
 80076d6:	f7fa fa82 	bl	8001bde <HAL_PCD_EP_Transmit>
 80076da:	4603      	mov	r3, r0
 80076dc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076de:	7dfb      	ldrb	r3, [r7, #23]
 80076e0:	4618      	mov	r0, r3
 80076e2:	f000 f85d 	bl	80077a0 <USBD_Get_USB_Status>
 80076e6:	4603      	mov	r3, r0
 80076e8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80076ea:	7dbb      	ldrb	r3, [r7, #22]
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	3718      	adds	r7, #24
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}

080076f4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b086      	sub	sp, #24
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	60f8      	str	r0, [r7, #12]
 80076fc:	607a      	str	r2, [r7, #4]
 80076fe:	461a      	mov	r2, r3
 8007700:	460b      	mov	r3, r1
 8007702:	72fb      	strb	r3, [r7, #11]
 8007704:	4613      	mov	r3, r2
 8007706:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007708:	2300      	movs	r3, #0
 800770a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800770c:	2300      	movs	r3, #0
 800770e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007716:	893b      	ldrh	r3, [r7, #8]
 8007718:	7af9      	ldrb	r1, [r7, #11]
 800771a:	687a      	ldr	r2, [r7, #4]
 800771c:	f7fa fa0b 	bl	8001b36 <HAL_PCD_EP_Receive>
 8007720:	4603      	mov	r3, r0
 8007722:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007724:	7dfb      	ldrb	r3, [r7, #23]
 8007726:	4618      	mov	r0, r3
 8007728:	f000 f83a 	bl	80077a0 <USBD_Get_USB_Status>
 800772c:	4603      	mov	r3, r0
 800772e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007730:	7dbb      	ldrb	r3, [r7, #22]
}
 8007732:	4618      	mov	r0, r3
 8007734:	3718      	adds	r7, #24
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}

0800773a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800773a:	b580      	push	{r7, lr}
 800773c:	b082      	sub	sp, #8
 800773e:	af00      	add	r7, sp, #0
 8007740:	6078      	str	r0, [r7, #4]
 8007742:	460b      	mov	r3, r1
 8007744:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800774c:	78fa      	ldrb	r2, [r7, #3]
 800774e:	4611      	mov	r1, r2
 8007750:	4618      	mov	r0, r3
 8007752:	f7fa fa2d 	bl	8001bb0 <HAL_PCD_EP_GetRxCount>
 8007756:	4603      	mov	r3, r0
}
 8007758:	4618      	mov	r0, r3
 800775a:	3708      	adds	r7, #8
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}

08007760 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007760:	b480      	push	{r7}
 8007762:	b083      	sub	sp, #12
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007768:	4b02      	ldr	r3, [pc, #8]	; (8007774 <USBD_static_malloc+0x14>)
}
 800776a:	4618      	mov	r0, r3
 800776c:	370c      	adds	r7, #12
 800776e:	46bd      	mov	sp, r7
 8007770:	bc80      	pop	{r7}
 8007772:	4770      	bx	lr
 8007774:	20000204 	.word	0x20000204

08007778 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007778:	b480      	push	{r7}
 800777a:	b083      	sub	sp, #12
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]

}
 8007780:	bf00      	nop
 8007782:	370c      	adds	r7, #12
 8007784:	46bd      	mov	sp, r7
 8007786:	bc80      	pop	{r7}
 8007788:	4770      	bx	lr

0800778a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800778a:	b480      	push	{r7}
 800778c:	b083      	sub	sp, #12
 800778e:	af00      	add	r7, sp, #0
 8007790:	6078      	str	r0, [r7, #4]
 8007792:	460b      	mov	r3, r1
 8007794:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8007796:	bf00      	nop
 8007798:	370c      	adds	r7, #12
 800779a:	46bd      	mov	sp, r7
 800779c:	bc80      	pop	{r7}
 800779e:	4770      	bx	lr

080077a0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b085      	sub	sp, #20
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	4603      	mov	r3, r0
 80077a8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077aa:	2300      	movs	r3, #0
 80077ac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80077ae:	79fb      	ldrb	r3, [r7, #7]
 80077b0:	2b03      	cmp	r3, #3
 80077b2:	d817      	bhi.n	80077e4 <USBD_Get_USB_Status+0x44>
 80077b4:	a201      	add	r2, pc, #4	; (adr r2, 80077bc <USBD_Get_USB_Status+0x1c>)
 80077b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ba:	bf00      	nop
 80077bc:	080077cd 	.word	0x080077cd
 80077c0:	080077d3 	.word	0x080077d3
 80077c4:	080077d9 	.word	0x080077d9
 80077c8:	080077df 	.word	0x080077df
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80077cc:	2300      	movs	r3, #0
 80077ce:	73fb      	strb	r3, [r7, #15]
    break;
 80077d0:	e00b      	b.n	80077ea <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80077d2:	2302      	movs	r3, #2
 80077d4:	73fb      	strb	r3, [r7, #15]
    break;
 80077d6:	e008      	b.n	80077ea <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80077d8:	2301      	movs	r3, #1
 80077da:	73fb      	strb	r3, [r7, #15]
    break;
 80077dc:	e005      	b.n	80077ea <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80077de:	2302      	movs	r3, #2
 80077e0:	73fb      	strb	r3, [r7, #15]
    break;
 80077e2:	e002      	b.n	80077ea <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80077e4:	2302      	movs	r3, #2
 80077e6:	73fb      	strb	r3, [r7, #15]
    break;
 80077e8:	bf00      	nop
  }
  return usb_status;
 80077ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	3714      	adds	r7, #20
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bc80      	pop	{r7}
 80077f4:	4770      	bx	lr
 80077f6:	bf00      	nop

080077f8 <__errno>:
 80077f8:	4b01      	ldr	r3, [pc, #4]	; (8007800 <__errno+0x8>)
 80077fa:	6818      	ldr	r0, [r3, #0]
 80077fc:	4770      	bx	lr
 80077fe:	bf00      	nop
 8007800:	2000017c 	.word	0x2000017c

08007804 <__libc_init_array>:
 8007804:	b570      	push	{r4, r5, r6, lr}
 8007806:	2500      	movs	r5, #0
 8007808:	4e0c      	ldr	r6, [pc, #48]	; (800783c <__libc_init_array+0x38>)
 800780a:	4c0d      	ldr	r4, [pc, #52]	; (8007840 <__libc_init_array+0x3c>)
 800780c:	1ba4      	subs	r4, r4, r6
 800780e:	10a4      	asrs	r4, r4, #2
 8007810:	42a5      	cmp	r5, r4
 8007812:	d109      	bne.n	8007828 <__libc_init_array+0x24>
 8007814:	f000 fc36 	bl	8008084 <_init>
 8007818:	2500      	movs	r5, #0
 800781a:	4e0a      	ldr	r6, [pc, #40]	; (8007844 <__libc_init_array+0x40>)
 800781c:	4c0a      	ldr	r4, [pc, #40]	; (8007848 <__libc_init_array+0x44>)
 800781e:	1ba4      	subs	r4, r4, r6
 8007820:	10a4      	asrs	r4, r4, #2
 8007822:	42a5      	cmp	r5, r4
 8007824:	d105      	bne.n	8007832 <__libc_init_array+0x2e>
 8007826:	bd70      	pop	{r4, r5, r6, pc}
 8007828:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800782c:	4798      	blx	r3
 800782e:	3501      	adds	r5, #1
 8007830:	e7ee      	b.n	8007810 <__libc_init_array+0xc>
 8007832:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007836:	4798      	blx	r3
 8007838:	3501      	adds	r5, #1
 800783a:	e7f2      	b.n	8007822 <__libc_init_array+0x1e>
 800783c:	080081a8 	.word	0x080081a8
 8007840:	080081a8 	.word	0x080081a8
 8007844:	080081a8 	.word	0x080081a8
 8007848:	080081ac 	.word	0x080081ac

0800784c <memcpy>:
 800784c:	b510      	push	{r4, lr}
 800784e:	1e43      	subs	r3, r0, #1
 8007850:	440a      	add	r2, r1
 8007852:	4291      	cmp	r1, r2
 8007854:	d100      	bne.n	8007858 <memcpy+0xc>
 8007856:	bd10      	pop	{r4, pc}
 8007858:	f811 4b01 	ldrb.w	r4, [r1], #1
 800785c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007860:	e7f7      	b.n	8007852 <memcpy+0x6>

08007862 <memset>:
 8007862:	4603      	mov	r3, r0
 8007864:	4402      	add	r2, r0
 8007866:	4293      	cmp	r3, r2
 8007868:	d100      	bne.n	800786c <memset+0xa>
 800786a:	4770      	bx	lr
 800786c:	f803 1b01 	strb.w	r1, [r3], #1
 8007870:	e7f9      	b.n	8007866 <memset+0x4>
	...

08007874 <siprintf>:
 8007874:	b40e      	push	{r1, r2, r3}
 8007876:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800787a:	b500      	push	{lr}
 800787c:	b09c      	sub	sp, #112	; 0x70
 800787e:	ab1d      	add	r3, sp, #116	; 0x74
 8007880:	9002      	str	r0, [sp, #8]
 8007882:	9006      	str	r0, [sp, #24]
 8007884:	9107      	str	r1, [sp, #28]
 8007886:	9104      	str	r1, [sp, #16]
 8007888:	4808      	ldr	r0, [pc, #32]	; (80078ac <siprintf+0x38>)
 800788a:	4909      	ldr	r1, [pc, #36]	; (80078b0 <siprintf+0x3c>)
 800788c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007890:	9105      	str	r1, [sp, #20]
 8007892:	6800      	ldr	r0, [r0, #0]
 8007894:	a902      	add	r1, sp, #8
 8007896:	9301      	str	r3, [sp, #4]
 8007898:	f000 f866 	bl	8007968 <_svfiprintf_r>
 800789c:	2200      	movs	r2, #0
 800789e:	9b02      	ldr	r3, [sp, #8]
 80078a0:	701a      	strb	r2, [r3, #0]
 80078a2:	b01c      	add	sp, #112	; 0x70
 80078a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80078a8:	b003      	add	sp, #12
 80078aa:	4770      	bx	lr
 80078ac:	2000017c 	.word	0x2000017c
 80078b0:	ffff0208 	.word	0xffff0208

080078b4 <__ssputs_r>:
 80078b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078b8:	688e      	ldr	r6, [r1, #8]
 80078ba:	4682      	mov	sl, r0
 80078bc:	429e      	cmp	r6, r3
 80078be:	460c      	mov	r4, r1
 80078c0:	4690      	mov	r8, r2
 80078c2:	4699      	mov	r9, r3
 80078c4:	d837      	bhi.n	8007936 <__ssputs_r+0x82>
 80078c6:	898a      	ldrh	r2, [r1, #12]
 80078c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80078cc:	d031      	beq.n	8007932 <__ssputs_r+0x7e>
 80078ce:	2302      	movs	r3, #2
 80078d0:	6825      	ldr	r5, [r4, #0]
 80078d2:	6909      	ldr	r1, [r1, #16]
 80078d4:	1a6f      	subs	r7, r5, r1
 80078d6:	6965      	ldr	r5, [r4, #20]
 80078d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80078dc:	fb95 f5f3 	sdiv	r5, r5, r3
 80078e0:	f109 0301 	add.w	r3, r9, #1
 80078e4:	443b      	add	r3, r7
 80078e6:	429d      	cmp	r5, r3
 80078e8:	bf38      	it	cc
 80078ea:	461d      	movcc	r5, r3
 80078ec:	0553      	lsls	r3, r2, #21
 80078ee:	d530      	bpl.n	8007952 <__ssputs_r+0x9e>
 80078f0:	4629      	mov	r1, r5
 80078f2:	f000 fb2d 	bl	8007f50 <_malloc_r>
 80078f6:	4606      	mov	r6, r0
 80078f8:	b950      	cbnz	r0, 8007910 <__ssputs_r+0x5c>
 80078fa:	230c      	movs	r3, #12
 80078fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007900:	f8ca 3000 	str.w	r3, [sl]
 8007904:	89a3      	ldrh	r3, [r4, #12]
 8007906:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800790a:	81a3      	strh	r3, [r4, #12]
 800790c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007910:	463a      	mov	r2, r7
 8007912:	6921      	ldr	r1, [r4, #16]
 8007914:	f7ff ff9a 	bl	800784c <memcpy>
 8007918:	89a3      	ldrh	r3, [r4, #12]
 800791a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800791e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007922:	81a3      	strh	r3, [r4, #12]
 8007924:	6126      	str	r6, [r4, #16]
 8007926:	443e      	add	r6, r7
 8007928:	6026      	str	r6, [r4, #0]
 800792a:	464e      	mov	r6, r9
 800792c:	6165      	str	r5, [r4, #20]
 800792e:	1bed      	subs	r5, r5, r7
 8007930:	60a5      	str	r5, [r4, #8]
 8007932:	454e      	cmp	r6, r9
 8007934:	d900      	bls.n	8007938 <__ssputs_r+0x84>
 8007936:	464e      	mov	r6, r9
 8007938:	4632      	mov	r2, r6
 800793a:	4641      	mov	r1, r8
 800793c:	6820      	ldr	r0, [r4, #0]
 800793e:	f000 faa1 	bl	8007e84 <memmove>
 8007942:	68a3      	ldr	r3, [r4, #8]
 8007944:	2000      	movs	r0, #0
 8007946:	1b9b      	subs	r3, r3, r6
 8007948:	60a3      	str	r3, [r4, #8]
 800794a:	6823      	ldr	r3, [r4, #0]
 800794c:	441e      	add	r6, r3
 800794e:	6026      	str	r6, [r4, #0]
 8007950:	e7dc      	b.n	800790c <__ssputs_r+0x58>
 8007952:	462a      	mov	r2, r5
 8007954:	f000 fb56 	bl	8008004 <_realloc_r>
 8007958:	4606      	mov	r6, r0
 800795a:	2800      	cmp	r0, #0
 800795c:	d1e2      	bne.n	8007924 <__ssputs_r+0x70>
 800795e:	6921      	ldr	r1, [r4, #16]
 8007960:	4650      	mov	r0, sl
 8007962:	f000 faa9 	bl	8007eb8 <_free_r>
 8007966:	e7c8      	b.n	80078fa <__ssputs_r+0x46>

08007968 <_svfiprintf_r>:
 8007968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800796c:	461d      	mov	r5, r3
 800796e:	898b      	ldrh	r3, [r1, #12]
 8007970:	b09d      	sub	sp, #116	; 0x74
 8007972:	061f      	lsls	r7, r3, #24
 8007974:	4680      	mov	r8, r0
 8007976:	460c      	mov	r4, r1
 8007978:	4616      	mov	r6, r2
 800797a:	d50f      	bpl.n	800799c <_svfiprintf_r+0x34>
 800797c:	690b      	ldr	r3, [r1, #16]
 800797e:	b96b      	cbnz	r3, 800799c <_svfiprintf_r+0x34>
 8007980:	2140      	movs	r1, #64	; 0x40
 8007982:	f000 fae5 	bl	8007f50 <_malloc_r>
 8007986:	6020      	str	r0, [r4, #0]
 8007988:	6120      	str	r0, [r4, #16]
 800798a:	b928      	cbnz	r0, 8007998 <_svfiprintf_r+0x30>
 800798c:	230c      	movs	r3, #12
 800798e:	f8c8 3000 	str.w	r3, [r8]
 8007992:	f04f 30ff 	mov.w	r0, #4294967295
 8007996:	e0c8      	b.n	8007b2a <_svfiprintf_r+0x1c2>
 8007998:	2340      	movs	r3, #64	; 0x40
 800799a:	6163      	str	r3, [r4, #20]
 800799c:	2300      	movs	r3, #0
 800799e:	9309      	str	r3, [sp, #36]	; 0x24
 80079a0:	2320      	movs	r3, #32
 80079a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80079a6:	2330      	movs	r3, #48	; 0x30
 80079a8:	f04f 0b01 	mov.w	fp, #1
 80079ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80079b0:	9503      	str	r5, [sp, #12]
 80079b2:	4637      	mov	r7, r6
 80079b4:	463d      	mov	r5, r7
 80079b6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80079ba:	b10b      	cbz	r3, 80079c0 <_svfiprintf_r+0x58>
 80079bc:	2b25      	cmp	r3, #37	; 0x25
 80079be:	d13e      	bne.n	8007a3e <_svfiprintf_r+0xd6>
 80079c0:	ebb7 0a06 	subs.w	sl, r7, r6
 80079c4:	d00b      	beq.n	80079de <_svfiprintf_r+0x76>
 80079c6:	4653      	mov	r3, sl
 80079c8:	4632      	mov	r2, r6
 80079ca:	4621      	mov	r1, r4
 80079cc:	4640      	mov	r0, r8
 80079ce:	f7ff ff71 	bl	80078b4 <__ssputs_r>
 80079d2:	3001      	adds	r0, #1
 80079d4:	f000 80a4 	beq.w	8007b20 <_svfiprintf_r+0x1b8>
 80079d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079da:	4453      	add	r3, sl
 80079dc:	9309      	str	r3, [sp, #36]	; 0x24
 80079de:	783b      	ldrb	r3, [r7, #0]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	f000 809d 	beq.w	8007b20 <_svfiprintf_r+0x1b8>
 80079e6:	2300      	movs	r3, #0
 80079e8:	f04f 32ff 	mov.w	r2, #4294967295
 80079ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80079f0:	9304      	str	r3, [sp, #16]
 80079f2:	9307      	str	r3, [sp, #28]
 80079f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80079f8:	931a      	str	r3, [sp, #104]	; 0x68
 80079fa:	462f      	mov	r7, r5
 80079fc:	2205      	movs	r2, #5
 80079fe:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007a02:	4850      	ldr	r0, [pc, #320]	; (8007b44 <_svfiprintf_r+0x1dc>)
 8007a04:	f000 fa30 	bl	8007e68 <memchr>
 8007a08:	9b04      	ldr	r3, [sp, #16]
 8007a0a:	b9d0      	cbnz	r0, 8007a42 <_svfiprintf_r+0xda>
 8007a0c:	06d9      	lsls	r1, r3, #27
 8007a0e:	bf44      	itt	mi
 8007a10:	2220      	movmi	r2, #32
 8007a12:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007a16:	071a      	lsls	r2, r3, #28
 8007a18:	bf44      	itt	mi
 8007a1a:	222b      	movmi	r2, #43	; 0x2b
 8007a1c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007a20:	782a      	ldrb	r2, [r5, #0]
 8007a22:	2a2a      	cmp	r2, #42	; 0x2a
 8007a24:	d015      	beq.n	8007a52 <_svfiprintf_r+0xea>
 8007a26:	462f      	mov	r7, r5
 8007a28:	2000      	movs	r0, #0
 8007a2a:	250a      	movs	r5, #10
 8007a2c:	9a07      	ldr	r2, [sp, #28]
 8007a2e:	4639      	mov	r1, r7
 8007a30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a34:	3b30      	subs	r3, #48	; 0x30
 8007a36:	2b09      	cmp	r3, #9
 8007a38:	d94d      	bls.n	8007ad6 <_svfiprintf_r+0x16e>
 8007a3a:	b1b8      	cbz	r0, 8007a6c <_svfiprintf_r+0x104>
 8007a3c:	e00f      	b.n	8007a5e <_svfiprintf_r+0xf6>
 8007a3e:	462f      	mov	r7, r5
 8007a40:	e7b8      	b.n	80079b4 <_svfiprintf_r+0x4c>
 8007a42:	4a40      	ldr	r2, [pc, #256]	; (8007b44 <_svfiprintf_r+0x1dc>)
 8007a44:	463d      	mov	r5, r7
 8007a46:	1a80      	subs	r0, r0, r2
 8007a48:	fa0b f000 	lsl.w	r0, fp, r0
 8007a4c:	4318      	orrs	r0, r3
 8007a4e:	9004      	str	r0, [sp, #16]
 8007a50:	e7d3      	b.n	80079fa <_svfiprintf_r+0x92>
 8007a52:	9a03      	ldr	r2, [sp, #12]
 8007a54:	1d11      	adds	r1, r2, #4
 8007a56:	6812      	ldr	r2, [r2, #0]
 8007a58:	9103      	str	r1, [sp, #12]
 8007a5a:	2a00      	cmp	r2, #0
 8007a5c:	db01      	blt.n	8007a62 <_svfiprintf_r+0xfa>
 8007a5e:	9207      	str	r2, [sp, #28]
 8007a60:	e004      	b.n	8007a6c <_svfiprintf_r+0x104>
 8007a62:	4252      	negs	r2, r2
 8007a64:	f043 0302 	orr.w	r3, r3, #2
 8007a68:	9207      	str	r2, [sp, #28]
 8007a6a:	9304      	str	r3, [sp, #16]
 8007a6c:	783b      	ldrb	r3, [r7, #0]
 8007a6e:	2b2e      	cmp	r3, #46	; 0x2e
 8007a70:	d10c      	bne.n	8007a8c <_svfiprintf_r+0x124>
 8007a72:	787b      	ldrb	r3, [r7, #1]
 8007a74:	2b2a      	cmp	r3, #42	; 0x2a
 8007a76:	d133      	bne.n	8007ae0 <_svfiprintf_r+0x178>
 8007a78:	9b03      	ldr	r3, [sp, #12]
 8007a7a:	3702      	adds	r7, #2
 8007a7c:	1d1a      	adds	r2, r3, #4
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	9203      	str	r2, [sp, #12]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	bfb8      	it	lt
 8007a86:	f04f 33ff 	movlt.w	r3, #4294967295
 8007a8a:	9305      	str	r3, [sp, #20]
 8007a8c:	4d2e      	ldr	r5, [pc, #184]	; (8007b48 <_svfiprintf_r+0x1e0>)
 8007a8e:	2203      	movs	r2, #3
 8007a90:	7839      	ldrb	r1, [r7, #0]
 8007a92:	4628      	mov	r0, r5
 8007a94:	f000 f9e8 	bl	8007e68 <memchr>
 8007a98:	b138      	cbz	r0, 8007aaa <_svfiprintf_r+0x142>
 8007a9a:	2340      	movs	r3, #64	; 0x40
 8007a9c:	1b40      	subs	r0, r0, r5
 8007a9e:	fa03 f000 	lsl.w	r0, r3, r0
 8007aa2:	9b04      	ldr	r3, [sp, #16]
 8007aa4:	3701      	adds	r7, #1
 8007aa6:	4303      	orrs	r3, r0
 8007aa8:	9304      	str	r3, [sp, #16]
 8007aaa:	7839      	ldrb	r1, [r7, #0]
 8007aac:	2206      	movs	r2, #6
 8007aae:	4827      	ldr	r0, [pc, #156]	; (8007b4c <_svfiprintf_r+0x1e4>)
 8007ab0:	1c7e      	adds	r6, r7, #1
 8007ab2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007ab6:	f000 f9d7 	bl	8007e68 <memchr>
 8007aba:	2800      	cmp	r0, #0
 8007abc:	d038      	beq.n	8007b30 <_svfiprintf_r+0x1c8>
 8007abe:	4b24      	ldr	r3, [pc, #144]	; (8007b50 <_svfiprintf_r+0x1e8>)
 8007ac0:	bb13      	cbnz	r3, 8007b08 <_svfiprintf_r+0x1a0>
 8007ac2:	9b03      	ldr	r3, [sp, #12]
 8007ac4:	3307      	adds	r3, #7
 8007ac6:	f023 0307 	bic.w	r3, r3, #7
 8007aca:	3308      	adds	r3, #8
 8007acc:	9303      	str	r3, [sp, #12]
 8007ace:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ad0:	444b      	add	r3, r9
 8007ad2:	9309      	str	r3, [sp, #36]	; 0x24
 8007ad4:	e76d      	b.n	80079b2 <_svfiprintf_r+0x4a>
 8007ad6:	fb05 3202 	mla	r2, r5, r2, r3
 8007ada:	2001      	movs	r0, #1
 8007adc:	460f      	mov	r7, r1
 8007ade:	e7a6      	b.n	8007a2e <_svfiprintf_r+0xc6>
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	250a      	movs	r5, #10
 8007ae4:	4619      	mov	r1, r3
 8007ae6:	3701      	adds	r7, #1
 8007ae8:	9305      	str	r3, [sp, #20]
 8007aea:	4638      	mov	r0, r7
 8007aec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007af0:	3a30      	subs	r2, #48	; 0x30
 8007af2:	2a09      	cmp	r2, #9
 8007af4:	d903      	bls.n	8007afe <_svfiprintf_r+0x196>
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d0c8      	beq.n	8007a8c <_svfiprintf_r+0x124>
 8007afa:	9105      	str	r1, [sp, #20]
 8007afc:	e7c6      	b.n	8007a8c <_svfiprintf_r+0x124>
 8007afe:	fb05 2101 	mla	r1, r5, r1, r2
 8007b02:	2301      	movs	r3, #1
 8007b04:	4607      	mov	r7, r0
 8007b06:	e7f0      	b.n	8007aea <_svfiprintf_r+0x182>
 8007b08:	ab03      	add	r3, sp, #12
 8007b0a:	9300      	str	r3, [sp, #0]
 8007b0c:	4622      	mov	r2, r4
 8007b0e:	4b11      	ldr	r3, [pc, #68]	; (8007b54 <_svfiprintf_r+0x1ec>)
 8007b10:	a904      	add	r1, sp, #16
 8007b12:	4640      	mov	r0, r8
 8007b14:	f3af 8000 	nop.w
 8007b18:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007b1c:	4681      	mov	r9, r0
 8007b1e:	d1d6      	bne.n	8007ace <_svfiprintf_r+0x166>
 8007b20:	89a3      	ldrh	r3, [r4, #12]
 8007b22:	065b      	lsls	r3, r3, #25
 8007b24:	f53f af35 	bmi.w	8007992 <_svfiprintf_r+0x2a>
 8007b28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b2a:	b01d      	add	sp, #116	; 0x74
 8007b2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b30:	ab03      	add	r3, sp, #12
 8007b32:	9300      	str	r3, [sp, #0]
 8007b34:	4622      	mov	r2, r4
 8007b36:	4b07      	ldr	r3, [pc, #28]	; (8007b54 <_svfiprintf_r+0x1ec>)
 8007b38:	a904      	add	r1, sp, #16
 8007b3a:	4640      	mov	r0, r8
 8007b3c:	f000 f882 	bl	8007c44 <_printf_i>
 8007b40:	e7ea      	b.n	8007b18 <_svfiprintf_r+0x1b0>
 8007b42:	bf00      	nop
 8007b44:	08008174 	.word	0x08008174
 8007b48:	0800817a 	.word	0x0800817a
 8007b4c:	0800817e 	.word	0x0800817e
 8007b50:	00000000 	.word	0x00000000
 8007b54:	080078b5 	.word	0x080078b5

08007b58 <_printf_common>:
 8007b58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b5c:	4691      	mov	r9, r2
 8007b5e:	461f      	mov	r7, r3
 8007b60:	688a      	ldr	r2, [r1, #8]
 8007b62:	690b      	ldr	r3, [r1, #16]
 8007b64:	4606      	mov	r6, r0
 8007b66:	4293      	cmp	r3, r2
 8007b68:	bfb8      	it	lt
 8007b6a:	4613      	movlt	r3, r2
 8007b6c:	f8c9 3000 	str.w	r3, [r9]
 8007b70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007b74:	460c      	mov	r4, r1
 8007b76:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007b7a:	b112      	cbz	r2, 8007b82 <_printf_common+0x2a>
 8007b7c:	3301      	adds	r3, #1
 8007b7e:	f8c9 3000 	str.w	r3, [r9]
 8007b82:	6823      	ldr	r3, [r4, #0]
 8007b84:	0699      	lsls	r1, r3, #26
 8007b86:	bf42      	ittt	mi
 8007b88:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007b8c:	3302      	addmi	r3, #2
 8007b8e:	f8c9 3000 	strmi.w	r3, [r9]
 8007b92:	6825      	ldr	r5, [r4, #0]
 8007b94:	f015 0506 	ands.w	r5, r5, #6
 8007b98:	d107      	bne.n	8007baa <_printf_common+0x52>
 8007b9a:	f104 0a19 	add.w	sl, r4, #25
 8007b9e:	68e3      	ldr	r3, [r4, #12]
 8007ba0:	f8d9 2000 	ldr.w	r2, [r9]
 8007ba4:	1a9b      	subs	r3, r3, r2
 8007ba6:	42ab      	cmp	r3, r5
 8007ba8:	dc29      	bgt.n	8007bfe <_printf_common+0xa6>
 8007baa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007bae:	6822      	ldr	r2, [r4, #0]
 8007bb0:	3300      	adds	r3, #0
 8007bb2:	bf18      	it	ne
 8007bb4:	2301      	movne	r3, #1
 8007bb6:	0692      	lsls	r2, r2, #26
 8007bb8:	d42e      	bmi.n	8007c18 <_printf_common+0xc0>
 8007bba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007bbe:	4639      	mov	r1, r7
 8007bc0:	4630      	mov	r0, r6
 8007bc2:	47c0      	blx	r8
 8007bc4:	3001      	adds	r0, #1
 8007bc6:	d021      	beq.n	8007c0c <_printf_common+0xb4>
 8007bc8:	6823      	ldr	r3, [r4, #0]
 8007bca:	68e5      	ldr	r5, [r4, #12]
 8007bcc:	f003 0306 	and.w	r3, r3, #6
 8007bd0:	2b04      	cmp	r3, #4
 8007bd2:	bf18      	it	ne
 8007bd4:	2500      	movne	r5, #0
 8007bd6:	f8d9 2000 	ldr.w	r2, [r9]
 8007bda:	f04f 0900 	mov.w	r9, #0
 8007bde:	bf08      	it	eq
 8007be0:	1aad      	subeq	r5, r5, r2
 8007be2:	68a3      	ldr	r3, [r4, #8]
 8007be4:	6922      	ldr	r2, [r4, #16]
 8007be6:	bf08      	it	eq
 8007be8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007bec:	4293      	cmp	r3, r2
 8007bee:	bfc4      	itt	gt
 8007bf0:	1a9b      	subgt	r3, r3, r2
 8007bf2:	18ed      	addgt	r5, r5, r3
 8007bf4:	341a      	adds	r4, #26
 8007bf6:	454d      	cmp	r5, r9
 8007bf8:	d11a      	bne.n	8007c30 <_printf_common+0xd8>
 8007bfa:	2000      	movs	r0, #0
 8007bfc:	e008      	b.n	8007c10 <_printf_common+0xb8>
 8007bfe:	2301      	movs	r3, #1
 8007c00:	4652      	mov	r2, sl
 8007c02:	4639      	mov	r1, r7
 8007c04:	4630      	mov	r0, r6
 8007c06:	47c0      	blx	r8
 8007c08:	3001      	adds	r0, #1
 8007c0a:	d103      	bne.n	8007c14 <_printf_common+0xbc>
 8007c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8007c10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c14:	3501      	adds	r5, #1
 8007c16:	e7c2      	b.n	8007b9e <_printf_common+0x46>
 8007c18:	2030      	movs	r0, #48	; 0x30
 8007c1a:	18e1      	adds	r1, r4, r3
 8007c1c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007c20:	1c5a      	adds	r2, r3, #1
 8007c22:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007c26:	4422      	add	r2, r4
 8007c28:	3302      	adds	r3, #2
 8007c2a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007c2e:	e7c4      	b.n	8007bba <_printf_common+0x62>
 8007c30:	2301      	movs	r3, #1
 8007c32:	4622      	mov	r2, r4
 8007c34:	4639      	mov	r1, r7
 8007c36:	4630      	mov	r0, r6
 8007c38:	47c0      	blx	r8
 8007c3a:	3001      	adds	r0, #1
 8007c3c:	d0e6      	beq.n	8007c0c <_printf_common+0xb4>
 8007c3e:	f109 0901 	add.w	r9, r9, #1
 8007c42:	e7d8      	b.n	8007bf6 <_printf_common+0x9e>

08007c44 <_printf_i>:
 8007c44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007c48:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007c4c:	460c      	mov	r4, r1
 8007c4e:	7e09      	ldrb	r1, [r1, #24]
 8007c50:	b085      	sub	sp, #20
 8007c52:	296e      	cmp	r1, #110	; 0x6e
 8007c54:	4617      	mov	r7, r2
 8007c56:	4606      	mov	r6, r0
 8007c58:	4698      	mov	r8, r3
 8007c5a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c5c:	f000 80b3 	beq.w	8007dc6 <_printf_i+0x182>
 8007c60:	d822      	bhi.n	8007ca8 <_printf_i+0x64>
 8007c62:	2963      	cmp	r1, #99	; 0x63
 8007c64:	d036      	beq.n	8007cd4 <_printf_i+0x90>
 8007c66:	d80a      	bhi.n	8007c7e <_printf_i+0x3a>
 8007c68:	2900      	cmp	r1, #0
 8007c6a:	f000 80b9 	beq.w	8007de0 <_printf_i+0x19c>
 8007c6e:	2958      	cmp	r1, #88	; 0x58
 8007c70:	f000 8083 	beq.w	8007d7a <_printf_i+0x136>
 8007c74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c78:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007c7c:	e032      	b.n	8007ce4 <_printf_i+0xa0>
 8007c7e:	2964      	cmp	r1, #100	; 0x64
 8007c80:	d001      	beq.n	8007c86 <_printf_i+0x42>
 8007c82:	2969      	cmp	r1, #105	; 0x69
 8007c84:	d1f6      	bne.n	8007c74 <_printf_i+0x30>
 8007c86:	6820      	ldr	r0, [r4, #0]
 8007c88:	6813      	ldr	r3, [r2, #0]
 8007c8a:	0605      	lsls	r5, r0, #24
 8007c8c:	f103 0104 	add.w	r1, r3, #4
 8007c90:	d52a      	bpl.n	8007ce8 <_printf_i+0xa4>
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	6011      	str	r1, [r2, #0]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	da03      	bge.n	8007ca2 <_printf_i+0x5e>
 8007c9a:	222d      	movs	r2, #45	; 0x2d
 8007c9c:	425b      	negs	r3, r3
 8007c9e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007ca2:	486f      	ldr	r0, [pc, #444]	; (8007e60 <_printf_i+0x21c>)
 8007ca4:	220a      	movs	r2, #10
 8007ca6:	e039      	b.n	8007d1c <_printf_i+0xd8>
 8007ca8:	2973      	cmp	r1, #115	; 0x73
 8007caa:	f000 809d 	beq.w	8007de8 <_printf_i+0x1a4>
 8007cae:	d808      	bhi.n	8007cc2 <_printf_i+0x7e>
 8007cb0:	296f      	cmp	r1, #111	; 0x6f
 8007cb2:	d020      	beq.n	8007cf6 <_printf_i+0xb2>
 8007cb4:	2970      	cmp	r1, #112	; 0x70
 8007cb6:	d1dd      	bne.n	8007c74 <_printf_i+0x30>
 8007cb8:	6823      	ldr	r3, [r4, #0]
 8007cba:	f043 0320 	orr.w	r3, r3, #32
 8007cbe:	6023      	str	r3, [r4, #0]
 8007cc0:	e003      	b.n	8007cca <_printf_i+0x86>
 8007cc2:	2975      	cmp	r1, #117	; 0x75
 8007cc4:	d017      	beq.n	8007cf6 <_printf_i+0xb2>
 8007cc6:	2978      	cmp	r1, #120	; 0x78
 8007cc8:	d1d4      	bne.n	8007c74 <_printf_i+0x30>
 8007cca:	2378      	movs	r3, #120	; 0x78
 8007ccc:	4865      	ldr	r0, [pc, #404]	; (8007e64 <_printf_i+0x220>)
 8007cce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007cd2:	e055      	b.n	8007d80 <_printf_i+0x13c>
 8007cd4:	6813      	ldr	r3, [r2, #0]
 8007cd6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007cda:	1d19      	adds	r1, r3, #4
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	6011      	str	r1, [r2, #0]
 8007ce0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	e08c      	b.n	8007e02 <_printf_i+0x1be>
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007cee:	6011      	str	r1, [r2, #0]
 8007cf0:	bf18      	it	ne
 8007cf2:	b21b      	sxthne	r3, r3
 8007cf4:	e7cf      	b.n	8007c96 <_printf_i+0x52>
 8007cf6:	6813      	ldr	r3, [r2, #0]
 8007cf8:	6825      	ldr	r5, [r4, #0]
 8007cfa:	1d18      	adds	r0, r3, #4
 8007cfc:	6010      	str	r0, [r2, #0]
 8007cfe:	0628      	lsls	r0, r5, #24
 8007d00:	d501      	bpl.n	8007d06 <_printf_i+0xc2>
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	e002      	b.n	8007d0c <_printf_i+0xc8>
 8007d06:	0668      	lsls	r0, r5, #25
 8007d08:	d5fb      	bpl.n	8007d02 <_printf_i+0xbe>
 8007d0a:	881b      	ldrh	r3, [r3, #0]
 8007d0c:	296f      	cmp	r1, #111	; 0x6f
 8007d0e:	bf14      	ite	ne
 8007d10:	220a      	movne	r2, #10
 8007d12:	2208      	moveq	r2, #8
 8007d14:	4852      	ldr	r0, [pc, #328]	; (8007e60 <_printf_i+0x21c>)
 8007d16:	2100      	movs	r1, #0
 8007d18:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007d1c:	6865      	ldr	r5, [r4, #4]
 8007d1e:	2d00      	cmp	r5, #0
 8007d20:	60a5      	str	r5, [r4, #8]
 8007d22:	f2c0 8095 	blt.w	8007e50 <_printf_i+0x20c>
 8007d26:	6821      	ldr	r1, [r4, #0]
 8007d28:	f021 0104 	bic.w	r1, r1, #4
 8007d2c:	6021      	str	r1, [r4, #0]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d13d      	bne.n	8007dae <_printf_i+0x16a>
 8007d32:	2d00      	cmp	r5, #0
 8007d34:	f040 808e 	bne.w	8007e54 <_printf_i+0x210>
 8007d38:	4665      	mov	r5, ip
 8007d3a:	2a08      	cmp	r2, #8
 8007d3c:	d10b      	bne.n	8007d56 <_printf_i+0x112>
 8007d3e:	6823      	ldr	r3, [r4, #0]
 8007d40:	07db      	lsls	r3, r3, #31
 8007d42:	d508      	bpl.n	8007d56 <_printf_i+0x112>
 8007d44:	6923      	ldr	r3, [r4, #16]
 8007d46:	6862      	ldr	r2, [r4, #4]
 8007d48:	429a      	cmp	r2, r3
 8007d4a:	bfde      	ittt	le
 8007d4c:	2330      	movle	r3, #48	; 0x30
 8007d4e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007d52:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007d56:	ebac 0305 	sub.w	r3, ip, r5
 8007d5a:	6123      	str	r3, [r4, #16]
 8007d5c:	f8cd 8000 	str.w	r8, [sp]
 8007d60:	463b      	mov	r3, r7
 8007d62:	aa03      	add	r2, sp, #12
 8007d64:	4621      	mov	r1, r4
 8007d66:	4630      	mov	r0, r6
 8007d68:	f7ff fef6 	bl	8007b58 <_printf_common>
 8007d6c:	3001      	adds	r0, #1
 8007d6e:	d14d      	bne.n	8007e0c <_printf_i+0x1c8>
 8007d70:	f04f 30ff 	mov.w	r0, #4294967295
 8007d74:	b005      	add	sp, #20
 8007d76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007d7a:	4839      	ldr	r0, [pc, #228]	; (8007e60 <_printf_i+0x21c>)
 8007d7c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007d80:	6813      	ldr	r3, [r2, #0]
 8007d82:	6821      	ldr	r1, [r4, #0]
 8007d84:	1d1d      	adds	r5, r3, #4
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	6015      	str	r5, [r2, #0]
 8007d8a:	060a      	lsls	r2, r1, #24
 8007d8c:	d50b      	bpl.n	8007da6 <_printf_i+0x162>
 8007d8e:	07ca      	lsls	r2, r1, #31
 8007d90:	bf44      	itt	mi
 8007d92:	f041 0120 	orrmi.w	r1, r1, #32
 8007d96:	6021      	strmi	r1, [r4, #0]
 8007d98:	b91b      	cbnz	r3, 8007da2 <_printf_i+0x15e>
 8007d9a:	6822      	ldr	r2, [r4, #0]
 8007d9c:	f022 0220 	bic.w	r2, r2, #32
 8007da0:	6022      	str	r2, [r4, #0]
 8007da2:	2210      	movs	r2, #16
 8007da4:	e7b7      	b.n	8007d16 <_printf_i+0xd2>
 8007da6:	064d      	lsls	r5, r1, #25
 8007da8:	bf48      	it	mi
 8007daa:	b29b      	uxthmi	r3, r3
 8007dac:	e7ef      	b.n	8007d8e <_printf_i+0x14a>
 8007dae:	4665      	mov	r5, ip
 8007db0:	fbb3 f1f2 	udiv	r1, r3, r2
 8007db4:	fb02 3311 	mls	r3, r2, r1, r3
 8007db8:	5cc3      	ldrb	r3, [r0, r3]
 8007dba:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007dbe:	460b      	mov	r3, r1
 8007dc0:	2900      	cmp	r1, #0
 8007dc2:	d1f5      	bne.n	8007db0 <_printf_i+0x16c>
 8007dc4:	e7b9      	b.n	8007d3a <_printf_i+0xf6>
 8007dc6:	6813      	ldr	r3, [r2, #0]
 8007dc8:	6825      	ldr	r5, [r4, #0]
 8007dca:	1d18      	adds	r0, r3, #4
 8007dcc:	6961      	ldr	r1, [r4, #20]
 8007dce:	6010      	str	r0, [r2, #0]
 8007dd0:	0628      	lsls	r0, r5, #24
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	d501      	bpl.n	8007dda <_printf_i+0x196>
 8007dd6:	6019      	str	r1, [r3, #0]
 8007dd8:	e002      	b.n	8007de0 <_printf_i+0x19c>
 8007dda:	066a      	lsls	r2, r5, #25
 8007ddc:	d5fb      	bpl.n	8007dd6 <_printf_i+0x192>
 8007dde:	8019      	strh	r1, [r3, #0]
 8007de0:	2300      	movs	r3, #0
 8007de2:	4665      	mov	r5, ip
 8007de4:	6123      	str	r3, [r4, #16]
 8007de6:	e7b9      	b.n	8007d5c <_printf_i+0x118>
 8007de8:	6813      	ldr	r3, [r2, #0]
 8007dea:	1d19      	adds	r1, r3, #4
 8007dec:	6011      	str	r1, [r2, #0]
 8007dee:	681d      	ldr	r5, [r3, #0]
 8007df0:	6862      	ldr	r2, [r4, #4]
 8007df2:	2100      	movs	r1, #0
 8007df4:	4628      	mov	r0, r5
 8007df6:	f000 f837 	bl	8007e68 <memchr>
 8007dfa:	b108      	cbz	r0, 8007e00 <_printf_i+0x1bc>
 8007dfc:	1b40      	subs	r0, r0, r5
 8007dfe:	6060      	str	r0, [r4, #4]
 8007e00:	6863      	ldr	r3, [r4, #4]
 8007e02:	6123      	str	r3, [r4, #16]
 8007e04:	2300      	movs	r3, #0
 8007e06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e0a:	e7a7      	b.n	8007d5c <_printf_i+0x118>
 8007e0c:	6923      	ldr	r3, [r4, #16]
 8007e0e:	462a      	mov	r2, r5
 8007e10:	4639      	mov	r1, r7
 8007e12:	4630      	mov	r0, r6
 8007e14:	47c0      	blx	r8
 8007e16:	3001      	adds	r0, #1
 8007e18:	d0aa      	beq.n	8007d70 <_printf_i+0x12c>
 8007e1a:	6823      	ldr	r3, [r4, #0]
 8007e1c:	079b      	lsls	r3, r3, #30
 8007e1e:	d413      	bmi.n	8007e48 <_printf_i+0x204>
 8007e20:	68e0      	ldr	r0, [r4, #12]
 8007e22:	9b03      	ldr	r3, [sp, #12]
 8007e24:	4298      	cmp	r0, r3
 8007e26:	bfb8      	it	lt
 8007e28:	4618      	movlt	r0, r3
 8007e2a:	e7a3      	b.n	8007d74 <_printf_i+0x130>
 8007e2c:	2301      	movs	r3, #1
 8007e2e:	464a      	mov	r2, r9
 8007e30:	4639      	mov	r1, r7
 8007e32:	4630      	mov	r0, r6
 8007e34:	47c0      	blx	r8
 8007e36:	3001      	adds	r0, #1
 8007e38:	d09a      	beq.n	8007d70 <_printf_i+0x12c>
 8007e3a:	3501      	adds	r5, #1
 8007e3c:	68e3      	ldr	r3, [r4, #12]
 8007e3e:	9a03      	ldr	r2, [sp, #12]
 8007e40:	1a9b      	subs	r3, r3, r2
 8007e42:	42ab      	cmp	r3, r5
 8007e44:	dcf2      	bgt.n	8007e2c <_printf_i+0x1e8>
 8007e46:	e7eb      	b.n	8007e20 <_printf_i+0x1dc>
 8007e48:	2500      	movs	r5, #0
 8007e4a:	f104 0919 	add.w	r9, r4, #25
 8007e4e:	e7f5      	b.n	8007e3c <_printf_i+0x1f8>
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d1ac      	bne.n	8007dae <_printf_i+0x16a>
 8007e54:	7803      	ldrb	r3, [r0, #0]
 8007e56:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e5a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007e5e:	e76c      	b.n	8007d3a <_printf_i+0xf6>
 8007e60:	08008185 	.word	0x08008185
 8007e64:	08008196 	.word	0x08008196

08007e68 <memchr>:
 8007e68:	b510      	push	{r4, lr}
 8007e6a:	b2c9      	uxtb	r1, r1
 8007e6c:	4402      	add	r2, r0
 8007e6e:	4290      	cmp	r0, r2
 8007e70:	4603      	mov	r3, r0
 8007e72:	d101      	bne.n	8007e78 <memchr+0x10>
 8007e74:	2300      	movs	r3, #0
 8007e76:	e003      	b.n	8007e80 <memchr+0x18>
 8007e78:	781c      	ldrb	r4, [r3, #0]
 8007e7a:	3001      	adds	r0, #1
 8007e7c:	428c      	cmp	r4, r1
 8007e7e:	d1f6      	bne.n	8007e6e <memchr+0x6>
 8007e80:	4618      	mov	r0, r3
 8007e82:	bd10      	pop	{r4, pc}

08007e84 <memmove>:
 8007e84:	4288      	cmp	r0, r1
 8007e86:	b510      	push	{r4, lr}
 8007e88:	eb01 0302 	add.w	r3, r1, r2
 8007e8c:	d807      	bhi.n	8007e9e <memmove+0x1a>
 8007e8e:	1e42      	subs	r2, r0, #1
 8007e90:	4299      	cmp	r1, r3
 8007e92:	d00a      	beq.n	8007eaa <memmove+0x26>
 8007e94:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e98:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007e9c:	e7f8      	b.n	8007e90 <memmove+0xc>
 8007e9e:	4283      	cmp	r3, r0
 8007ea0:	d9f5      	bls.n	8007e8e <memmove+0xa>
 8007ea2:	1881      	adds	r1, r0, r2
 8007ea4:	1ad2      	subs	r2, r2, r3
 8007ea6:	42d3      	cmn	r3, r2
 8007ea8:	d100      	bne.n	8007eac <memmove+0x28>
 8007eaa:	bd10      	pop	{r4, pc}
 8007eac:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007eb0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007eb4:	e7f7      	b.n	8007ea6 <memmove+0x22>
	...

08007eb8 <_free_r>:
 8007eb8:	b538      	push	{r3, r4, r5, lr}
 8007eba:	4605      	mov	r5, r0
 8007ebc:	2900      	cmp	r1, #0
 8007ebe:	d043      	beq.n	8007f48 <_free_r+0x90>
 8007ec0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ec4:	1f0c      	subs	r4, r1, #4
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	bfb8      	it	lt
 8007eca:	18e4      	addlt	r4, r4, r3
 8007ecc:	f000 f8d0 	bl	8008070 <__malloc_lock>
 8007ed0:	4a1e      	ldr	r2, [pc, #120]	; (8007f4c <_free_r+0x94>)
 8007ed2:	6813      	ldr	r3, [r2, #0]
 8007ed4:	4610      	mov	r0, r2
 8007ed6:	b933      	cbnz	r3, 8007ee6 <_free_r+0x2e>
 8007ed8:	6063      	str	r3, [r4, #4]
 8007eda:	6014      	str	r4, [r2, #0]
 8007edc:	4628      	mov	r0, r5
 8007ede:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ee2:	f000 b8c6 	b.w	8008072 <__malloc_unlock>
 8007ee6:	42a3      	cmp	r3, r4
 8007ee8:	d90b      	bls.n	8007f02 <_free_r+0x4a>
 8007eea:	6821      	ldr	r1, [r4, #0]
 8007eec:	1862      	adds	r2, r4, r1
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	bf01      	itttt	eq
 8007ef2:	681a      	ldreq	r2, [r3, #0]
 8007ef4:	685b      	ldreq	r3, [r3, #4]
 8007ef6:	1852      	addeq	r2, r2, r1
 8007ef8:	6022      	streq	r2, [r4, #0]
 8007efa:	6063      	str	r3, [r4, #4]
 8007efc:	6004      	str	r4, [r0, #0]
 8007efe:	e7ed      	b.n	8007edc <_free_r+0x24>
 8007f00:	4613      	mov	r3, r2
 8007f02:	685a      	ldr	r2, [r3, #4]
 8007f04:	b10a      	cbz	r2, 8007f0a <_free_r+0x52>
 8007f06:	42a2      	cmp	r2, r4
 8007f08:	d9fa      	bls.n	8007f00 <_free_r+0x48>
 8007f0a:	6819      	ldr	r1, [r3, #0]
 8007f0c:	1858      	adds	r0, r3, r1
 8007f0e:	42a0      	cmp	r0, r4
 8007f10:	d10b      	bne.n	8007f2a <_free_r+0x72>
 8007f12:	6820      	ldr	r0, [r4, #0]
 8007f14:	4401      	add	r1, r0
 8007f16:	1858      	adds	r0, r3, r1
 8007f18:	4282      	cmp	r2, r0
 8007f1a:	6019      	str	r1, [r3, #0]
 8007f1c:	d1de      	bne.n	8007edc <_free_r+0x24>
 8007f1e:	6810      	ldr	r0, [r2, #0]
 8007f20:	6852      	ldr	r2, [r2, #4]
 8007f22:	4401      	add	r1, r0
 8007f24:	6019      	str	r1, [r3, #0]
 8007f26:	605a      	str	r2, [r3, #4]
 8007f28:	e7d8      	b.n	8007edc <_free_r+0x24>
 8007f2a:	d902      	bls.n	8007f32 <_free_r+0x7a>
 8007f2c:	230c      	movs	r3, #12
 8007f2e:	602b      	str	r3, [r5, #0]
 8007f30:	e7d4      	b.n	8007edc <_free_r+0x24>
 8007f32:	6820      	ldr	r0, [r4, #0]
 8007f34:	1821      	adds	r1, r4, r0
 8007f36:	428a      	cmp	r2, r1
 8007f38:	bf01      	itttt	eq
 8007f3a:	6811      	ldreq	r1, [r2, #0]
 8007f3c:	6852      	ldreq	r2, [r2, #4]
 8007f3e:	1809      	addeq	r1, r1, r0
 8007f40:	6021      	streq	r1, [r4, #0]
 8007f42:	6062      	str	r2, [r4, #4]
 8007f44:	605c      	str	r4, [r3, #4]
 8007f46:	e7c9      	b.n	8007edc <_free_r+0x24>
 8007f48:	bd38      	pop	{r3, r4, r5, pc}
 8007f4a:	bf00      	nop
 8007f4c:	20000424 	.word	0x20000424

08007f50 <_malloc_r>:
 8007f50:	b570      	push	{r4, r5, r6, lr}
 8007f52:	1ccd      	adds	r5, r1, #3
 8007f54:	f025 0503 	bic.w	r5, r5, #3
 8007f58:	3508      	adds	r5, #8
 8007f5a:	2d0c      	cmp	r5, #12
 8007f5c:	bf38      	it	cc
 8007f5e:	250c      	movcc	r5, #12
 8007f60:	2d00      	cmp	r5, #0
 8007f62:	4606      	mov	r6, r0
 8007f64:	db01      	blt.n	8007f6a <_malloc_r+0x1a>
 8007f66:	42a9      	cmp	r1, r5
 8007f68:	d903      	bls.n	8007f72 <_malloc_r+0x22>
 8007f6a:	230c      	movs	r3, #12
 8007f6c:	6033      	str	r3, [r6, #0]
 8007f6e:	2000      	movs	r0, #0
 8007f70:	bd70      	pop	{r4, r5, r6, pc}
 8007f72:	f000 f87d 	bl	8008070 <__malloc_lock>
 8007f76:	4a21      	ldr	r2, [pc, #132]	; (8007ffc <_malloc_r+0xac>)
 8007f78:	6814      	ldr	r4, [r2, #0]
 8007f7a:	4621      	mov	r1, r4
 8007f7c:	b991      	cbnz	r1, 8007fa4 <_malloc_r+0x54>
 8007f7e:	4c20      	ldr	r4, [pc, #128]	; (8008000 <_malloc_r+0xb0>)
 8007f80:	6823      	ldr	r3, [r4, #0]
 8007f82:	b91b      	cbnz	r3, 8007f8c <_malloc_r+0x3c>
 8007f84:	4630      	mov	r0, r6
 8007f86:	f000 f863 	bl	8008050 <_sbrk_r>
 8007f8a:	6020      	str	r0, [r4, #0]
 8007f8c:	4629      	mov	r1, r5
 8007f8e:	4630      	mov	r0, r6
 8007f90:	f000 f85e 	bl	8008050 <_sbrk_r>
 8007f94:	1c43      	adds	r3, r0, #1
 8007f96:	d124      	bne.n	8007fe2 <_malloc_r+0x92>
 8007f98:	230c      	movs	r3, #12
 8007f9a:	4630      	mov	r0, r6
 8007f9c:	6033      	str	r3, [r6, #0]
 8007f9e:	f000 f868 	bl	8008072 <__malloc_unlock>
 8007fa2:	e7e4      	b.n	8007f6e <_malloc_r+0x1e>
 8007fa4:	680b      	ldr	r3, [r1, #0]
 8007fa6:	1b5b      	subs	r3, r3, r5
 8007fa8:	d418      	bmi.n	8007fdc <_malloc_r+0x8c>
 8007faa:	2b0b      	cmp	r3, #11
 8007fac:	d90f      	bls.n	8007fce <_malloc_r+0x7e>
 8007fae:	600b      	str	r3, [r1, #0]
 8007fb0:	18cc      	adds	r4, r1, r3
 8007fb2:	50cd      	str	r5, [r1, r3]
 8007fb4:	4630      	mov	r0, r6
 8007fb6:	f000 f85c 	bl	8008072 <__malloc_unlock>
 8007fba:	f104 000b 	add.w	r0, r4, #11
 8007fbe:	1d23      	adds	r3, r4, #4
 8007fc0:	f020 0007 	bic.w	r0, r0, #7
 8007fc4:	1ac3      	subs	r3, r0, r3
 8007fc6:	d0d3      	beq.n	8007f70 <_malloc_r+0x20>
 8007fc8:	425a      	negs	r2, r3
 8007fca:	50e2      	str	r2, [r4, r3]
 8007fcc:	e7d0      	b.n	8007f70 <_malloc_r+0x20>
 8007fce:	684b      	ldr	r3, [r1, #4]
 8007fd0:	428c      	cmp	r4, r1
 8007fd2:	bf16      	itet	ne
 8007fd4:	6063      	strne	r3, [r4, #4]
 8007fd6:	6013      	streq	r3, [r2, #0]
 8007fd8:	460c      	movne	r4, r1
 8007fda:	e7eb      	b.n	8007fb4 <_malloc_r+0x64>
 8007fdc:	460c      	mov	r4, r1
 8007fde:	6849      	ldr	r1, [r1, #4]
 8007fe0:	e7cc      	b.n	8007f7c <_malloc_r+0x2c>
 8007fe2:	1cc4      	adds	r4, r0, #3
 8007fe4:	f024 0403 	bic.w	r4, r4, #3
 8007fe8:	42a0      	cmp	r0, r4
 8007fea:	d005      	beq.n	8007ff8 <_malloc_r+0xa8>
 8007fec:	1a21      	subs	r1, r4, r0
 8007fee:	4630      	mov	r0, r6
 8007ff0:	f000 f82e 	bl	8008050 <_sbrk_r>
 8007ff4:	3001      	adds	r0, #1
 8007ff6:	d0cf      	beq.n	8007f98 <_malloc_r+0x48>
 8007ff8:	6025      	str	r5, [r4, #0]
 8007ffa:	e7db      	b.n	8007fb4 <_malloc_r+0x64>
 8007ffc:	20000424 	.word	0x20000424
 8008000:	20000428 	.word	0x20000428

08008004 <_realloc_r>:
 8008004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008006:	4607      	mov	r7, r0
 8008008:	4614      	mov	r4, r2
 800800a:	460e      	mov	r6, r1
 800800c:	b921      	cbnz	r1, 8008018 <_realloc_r+0x14>
 800800e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008012:	4611      	mov	r1, r2
 8008014:	f7ff bf9c 	b.w	8007f50 <_malloc_r>
 8008018:	b922      	cbnz	r2, 8008024 <_realloc_r+0x20>
 800801a:	f7ff ff4d 	bl	8007eb8 <_free_r>
 800801e:	4625      	mov	r5, r4
 8008020:	4628      	mov	r0, r5
 8008022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008024:	f000 f826 	bl	8008074 <_malloc_usable_size_r>
 8008028:	42a0      	cmp	r0, r4
 800802a:	d20f      	bcs.n	800804c <_realloc_r+0x48>
 800802c:	4621      	mov	r1, r4
 800802e:	4638      	mov	r0, r7
 8008030:	f7ff ff8e 	bl	8007f50 <_malloc_r>
 8008034:	4605      	mov	r5, r0
 8008036:	2800      	cmp	r0, #0
 8008038:	d0f2      	beq.n	8008020 <_realloc_r+0x1c>
 800803a:	4631      	mov	r1, r6
 800803c:	4622      	mov	r2, r4
 800803e:	f7ff fc05 	bl	800784c <memcpy>
 8008042:	4631      	mov	r1, r6
 8008044:	4638      	mov	r0, r7
 8008046:	f7ff ff37 	bl	8007eb8 <_free_r>
 800804a:	e7e9      	b.n	8008020 <_realloc_r+0x1c>
 800804c:	4635      	mov	r5, r6
 800804e:	e7e7      	b.n	8008020 <_realloc_r+0x1c>

08008050 <_sbrk_r>:
 8008050:	b538      	push	{r3, r4, r5, lr}
 8008052:	2300      	movs	r3, #0
 8008054:	4c05      	ldr	r4, [pc, #20]	; (800806c <_sbrk_r+0x1c>)
 8008056:	4605      	mov	r5, r0
 8008058:	4608      	mov	r0, r1
 800805a:	6023      	str	r3, [r4, #0]
 800805c:	f7f8 fabe 	bl	80005dc <_sbrk>
 8008060:	1c43      	adds	r3, r0, #1
 8008062:	d102      	bne.n	800806a <_sbrk_r+0x1a>
 8008064:	6823      	ldr	r3, [r4, #0]
 8008066:	b103      	cbz	r3, 800806a <_sbrk_r+0x1a>
 8008068:	602b      	str	r3, [r5, #0]
 800806a:	bd38      	pop	{r3, r4, r5, pc}
 800806c:	200014e0 	.word	0x200014e0

08008070 <__malloc_lock>:
 8008070:	4770      	bx	lr

08008072 <__malloc_unlock>:
 8008072:	4770      	bx	lr

08008074 <_malloc_usable_size_r>:
 8008074:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008078:	1f18      	subs	r0, r3, #4
 800807a:	2b00      	cmp	r3, #0
 800807c:	bfbc      	itt	lt
 800807e:	580b      	ldrlt	r3, [r1, r0]
 8008080:	18c0      	addlt	r0, r0, r3
 8008082:	4770      	bx	lr

08008084 <_init>:
 8008084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008086:	bf00      	nop
 8008088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800808a:	bc08      	pop	{r3}
 800808c:	469e      	mov	lr, r3
 800808e:	4770      	bx	lr

08008090 <_fini>:
 8008090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008092:	bf00      	nop
 8008094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008096:	bc08      	pop	{r3}
 8008098:	469e      	mov	lr, r3
 800809a:	4770      	bx	lr
